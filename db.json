{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/sitemap.xml","path":"sitemap.xml","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar2.png","path":"images/avatar2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"2a01f9869be88140976995c87e0d6d26e63cc53d","modified":1482215249000},{"_id":"source/CNAME","hash":"02d6575d808568a002234d34f18b2f410a8e1566","modified":1482215249000},{"_id":"source/robots.txt","hash":"2b76b1757480128723f3613747804aab86e812f4","modified":1482215249000},{"_id":"source/sitemap.xml","hash":"5c3c417732ec1680e92c5c192836c20fa59f6f23","modified":1482215249000},{"_id":"themes/next/.DS_Store","hash":"8c004e3914685be4c46bd57ec70528c0b963654d","modified":1482215454000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1482215249000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1482215249000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1482215249000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1482215249000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1482215249000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1482215249000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1482215249000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1482215249000},{"_id":"themes/next/_config.yml","hash":"92f51c57da362b7747e34d86f73855f989bab644","modified":1482215249000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1482215249000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1482215249000},{"_id":"source/.DS_Store","hash":"de7610198cf7092db814e46d17b75d0c87cdc7cd","modified":1482216554000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1482215249000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1482215541000},{"_id":"source/_posts/Job.md","hash":"cc1c09b5f68270545756db62b23ff3c41d48a9f4","modified":1482215249000},{"_id":"source/_posts/Python爬虫学习之一.md","hash":"0dfb8f246d32d121f91007d523d21eb229ddda52","modified":1482215249000},{"_id":"source/_posts/Python爬虫学习之二.md","hash":"2ba143571cd4341806135cc4c66b0e31823b38b8","modified":1482215249000},{"_id":"source/_posts/importDB.py","hash":"8ea46e1535bbfecabdff33a09f74f8ba3879c49b","modified":1482215249000},{"_id":"source/_posts/新的征程.md","hash":"fd4ca707bbc466edd18a32fda7a4291a0307ddcc","modified":1482215249000},{"_id":"source/_posts/将Django搭建在Apache上.md","hash":"9f8e19cbec9fa62bb75542cdbf40c46432059a81","modified":1482215249000},{"_id":"source/messages/index.md","hash":"f82e98e4e32ac01d465a6204766e8cdb253043c3","modified":1482215249000},{"_id":"source/categories/index.md","hash":"c3b163aba8876e0ebd8f27108639cb11b64b74ad","modified":1482215249000},{"_id":"source/tags/index.md","hash":"4dcf83faf21a0b2948b6b2469b77cd7d8be7d695","modified":1482215249000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1482215249000},{"_id":"themes/next/languages/en.yml","hash":"8fbb629e15c2c0b4f92b1be5ea5b36b150b3d709","modified":1482215249000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1482215249000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1482215249000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1482215249000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1482215249000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1482215249000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1482215249000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1482215249000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1482215249000},{"_id":"themes/next/layout/_layout.swig","hash":"993df74467835eeb223d92206f36ecd6cfe5119e","modified":1482215249000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1482215249000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1482215249000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1482215249000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1482215249000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1482215249000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1482215249000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1482215249000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1482215249000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1482215249000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1482215249000},{"_id":"source/_posts/前端面试题.md","hash":"1aa17577bcca881b771d8f4bca253b42986bb499","modified":1482215249000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482215249000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1482215249000},{"_id":"themes/next/layout/_macro/post.swig","hash":"cee85781fe87d98433c994a0571ad7c39a48155b","modified":1482215249000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"70bd1f11a558a7fc4b8fd7860377f31e0357ceb6","modified":1482215249000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6609240fe73a53e436d0c8302279e28596dc9c70","modified":1482215249000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1482215249000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1482215249000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1482215249000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"3003fda5a8af553451f7945f4e1ce006ca72e4c4","modified":1482215249000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a7084dcef03fa0d0c97962ec9828b77c9a73592f","modified":1482215249000},{"_id":"themes/next/layout/_partials/header.swig","hash":"7739068b69f87ae641dea19c3445169ae80d5df4","modified":1482215249000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1482215249000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1482215249000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1482215249000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1482215249000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1482215249000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"21b055278a74f190571af67cfae03ae6c3fb295c","modified":1482215249000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1482215249000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1482215249000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1482215249000},{"_id":"themes/next/source/css/main.styl","hash":"43561ee440747434d06a01da5da4fdaafd411e77","modified":1482215249000},{"_id":"themes/next/source/images/avatar2.png","hash":"e627ef37a3f4b1af7fad14faf9672dde610e3d44","modified":1482215249000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1482215249000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1482215249000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1482215249000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1482215249000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1482215249000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1482215249000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1482215249000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1482215249000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1482215249000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1482215249000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1482215249000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1482215249000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482215249000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482215249000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482215249000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482215249000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482215249000},{"_id":"themes/next/source/css/_my/mycss.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482215249000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482215249000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482215249000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1482215249000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1482215249000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1482215249000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1482215249000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1482215249000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1482215249000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1482215249000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1482215249000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1482215249000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1482215249000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1482215249000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1482215249000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1482215249000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1482215249000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1482215249000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1482215249000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1482215249000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1482215249000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1482215249000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"11d443fc97648d2965d7f8bad9f4a493996fe62f","modified":1482215249000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"06319d25d97d268655442345bef62a38d690add9","modified":1482215249000},{"_id":"themes/next/source/css/_variables/default.styl","hash":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1482215249000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1482215249000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1482215249000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1482215249000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1482215249000},{"_id":"themes/next/source/js/src/post-details.js","hash":"10247c78fe933a0cfcaad22a2a03e7a026864461","modified":1482215249000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1482215249000},{"_id":"themes/next/source/js/src/utils.js","hash":"a3a3375de818964f4cbed4d0e2c2f97ccee7199e","modified":1482215249000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1482215249000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1482215249000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1482215249000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1482215249000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1482215249000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1482215249000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1482215249000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1482215249000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1482215249000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1482215249000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1482215249000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1482215249000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1482215249000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1482215249000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1482215249000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1482215249000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1482215249000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1482215249000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1482215249000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1482215249000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1482215249000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1482215249000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1482215249000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"fa2b7a0006b6c447fa025474f8e0af4e4e569a36","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1482215249000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1482215249000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"4c84903d6a15a903235eec04a560fdeda80c12f3","modified":1482215249000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1482215249000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1482215249000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"04e6c5257814c65e638ab70c53030e8dfdb3f37d","modified":1482215249000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"6cc10d943d92eac953e6978e46d27ae55584482c","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"8aca5d9f1df157ab27e699c1b3ba9438b9e039ad","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"9658d09de4fcc809a29d4b706a9621adfb3090ad","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"cd2acd8c415c552e397af2da61d7659688e7aab4","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1482215249000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1482215249000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1482215249000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1482215249000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1482215249000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1482215249000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"61763d236029d2a4414be499d0e65d7dfb34605b","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"23dd966324937deeccc8f5fa16a6d32e4e46243b","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"db5c2093bec1f1642ad0a3702290bf49b4b8ed35","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"fe71e9be08cb418cf68352fd6212ddd0d7150579","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330a2ce52c5a5fefc1e85c473113a3bc58210c76","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4677ae612ff9c593ee17ab2ea82dbb995432d301","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1482215249000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"f7ebd428f3058ec3ecc7648788712617bea520ba","modified":1482215249000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1482215249000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1482215249000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1482215249000},{"_id":"themes/next/source/images/avatar.png","hash":"5bb135ae48e032e9a13c649d1983c3ed97c0bfaa","modified":1482215249000},{"_id":"public/sitemap.xml","hash":"e3d92670a658da9e830ff764fd367ba7a71a197f","modified":1482216634039},{"_id":"public/baidusitemap.xml","hash":"121900bf204c1b5dc0e8f511ceb3d47c6406378b","modified":1482216634055},{"_id":"public/atom.xml","hash":"ee53698d790782eda0348e7d9a3c30254a8614c7","modified":1482216634056},{"_id":"public/messages/index.html","hash":"b5374c96169c3cb178e98ae9ea3c1c021200354c","modified":1482216634081},{"_id":"public/404.html","hash":"4ec1beb0e54badcb606850146588e8118085f7bc","modified":1482216634081},{"_id":"public/categories/index.html","hash":"a9bb91225930638188b32e8072d5e4d7379ebfc9","modified":1482216634081},{"_id":"public/tags/index.html","hash":"aec3e56e90c3b8e23b3be7914f1685ec95341cfd","modified":1482216634081},{"_id":"public/2016/04/05/新的征程/index.html","hash":"5d29262edcd05cd2d1a51b84ac6d4b6f3987e1a7","modified":1482216634081},{"_id":"public/archives/index.html","hash":"5d736a7021c659058451d8e303fa3bb38250ad80","modified":1482216634081},{"_id":"public/archives/2016/index.html","hash":"5f0068b5d29ccad34d5cf99fb4e710cc833f53b2","modified":1482216634081},{"_id":"public/archives/2016/04/index.html","hash":"9963d6ea0fb725b496db27a67990f68659e4c342","modified":1482216634081},{"_id":"public/archives/2016/05/index.html","hash":"11ceecaeb9cc0fb9a80f953e575f0f8e55ebaf90","modified":1482216634081},{"_id":"public/categories/Job/index.html","hash":"1d08eca3460e3818cc65403a42a6ae8812c46bc0","modified":1482216634081},{"_id":"public/categories/Python/index.html","hash":"b71e40e4cd4a4bdf1e02c5bc5a34a842c742911e","modified":1482216634081},{"_id":"public/categories/essay/index.html","hash":"2149e55011162a001a233b7c2822ec79709982a3","modified":1482216634081},{"_id":"public/categories/Django/index.html","hash":"5704b37f85100c964630b7f0dfab2efc8efd7c05","modified":1482216634081},{"_id":"public/tags/Job/index.html","hash":"b454a1e72ac1ea53d3d89b37e4fface138ca57b7","modified":1482216634081},{"_id":"public/tags/Python/index.html","hash":"1528c55cee7a60baa687a78fd2f2e6ae677dc512","modified":1482216634081},{"_id":"public/tags/Python-Django/index.html","hash":"2d14de82a882e0ffd05e855f159cfc471046ceab","modified":1482216634082},{"_id":"public/2016/05/09/前端面试题/index.html","hash":"a961a14dfab5744788df6977ba897c1aae3cf271","modified":1482216634082},{"_id":"public/2016/05/18/Job/index.html","hash":"da0dc887e25075c718f99c62b79d533274916574","modified":1482216634082},{"_id":"public/2016/04/09/Python爬虫学习之二/index.html","hash":"9f7eb295f86a360c12242d9d44dfdfd231a78bb5","modified":1482216634082},{"_id":"public/2016/04/06/Python爬虫学习之一/index.html","hash":"44dcb5b89264fb65b3dada192c5cfee411dfd538","modified":1482216634082},{"_id":"public/2016/04/06/将Django搭建在Apache上/index.html","hash":"feabc9a5aab42eb70b9df933a205ab6eb84936ce","modified":1482216634082},{"_id":"public/index.html","hash":"fa66212b44753bf6ff3b2b007c55f99b31c6e6a6","modified":1482216634082},{"_id":"public/CNAME","hash":"02d6575d808568a002234d34f18b2f410a8e1566","modified":1482216634092},{"_id":"public/robots.txt","hash":"2b76b1757480128723f3613747804aab86e812f4","modified":1482216634092},{"_id":"public/images/avatar2.png","hash":"e627ef37a3f4b1af7fad14faf9672dde610e3d44","modified":1482216634092},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1482216634092},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1482216634092},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1482216634092},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1482216634092},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1482216634092},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1482216634093},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1482216634101},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1482216634101},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1482216634101},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1482216634101},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1482216634101},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1482216634101},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1482216634101},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1482216634101},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1482216634101},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1482216634101},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1482216634101},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1482216634102},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1482216634102},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1482216634102},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1482216634102},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1482216634102},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1482216634102},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1482216634607},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1482216634612},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1482216634612},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1482216634616},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1482216634616},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1482216634616},{"_id":"public/js/src/post-details.js","hash":"10247c78fe933a0cfcaad22a2a03e7a026864461","modified":1482216634616},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1482216634616},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1482216634616},{"_id":"public/js/src/utils.js","hash":"a3a3375de818964f4cbed4d0e2c2f97ccee7199e","modified":1482216634617},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1482216634617},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1482216634617},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1482216634617},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1482216634617},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1482216634617},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1482216634617},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1482216634617},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1482216634617},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1482216634617},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1482216634617},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1482216634617},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1482216634617},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1482216634617},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1482216634617},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1482216634617},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1482216634617},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1482216634618},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1482216634618},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1482216634618},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1482216634618},{"_id":"public/css/main.css","hash":"9f7fe0731bcd9c0f802eb7791a746adcb0d94e57","modified":1482216634618},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1482216634618},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1482216634618},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1482216634618},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1482216634618},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1482216634618},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1482216634618},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1482216634618},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1482216634618},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1482216634618},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1482216634618},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1482216634626},{"_id":"public/images/avatar.png","hash":"5bb135ae48e032e9a13c649d1983c3ed97c0bfaa","modified":1482216634653}],"Category":[{"name":"Job","_id":"ciwx5ihh30005i7q31hietkr5"},{"name":"Python","_id":"ciwx5ihhb000ai7q3ffy7r438"},{"name":"essay","_id":"ciwx5ihhe000ii7q3i0h2q96n"},{"name":"Django","_id":"ciwx5ihhh000mi7q3n08pjwoh"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"�ص��ҵ���ҳ\">\n</script>\n\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"�ص��ҵ���ҳ\">\n</script>\n\n</body>\n</html>","date":"2016-12-20T06:31:20.000Z","updated":"2016-12-20T06:27:29.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ciwx5ihfy0000i7q3scze7yru","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"�ص��ҵ���ҳ\">\n</script>\n\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"�ص��ҵ���ҳ\">\n</script>\n\n</body>\n</html>"},{"title":"messages","date":"2016-04-06T04:40:08.000Z","type":"messages","_content":"<blockquote class=\"blockquote-center\">念念不忘，必有回响</blockquote>\n<br/>\n>最近访客\n\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n","source":"messages/index.md","raw":"---\ntitle: messages\ndate: 2016-04-06 12:40:08\ntype: \"messages\"\n---\n<blockquote class=\"blockquote-center\">念念不忘，必有回响</blockquote>\n<br/>\n>最近访客\n\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n","updated":"2016-12-20T06:27:29.000Z","path":"messages/index.html","comments":1,"layout":"page","_id":"ciwx5ihgy0002i7q325fa5smb","content":"<p><blockquote class=\"blockquote-center\">念念不忘，必有回响</blockquote><br><br></p>\n<blockquote>\n<p>最近访客</p>\n</blockquote>\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n","excerpt":"","more":"<p><blockquote class=\"blockquote-center\">念念不忘，必有回响</blockquote><br><br/></p>\n<blockquote>\n<p>最近访客</p>\n</blockquote>\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n"},{"title":"categories","date":"2016-04-04T13:23:17.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-04-04 21:23:17\ntype: \"categories\"\n---\n","updated":"2016-12-20T06:27:29.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciwx5ihh20004i7q3p6o0uqux","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-04-04T13:22:14.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-04-04 21:22:14\ntype: \"tags\"\n---\n","updated":"2016-12-20T06:27:29.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciwx5ihls000qi7q3qq3fpfo0","content":"","excerpt":"","more":""}],"Post":[{"title":"Job","date":"2016-05-18T12:12:37.389Z","_content":"这是爬取自北邮人论坛的招聘信息，点击即可跳转到北邮人论坛。\n\ntime: 2016-05-18 20:12:37.389000\n\n<!--more-->\n[<font color=red>【实习】【中科院信息工程研究所】招聘客座实习学生</font>](http://bbs.byr.cn/article/ParttimeJob/492127)\n[<font color=blue>【实习】【百度】商业基础平台部策略实习生</font>](http://bbs.byr.cn/article/ParttimeJob/494262)\n[<font color=red>【实习】【Comper】炫酷外企诚招大数据相关实习生</font>](http://bbs.byr.cn/article/ParttimeJob/494675)\n[<font color=blue>【实习】【平方和投资】招聘交易系统开发工程师</font>](http://bbs.byr.cn/article/ParttimeJob/494971)\n[<font color=red>【实习】【增长引擎】招聘有全栈潜力的Geek加入创业项目</font>](http://bbs.byr.cn/article/ParttimeJob/495533)\n[<font color=blue>【实习】【FreeWheel】2016暑期实习-北京（Dev Ops可以内推，其</font>](http://bbs.byr.cn/article/ParttimeJob/495587)\n[<font color=red>【实习】【百度】机器学习/自然语言处理/数据挖掘和产品经理</font>](http://bbs.byr.cn/article/ParttimeJob/495727)\n[<font color=blue>【实习】【美团】云计算部招聘web开发(python)实习生</font>](http://bbs.byr.cn/article/ParttimeJob/495729)\n[<font color=red>【实习】【尚德机构】招募机器学习算法实习生</font>](http://bbs.byr.cn/article/ParttimeJob/496031)\n[<font color=blue>【实习】【唯科时代】测试实习生</font>](http://bbs.byr.cn/article/ParttimeJob/496534)\n[<font color=red>【实习】【滴滴】滴滴出行2017实习生校招开始！</font>](http://bbs.byr.cn/article/ParttimeJob/497938)\n[<font color=blue>【实习】【FreeWheel】Dev_Operation_Engineer & System_Operat</font>](http://bbs.byr.cn/article/ParttimeJob/497952)\n[<font color=red>【实习】【下厨房】招 python/web/android/iOS/DBA/运维/测试/</font>](http://bbs.byr.cn/article/ParttimeJob/498014)\n[<font color=blue>【实习】【乐视】OpenStack开发工程师实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498176)\n[<font color=red>【实习】【乐视】SDN高级开发工程师(实习)</font>](http://bbs.byr.cn/article/ParttimeJob/498177)\n[<font color=blue>【实习】【京东】广告算法实习生招聘-仅限研二学生</font>](http://bbs.byr.cn/article/ParttimeJob/498219)\n[<font color=red>【实习】【依依短租】全国领先短租民宿诚聘（后台实习生）</font>](http://bbs.byr.cn/article/ParttimeJob/498251)\n[<font color=blue>【实习】【铁科院】深度学习实习生-图像方向</font>](http://bbs.byr.cn/article/ParttimeJob/498269)\n[<font color=red>【实习】【EMC】北京研发中心招聘研发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498308)\n[<font color=blue>【实习】【中国科学院信息工程研究所】 招聘 大数据研发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498334)\n[<font color=red>【实习】【联通时科】招聘java web后台开发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498345)\n[<font color=blue>【实习】【格灵深瞳】Web前端/全栈实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498346)\n[<font color=red>【实习】【金山软件-金山云】招聘运维研发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498385)\n[<font color=blue>【实习】【亚马逊AWS】助理架构师实习生-偏开发</font>](http://bbs.byr.cn/article/ParttimeJob/498437)\n[<font color=red>【实习】【滴滴出行】大数据&机器学习研究院实习招聘--FE、Java</font>](http://bbs.byr.cn/article/ParttimeJob/498443)\n[<font color=blue>【实习】【知乎】Web后端开发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498445)\n[<font color=red>【实习】【知乎】系统开发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498447)\n[<font color=blue>【实习】【猿题库】  研发日薪500元，产品日薪300元 -- 数据分</font>](http://bbs.byr.cn/article/ParttimeJob/498464)\n[<font color=red>【实习】【App Annie】招募Web Backend Software Engineer</font>](http://bbs.byr.cn/article/ParttimeJob/498466)\n[<font color=blue>【实习】【房多多】房多多实习生招聘</font>](http://bbs.byr.cn/article/ParttimeJob/498478)\n[<font color=red>【实习】【美团】搜索查询分析组招聘实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498481)\n[<font color=blue>【实习】【百度】招募测试开发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498498)\n[<font color=red>【实习】【百度】百度国际化团队招聘测试实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498502)\n[<font color=blue>【实习】【人人网】投资研究实习生（研究开发方向）</font>](http://bbs.byr.cn/article/ParttimeJob/498518)\n[<font color=red>【实习】【百度】招聘大数据研发工程师</font>](http://bbs.byr.cn/article/ParttimeJob/498528)\n[<font color=blue>【实习】【搜狗】搜狗桌面研究部招机器学习实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498543)\n","source":"_posts/Job.md","raw":"---\ntitle: Job\ndate: 2016-05-18 20:12:37.389000\ntags: Job\ncategories: Job\n---\n这是爬取自北邮人论坛的招聘信息，点击即可跳转到北邮人论坛。\n\ntime: 2016-05-18 20:12:37.389000\n\n<!--more-->\n[<font color=red>【实习】【中科院信息工程研究所】招聘客座实习学生</font>](http://bbs.byr.cn/article/ParttimeJob/492127)\n[<font color=blue>【实习】【百度】商业基础平台部策略实习生</font>](http://bbs.byr.cn/article/ParttimeJob/494262)\n[<font color=red>【实习】【Comper】炫酷外企诚招大数据相关实习生</font>](http://bbs.byr.cn/article/ParttimeJob/494675)\n[<font color=blue>【实习】【平方和投资】招聘交易系统开发工程师</font>](http://bbs.byr.cn/article/ParttimeJob/494971)\n[<font color=red>【实习】【增长引擎】招聘有全栈潜力的Geek加入创业项目</font>](http://bbs.byr.cn/article/ParttimeJob/495533)\n[<font color=blue>【实习】【FreeWheel】2016暑期实习-北京（Dev Ops可以内推，其</font>](http://bbs.byr.cn/article/ParttimeJob/495587)\n[<font color=red>【实习】【百度】机器学习/自然语言处理/数据挖掘和产品经理</font>](http://bbs.byr.cn/article/ParttimeJob/495727)\n[<font color=blue>【实习】【美团】云计算部招聘web开发(python)实习生</font>](http://bbs.byr.cn/article/ParttimeJob/495729)\n[<font color=red>【实习】【尚德机构】招募机器学习算法实习生</font>](http://bbs.byr.cn/article/ParttimeJob/496031)\n[<font color=blue>【实习】【唯科时代】测试实习生</font>](http://bbs.byr.cn/article/ParttimeJob/496534)\n[<font color=red>【实习】【滴滴】滴滴出行2017实习生校招开始！</font>](http://bbs.byr.cn/article/ParttimeJob/497938)\n[<font color=blue>【实习】【FreeWheel】Dev_Operation_Engineer & System_Operat</font>](http://bbs.byr.cn/article/ParttimeJob/497952)\n[<font color=red>【实习】【下厨房】招 python/web/android/iOS/DBA/运维/测试/</font>](http://bbs.byr.cn/article/ParttimeJob/498014)\n[<font color=blue>【实习】【乐视】OpenStack开发工程师实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498176)\n[<font color=red>【实习】【乐视】SDN高级开发工程师(实习)</font>](http://bbs.byr.cn/article/ParttimeJob/498177)\n[<font color=blue>【实习】【京东】广告算法实习生招聘-仅限研二学生</font>](http://bbs.byr.cn/article/ParttimeJob/498219)\n[<font color=red>【实习】【依依短租】全国领先短租民宿诚聘（后台实习生）</font>](http://bbs.byr.cn/article/ParttimeJob/498251)\n[<font color=blue>【实习】【铁科院】深度学习实习生-图像方向</font>](http://bbs.byr.cn/article/ParttimeJob/498269)\n[<font color=red>【实习】【EMC】北京研发中心招聘研发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498308)\n[<font color=blue>【实习】【中国科学院信息工程研究所】 招聘 大数据研发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498334)\n[<font color=red>【实习】【联通时科】招聘java web后台开发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498345)\n[<font color=blue>【实习】【格灵深瞳】Web前端/全栈实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498346)\n[<font color=red>【实习】【金山软件-金山云】招聘运维研发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498385)\n[<font color=blue>【实习】【亚马逊AWS】助理架构师实习生-偏开发</font>](http://bbs.byr.cn/article/ParttimeJob/498437)\n[<font color=red>【实习】【滴滴出行】大数据&机器学习研究院实习招聘--FE、Java</font>](http://bbs.byr.cn/article/ParttimeJob/498443)\n[<font color=blue>【实习】【知乎】Web后端开发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498445)\n[<font color=red>【实习】【知乎】系统开发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498447)\n[<font color=blue>【实习】【猿题库】  研发日薪500元，产品日薪300元 -- 数据分</font>](http://bbs.byr.cn/article/ParttimeJob/498464)\n[<font color=red>【实习】【App Annie】招募Web Backend Software Engineer</font>](http://bbs.byr.cn/article/ParttimeJob/498466)\n[<font color=blue>【实习】【房多多】房多多实习生招聘</font>](http://bbs.byr.cn/article/ParttimeJob/498478)\n[<font color=red>【实习】【美团】搜索查询分析组招聘实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498481)\n[<font color=blue>【实习】【百度】招募测试开发实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498498)\n[<font color=red>【实习】【百度】百度国际化团队招聘测试实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498502)\n[<font color=blue>【实习】【人人网】投资研究实习生（研究开发方向）</font>](http://bbs.byr.cn/article/ParttimeJob/498518)\n[<font color=red>【实习】【百度】招聘大数据研发工程师</font>](http://bbs.byr.cn/article/ParttimeJob/498528)\n[<font color=blue>【实习】【搜狗】搜狗桌面研究部招机器学习实习生</font>](http://bbs.byr.cn/article/ParttimeJob/498543)\n","slug":"Job","published":1,"updated":"2016-12-20T06:27:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwx5ihgv0001i7q3iszj3i4a","content":"<p>这是爬取自北邮人论坛的招聘信息，点击即可跳转到北邮人论坛。</p>\n<p>time: 2016-05-18 20:12:37.389000</p>\n<a id=\"more\"></a>\n<p><a href=\"http://bbs.byr.cn/article/ParttimeJob/492127\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【中科院信息工程研究所】招聘客座实习学生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/494262\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【百度】商业基础平台部策略实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/494675\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【Comper】炫酷外企诚招大数据相关实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/494971\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【平方和投资】招聘交易系统开发工程师</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/495533\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【增长引擎】招聘有全栈潜力的Geek加入创业项目</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/495587\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【FreeWheel】2016暑期实习-北京（Dev Ops可以内推，其</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/495727\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【百度】机器学习/自然语言处理/数据挖掘和产品经理</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/495729\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【美团】云计算部招聘web开发(python)实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/496031\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【尚德机构】招募机器学习算法实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/496534\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【唯科时代】测试实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/497938\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【滴滴】滴滴出行2017实习生校招开始！</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/497952\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【FreeWheel】Dev_Operation_Engineer &amp; System_Operat</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498014\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【下厨房】招 python/web/android/iOS/DBA/运维/测试/</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498176\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【乐视】OpenStack开发工程师实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498177\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【乐视】SDN高级开发工程师(实习)</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498219\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【京东】广告算法实习生招聘-仅限研二学生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498251\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【依依短租】全国领先短租民宿诚聘（后台实习生）</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498269\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【铁科院】深度学习实习生-图像方向</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498308\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【EMC】北京研发中心招聘研发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498334\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【中国科学院信息工程研究所】 招聘 大数据研发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498345\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【联通时科】招聘java web后台开发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498346\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【格灵深瞳】Web前端/全栈实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498385\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【金山软件-金山云】招聘运维研发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498437\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【亚马逊AWS】助理架构师实习生-偏开发</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498443\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【滴滴出行】大数据&amp;机器学习研究院实习招聘–FE、Java</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498445\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【知乎】Web后端开发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498447\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【知乎】系统开发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498464\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【猿题库】  研发日薪500元，产品日薪300元 – 数据分</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498466\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【App Annie】招募Web Backend Software Engineer</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498478\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【房多多】房多多实习生招聘</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498481\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【美团】搜索查询分析组招聘实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498498\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【百度】招募测试开发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498502\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【百度】百度国际化团队招聘测试实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498518\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【人人网】投资研究实习生（研究开发方向）</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498528\" target=\"_blank\" rel=\"external\"><font color=\"red\">【实习】【百度】招聘大数据研发工程师</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498543\" target=\"_blank\" rel=\"external\"><font color=\"blue\">【实习】【搜狗】搜狗桌面研究部招机器学习实习生</font></a></p>\n","excerpt":"<p>这是爬取自北邮人论坛的招聘信息，点击即可跳转到北邮人论坛。</p>\n<p>time: 2016-05-18 20:12:37.389000</p>","more":"<p><a href=\"http://bbs.byr.cn/article/ParttimeJob/492127\"><font color=red>【实习】【中科院信息工程研究所】招聘客座实习学生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/494262\"><font color=blue>【实习】【百度】商业基础平台部策略实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/494675\"><font color=red>【实习】【Comper】炫酷外企诚招大数据相关实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/494971\"><font color=blue>【实习】【平方和投资】招聘交易系统开发工程师</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/495533\"><font color=red>【实习】【增长引擎】招聘有全栈潜力的Geek加入创业项目</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/495587\"><font color=blue>【实习】【FreeWheel】2016暑期实习-北京（Dev Ops可以内推，其</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/495727\"><font color=red>【实习】【百度】机器学习/自然语言处理/数据挖掘和产品经理</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/495729\"><font color=blue>【实习】【美团】云计算部招聘web开发(python)实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/496031\"><font color=red>【实习】【尚德机构】招募机器学习算法实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/496534\"><font color=blue>【实习】【唯科时代】测试实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/497938\"><font color=red>【实习】【滴滴】滴滴出行2017实习生校招开始！</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/497952\"><font color=blue>【实习】【FreeWheel】Dev_Operation_Engineer &amp; System_Operat</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498014\"><font color=red>【实习】【下厨房】招 python/web/android/iOS/DBA/运维/测试/</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498176\"><font color=blue>【实习】【乐视】OpenStack开发工程师实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498177\"><font color=red>【实习】【乐视】SDN高级开发工程师(实习)</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498219\"><font color=blue>【实习】【京东】广告算法实习生招聘-仅限研二学生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498251\"><font color=red>【实习】【依依短租】全国领先短租民宿诚聘（后台实习生）</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498269\"><font color=blue>【实习】【铁科院】深度学习实习生-图像方向</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498308\"><font color=red>【实习】【EMC】北京研发中心招聘研发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498334\"><font color=blue>【实习】【中国科学院信息工程研究所】 招聘 大数据研发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498345\"><font color=red>【实习】【联通时科】招聘java web后台开发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498346\"><font color=blue>【实习】【格灵深瞳】Web前端/全栈实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498385\"><font color=red>【实习】【金山软件-金山云】招聘运维研发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498437\"><font color=blue>【实习】【亚马逊AWS】助理架构师实习生-偏开发</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498443\"><font color=red>【实习】【滴滴出行】大数据&amp;机器学习研究院实习招聘–FE、Java</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498445\"><font color=blue>【实习】【知乎】Web后端开发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498447\"><font color=red>【实习】【知乎】系统开发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498464\"><font color=blue>【实习】【猿题库】  研发日薪500元，产品日薪300元 – 数据分</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498466\"><font color=red>【实习】【App Annie】招募Web Backend Software Engineer</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498478\"><font color=blue>【实习】【房多多】房多多实习生招聘</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498481\"><font color=red>【实习】【美团】搜索查询分析组招聘实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498498\"><font color=blue>【实习】【百度】招募测试开发实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498502\"><font color=red>【实习】【百度】百度国际化团队招聘测试实习生</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498518\"><font color=blue>【实习】【人人网】投资研究实习生（研究开发方向）</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498528\"><font color=red>【实习】【百度】招聘大数据研发工程师</font></a><br><a href=\"http://bbs.byr.cn/article/ParttimeJob/498543\"><font color=blue>【实习】【搜狗】搜狗桌面研究部招机器学习实习生</font></a></p>"},{"title":"Python爬虫学习之一","date":"2016-04-06T14:49:45.000Z","_content":">这几天发现一个比较适合Python爬虫初学者的网站，我是跟着里边的kingname老师学习，这就当作是一个学习笔记里，有人想去听老师讲课，可以点[这里](http://my.jikexueyuan.com/6128566806/record/)。\n\n<!--more-->\n## 单线程爬虫\n如何伪装成浏览器呢？\n```Python      \n    import reques\n    header = {'User-Agent':\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36\"}\n    html = request.get(url, header = header)\n    html.encoding = 'utf-8'\n```\n在get或者post的时候加入**User-Agent**可以伪装成浏览器。至于怎么获得**User-Agent**?\n<font face=\"Aril\" color=\"blue\">chrome->F12->Network->随便点一个接收的信息->Headers->Request Headers</font>。\n\n***\n## 解析HTML，获取有用信息\n\n1. 正则表达式\n比较笨的办法。适用于网页简单，正则特别好写的情况，不用安装别的库了。\n2. 利用DOM解析HTML\nBeautifulSoup，request啊什么的都提供了一些功能强大的DOM解析方法，便于使用。\n3. 利用XPath解析HTML\n这其实也是DOM解析的一种吧？但是在爬一些比较复杂的网页时候，特别好用。\n\n#### XPATH\n怎么使用XPath？\n```Python\n        from lxml import etree\n        selector = etree.HTML(html)\n        selector.xpath('XPATH')\n```\nXPath怎么写？\n```Python\n      //     ：根节点\n      /      ：往下层寻找\n      /text()：提取文本内容\n      /@attr ：提取属性内容\n\n      #提取div的id为first_div的文字内容  \n      selector.xpath('//div[@id=\"first_div\"]/text()')\n      \n      #提取a标签的href属性\n      selector.xpath('//a/@href')\n```\n\n***\n## 多线程爬虫\n虽然Python有[GIL](https://zh.wikipedia.org/wiki/GIL)，但是多线程还是可以在一定程度上提升爬取的速度。\n```Python\n      from multiprocessing.dummy import Pool as ThreadPool\n      pools = ThreadPool(__max_core_num__)\n      results = pools.map(Spider_function, target_urls)\n      pools.join()\n      pools.close()\n```\n**map(func, seq)**函数是Python内置函数，用来接收seq内元素依此执行func后返回的值。","source":"_posts/Python爬虫学习之一.md","raw":"---\ntitle: Python爬虫学习之一\ndate: 2016-04-06 22:49:45\ntags: Python\ncategories: Python\n---\n>这几天发现一个比较适合Python爬虫初学者的网站，我是跟着里边的kingname老师学习，这就当作是一个学习笔记里，有人想去听老师讲课，可以点[这里](http://my.jikexueyuan.com/6128566806/record/)。\n\n<!--more-->\n## 单线程爬虫\n如何伪装成浏览器呢？\n```Python      \n    import reques\n    header = {'User-Agent':\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36\"}\n    html = request.get(url, header = header)\n    html.encoding = 'utf-8'\n```\n在get或者post的时候加入**User-Agent**可以伪装成浏览器。至于怎么获得**User-Agent**?\n<font face=\"Aril\" color=\"blue\">chrome->F12->Network->随便点一个接收的信息->Headers->Request Headers</font>。\n\n***\n## 解析HTML，获取有用信息\n\n1. 正则表达式\n比较笨的办法。适用于网页简单，正则特别好写的情况，不用安装别的库了。\n2. 利用DOM解析HTML\nBeautifulSoup，request啊什么的都提供了一些功能强大的DOM解析方法，便于使用。\n3. 利用XPath解析HTML\n这其实也是DOM解析的一种吧？但是在爬一些比较复杂的网页时候，特别好用。\n\n#### XPATH\n怎么使用XPath？\n```Python\n        from lxml import etree\n        selector = etree.HTML(html)\n        selector.xpath('XPATH')\n```\nXPath怎么写？\n```Python\n      //     ：根节点\n      /      ：往下层寻找\n      /text()：提取文本内容\n      /@attr ：提取属性内容\n\n      #提取div的id为first_div的文字内容  \n      selector.xpath('//div[@id=\"first_div\"]/text()')\n      \n      #提取a标签的href属性\n      selector.xpath('//a/@href')\n```\n\n***\n## 多线程爬虫\n虽然Python有[GIL](https://zh.wikipedia.org/wiki/GIL)，但是多线程还是可以在一定程度上提升爬取的速度。\n```Python\n      from multiprocessing.dummy import Pool as ThreadPool\n      pools = ThreadPool(__max_core_num__)\n      results = pools.map(Spider_function, target_urls)\n      pools.join()\n      pools.close()\n```\n**map(func, seq)**函数是Python内置函数，用来接收seq内元素依此执行func后返回的值。","slug":"Python爬虫学习之一","published":1,"updated":"2016-12-20T06:27:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwx5ihh00003i7q31xky9eum","content":"<blockquote>\n<p>这几天发现一个比较适合Python爬虫初学者的网站，我是跟着里边的kingname老师学习，这就当作是一个学习笔记里，有人想去听老师讲课，可以点<a href=\"http://my.jikexueyuan.com/6128566806/record/\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"单线程爬虫\"><a href=\"#单线程爬虫\" class=\"headerlink\" title=\"单线程爬虫\"></a>单线程爬虫</h2><p>如何伪装成浏览器呢？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> reques</div><div class=\"line\">header = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36\"</span>&#125;</div><div class=\"line\">html = request.get(url, header = header)</div><div class=\"line\">html.encoding = <span class=\"string\">'utf-8'</span></div></pre></td></tr></table></figure></p>\n<p>在get或者post的时候加入<strong>User-Agent</strong>可以伪装成浏览器。至于怎么获得<strong>User-Agent</strong>?</p>\n<p><font face=\"Aril\" color=\"blue\">chrome-&gt;F12-&gt;Network-&gt;随便点一个接收的信息-&gt;Headers-&gt;Request Headers</font>。</p>\n<hr>\n<h2 id=\"解析HTML，获取有用信息\"><a href=\"#解析HTML，获取有用信息\" class=\"headerlink\" title=\"解析HTML，获取有用信息\"></a>解析HTML，获取有用信息</h2><ol>\n<li>正则表达式<br>比较笨的办法。适用于网页简单，正则特别好写的情况，不用安装别的库了。</li>\n<li>利用DOM解析HTML<br>BeautifulSoup，request啊什么的都提供了一些功能强大的DOM解析方法，便于使用。</li>\n<li>利用XPath解析HTML<br>这其实也是DOM解析的一种吧？但是在爬一些比较复杂的网页时候，特别好用。</li>\n</ol>\n<h4 id=\"XPATH\"><a href=\"#XPATH\" class=\"headerlink\" title=\"XPATH\"></a>XPATH</h4><p>怎么使用XPath？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</div><div class=\"line\">selector = etree.HTML(html)</div><div class=\"line\">selector.xpath(<span class=\"string\">'XPATH'</span>)</div></pre></td></tr></table></figure></p>\n<p>XPath怎么写？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//     ：根节点</div><div class=\"line\">/      ：往下层寻找</div><div class=\"line\">/text()：提取文本内容</div><div class=\"line\">/@attr ：提取属性内容</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#提取div的id为first_div的文字内容  </span></div><div class=\"line\">selector.xpath(<span class=\"string\">'//div[@id=\"first_div\"]/text()'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#提取a标签的href属性</span></div><div class=\"line\">selector.xpath(<span class=\"string\">'//a/@href'</span>)</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"多线程爬虫\"><a href=\"#多线程爬虫\" class=\"headerlink\" title=\"多线程爬虫\"></a>多线程爬虫</h2><p>虽然Python有<a href=\"https://zh.wikipedia.org/wiki/GIL\" target=\"_blank\" rel=\"external\">GIL</a>，但是多线程还是可以在一定程度上提升爬取的速度。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing.dummy <span class=\"keyword\">import</span> Pool <span class=\"keyword\">as</span> ThreadPool</div><div class=\"line\">pools = ThreadPool(__max_core_num__)</div><div class=\"line\">results = pools.map(Spider_function, target_urls)</div><div class=\"line\">pools.join()</div><div class=\"line\">pools.close()</div></pre></td></tr></table></figure></p>\n<p><strong>map(func, seq)</strong>函数是Python内置函数，用来接收seq内元素依此执行func后返回的值。</p>\n","excerpt":"<blockquote>\n<p>这几天发现一个比较适合Python爬虫初学者的网站，我是跟着里边的kingname老师学习，这就当作是一个学习笔记里，有人想去听老师讲课，可以点<a href=\"http://my.jikexueyuan.com/6128566806/record/\">这里</a>。</p>\n</blockquote>","more":"<h2 id=\"单线程爬虫\"><a href=\"#单线程爬虫\" class=\"headerlink\" title=\"单线程爬虫\"></a>单线程爬虫</h2><p>如何伪装成浏览器呢？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> reques</div><div class=\"line\">header = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36\"</span>&#125;</div><div class=\"line\">html = request.get(url, header = header)</div><div class=\"line\">html.encoding = <span class=\"string\">'utf-8'</span></div></pre></td></tr></table></figure></p>\n<p>在get或者post的时候加入<strong>User-Agent</strong>可以伪装成浏览器。至于怎么获得<strong>User-Agent</strong>?</p>\n<p><font face=\"Aril\" color=\"blue\">chrome-&gt;F12-&gt;Network-&gt;随便点一个接收的信息-&gt;Headers-&gt;Request Headers</font>。</p>\n<hr>\n<h2 id=\"解析HTML，获取有用信息\"><a href=\"#解析HTML，获取有用信息\" class=\"headerlink\" title=\"解析HTML，获取有用信息\"></a>解析HTML，获取有用信息</h2><ol>\n<li>正则表达式<br>比较笨的办法。适用于网页简单，正则特别好写的情况，不用安装别的库了。</li>\n<li>利用DOM解析HTML<br>BeautifulSoup，request啊什么的都提供了一些功能强大的DOM解析方法，便于使用。</li>\n<li>利用XPath解析HTML<br>这其实也是DOM解析的一种吧？但是在爬一些比较复杂的网页时候，特别好用。</li>\n</ol>\n<h4 id=\"XPATH\"><a href=\"#XPATH\" class=\"headerlink\" title=\"XPATH\"></a>XPATH</h4><p>怎么使用XPath？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</div><div class=\"line\">selector = etree.HTML(html)</div><div class=\"line\">selector.xpath(<span class=\"string\">'XPATH'</span>)</div></pre></td></tr></table></figure></p>\n<p>XPath怎么写？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//     ：根节点</div><div class=\"line\">/      ：往下层寻找</div><div class=\"line\">/text()：提取文本内容</div><div class=\"line\">/@attr ：提取属性内容</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#提取div的id为first_div的文字内容  </span></div><div class=\"line\">selector.xpath(<span class=\"string\">'//div[@id=\"first_div\"]/text()'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#提取a标签的href属性</span></div><div class=\"line\">selector.xpath(<span class=\"string\">'//a/@href'</span>)</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"多线程爬虫\"><a href=\"#多线程爬虫\" class=\"headerlink\" title=\"多线程爬虫\"></a>多线程爬虫</h2><p>虽然Python有<a href=\"https://zh.wikipedia.org/wiki/GIL\">GIL</a>，但是多线程还是可以在一定程度上提升爬取的速度。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing.dummy <span class=\"keyword\">import</span> Pool <span class=\"keyword\">as</span> ThreadPool</div><div class=\"line\">pools = ThreadPool(__max_core_num__)</div><div class=\"line\">results = pools.map(Spider_function, target_urls)</div><div class=\"line\">pools.join()</div><div class=\"line\">pools.close()</div></pre></td></tr></table></figure></p>\n<p><strong>map(func, seq)</strong>函数是Python内置函数，用来接收seq内元素依此执行func后返回的值。</p>"},{"title":"Python爬虫学习之二","date":"2016-04-09T14:27:19.000Z","_content":"### Scrapy学习\n>An open source and collaborative framework for extracting the data you need from websites. In a fast, simple, yet extensible way.\n\nScrapy是一个开源的、能够快速、简单获取你所需网页数据的的框架，并且它具有良好的可扩展性。\n\n首先，它是一个框架，大部分时候是作为爬虫架构来使用。它与BeautifulSoup，request不同，严格意义上来说后两者是一个用来解析HTML\\XML的Python库，爬取工作仍然需要urllib或者其他的库来配合完成；而Scrapy提供了一整套网页爬取的架构，包括：爬取、下载，储存等功能。\n<!--more-->\n下图很形象的说明了Scrapy的工作原理：\n![Scrapy](http://upload-images.jianshu.io/upload_images/1858466-e15a81faf81eb7f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**ScrapyEngine**：位于`Scrapy/core/engine`，作为整个框架的引擎，驱动Scheduler，Donwload，Spiders。\n``` python\n          class ExecutionEngine(object):\n              def start(self):\n                  do something\n              def schedule(self, request, spider):\n                  do something related to scheduler\n              def download(self, request, spider):\n                  do something related to downloader\n              def spider(self, request, spider):\n                  do something related to schedule\n              other function\n```\n**Scheduler**：从`start_urls`依此获取url，交给Downloader下载，并且从Spiders中过去新的url~~(如果有的话)~~。\n``` python\n          class Scheduler(object):\n              def open(self, spider)\n                   open spider\n              def enqueue_request(self,request):\n                   do something\n              def next_request(self)\n                   get next_request\n              other function\n```                \n**Downloader**：获取Scheduler里的url，从网络中获取url的内容，并将获取内容交给Spiders。\n``` python       \n        class Downloader(object):\n            def fetch(self, request, spider):\n                fetching\n            def download(self, slot, request, spider):\n                download\n```\n**Spiders**：解析获取页面的内容，通过XPath，获得需要的内容，将这些内容存放到Item定义的Field中~~并交给Pipeline进一步处理~~。\n``` python        \n        class yourSpider(Spider):\n            name = \"your spider name, unique\"\n            domain = \"allowed domain\"\n            start_urls = [\"https://www.target.com/\",\n                           other urls,\n                         ]\n            rules = [Rule(your rules)]\n            def parse(self, response):\n                do something\n```\n**Item**：Scrapy自定义的字典，规定你需要从网页中获取的内容。例如，你想要获得豆瓣排名前二十名的电影的名字、导演、评分，那么可以在Item中定义：\n``` python\n         from scrapy import Item, Field\n         class DoubanItem(Item):\n              title = Field()    \n              movieInfo = Field()    \n              star = Field()    \n              quote = Field()\n```\n**Pipeline**：对Item中的数据做进一步处理，存入数据库or丢弃掉。\n``` python\n        class DoubanPipeline(object):\n            def process_item(self, item, spider):\n                do something\n```\n以上是一个完整的Scrapy爬虫框架，Scrapy已经为我们写好了前三部分(Engine，Scheduler，Downloader)，我们只需要自己写出Spiders，Item，Pipeline就好。\n\n>这里是scrapy的[中文文档](http://scrapy-chs.readthedocs.org/zh_CN/latest/intro/tutorial.html)，如果我说的不清楚，大家可以去看官方文档。","source":"_posts/Python爬虫学习之二.md","raw":"---\ntitle: Python爬虫学习之二\ndate: 2016-04-09 22:27:19\ntags: Python\ncategories: Python\n---\n### Scrapy学习\n>An open source and collaborative framework for extracting the data you need from websites. In a fast, simple, yet extensible way.\n\nScrapy是一个开源的、能够快速、简单获取你所需网页数据的的框架，并且它具有良好的可扩展性。\n\n首先，它是一个框架，大部分时候是作为爬虫架构来使用。它与BeautifulSoup，request不同，严格意义上来说后两者是一个用来解析HTML\\XML的Python库，爬取工作仍然需要urllib或者其他的库来配合完成；而Scrapy提供了一整套网页爬取的架构，包括：爬取、下载，储存等功能。\n<!--more-->\n下图很形象的说明了Scrapy的工作原理：\n![Scrapy](http://upload-images.jianshu.io/upload_images/1858466-e15a81faf81eb7f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**ScrapyEngine**：位于`Scrapy/core/engine`，作为整个框架的引擎，驱动Scheduler，Donwload，Spiders。\n``` python\n          class ExecutionEngine(object):\n              def start(self):\n                  do something\n              def schedule(self, request, spider):\n                  do something related to scheduler\n              def download(self, request, spider):\n                  do something related to downloader\n              def spider(self, request, spider):\n                  do something related to schedule\n              other function\n```\n**Scheduler**：从`start_urls`依此获取url，交给Downloader下载，并且从Spiders中过去新的url~~(如果有的话)~~。\n``` python\n          class Scheduler(object):\n              def open(self, spider)\n                   open spider\n              def enqueue_request(self,request):\n                   do something\n              def next_request(self)\n                   get next_request\n              other function\n```                \n**Downloader**：获取Scheduler里的url，从网络中获取url的内容，并将获取内容交给Spiders。\n``` python       \n        class Downloader(object):\n            def fetch(self, request, spider):\n                fetching\n            def download(self, slot, request, spider):\n                download\n```\n**Spiders**：解析获取页面的内容，通过XPath，获得需要的内容，将这些内容存放到Item定义的Field中~~并交给Pipeline进一步处理~~。\n``` python        \n        class yourSpider(Spider):\n            name = \"your spider name, unique\"\n            domain = \"allowed domain\"\n            start_urls = [\"https://www.target.com/\",\n                           other urls,\n                         ]\n            rules = [Rule(your rules)]\n            def parse(self, response):\n                do something\n```\n**Item**：Scrapy自定义的字典，规定你需要从网页中获取的内容。例如，你想要获得豆瓣排名前二十名的电影的名字、导演、评分，那么可以在Item中定义：\n``` python\n         from scrapy import Item, Field\n         class DoubanItem(Item):\n              title = Field()    \n              movieInfo = Field()    \n              star = Field()    \n              quote = Field()\n```\n**Pipeline**：对Item中的数据做进一步处理，存入数据库or丢弃掉。\n``` python\n        class DoubanPipeline(object):\n            def process_item(self, item, spider):\n                do something\n```\n以上是一个完整的Scrapy爬虫框架，Scrapy已经为我们写好了前三部分(Engine，Scheduler，Downloader)，我们只需要自己写出Spiders，Item，Pipeline就好。\n\n>这里是scrapy的[中文文档](http://scrapy-chs.readthedocs.org/zh_CN/latest/intro/tutorial.html)，如果我说的不清楚，大家可以去看官方文档。","slug":"Python爬虫学习之二","published":1,"updated":"2016-12-20T06:27:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwx5ihh60007i7q3vykdbsh1","content":"<h3 id=\"Scrapy学习\"><a href=\"#Scrapy学习\" class=\"headerlink\" title=\"Scrapy学习\"></a>Scrapy学习</h3><blockquote>\n<p>An open source and collaborative framework for extracting the data you need from websites. In a fast, simple, yet extensible way.</p>\n</blockquote>\n<p>Scrapy是一个开源的、能够快速、简单获取你所需网页数据的的框架，并且它具有良好的可扩展性。</p>\n<p>首先，它是一个框架，大部分时候是作为爬虫架构来使用。它与BeautifulSoup，request不同，严格意义上来说后两者是一个用来解析HTML\\XML的Python库，爬取工作仍然需要urllib或者其他的库来配合完成；而Scrapy提供了一整套网页爬取的架构，包括：爬取、下载，储存等功能。<br><a id=\"more\"></a><br>下图很形象的说明了Scrapy的工作原理：<br><img src=\"http://upload-images.jianshu.io/upload_images/1858466-e15a81faf81eb7f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Scrapy\"><br><strong>ScrapyEngine</strong>：位于<code>Scrapy/core/engine</code>，作为整个框架的引擎，驱动Scheduler，Donwload，Spiders。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExecutionEngine</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        do something</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">schedule</span><span class=\"params\">(self, request, spider)</span>:</span></div><div class=\"line\">        do something related to scheduler</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download</span><span class=\"params\">(self, request, spider)</span>:</span></div><div class=\"line\">        do something related to downloader</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">spider</span><span class=\"params\">(self, request, spider)</span>:</span></div><div class=\"line\">        do something related to schedule</div><div class=\"line\">    other function</div></pre></td></tr></table></figure></p>\n<p><strong>Scheduler</strong>：从<code>start_urls</code>依此获取url，交给Downloader下载，并且从Spiders中过去新的url<del>(如果有的话)</del>。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">          class Scheduler(object):</div><div class=\"line\">              def open(self, spider)</div><div class=\"line\">                   open spider</div><div class=\"line\">              def enqueue_request(self,request):</div><div class=\"line\">                   do something</div><div class=\"line\">              def next_request(self)</div><div class=\"line\">                   get next_request</div><div class=\"line\">              other function</div><div class=\"line\">```                </div><div class=\"line\">**Downloader**：获取Scheduler里的url，从网络中获取url的内容，并将获取内容交给Spiders。</div><div class=\"line\">``` python       </div><div class=\"line\">        class Downloader(object):</div><div class=\"line\">            def fetch(self, request, spider):</div><div class=\"line\">                fetching</div><div class=\"line\">            def download(self, slot, request, spider):</div><div class=\"line\">                download</div></pre></td></tr></table></figure></p>\n<p><strong>Spiders</strong>：解析获取页面的内容，通过XPath，获得需要的内容，将这些内容存放到Item定义的Field中<del>并交给Pipeline进一步处理</del>。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">yourSpider</span><span class=\"params\">(Spider)</span>:</span></div><div class=\"line\">    name = <span class=\"string\">\"your spider name, unique\"</span></div><div class=\"line\">    domain = <span class=\"string\">\"allowed domain\"</span></div><div class=\"line\">    start_urls = [<span class=\"string\">\"https://www.target.com/\"</span>,</div><div class=\"line\">                   other urls,</div><div class=\"line\">                 ]</div><div class=\"line\">    rules = [Rule(your rules)]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">        do something</div></pre></td></tr></table></figure></p>\n<p><strong>Item</strong>：Scrapy自定义的字典，规定你需要从网页中获取的内容。例如，你想要获得豆瓣排名前二十名的电影的名字、导演、评分，那么可以在Item中定义：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> Item, Field</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubanItem</span><span class=\"params\">(Item)</span>:</span></div><div class=\"line\">     title = Field()    </div><div class=\"line\">     movieInfo = Field()    </div><div class=\"line\">     star = Field()    </div><div class=\"line\">     quote = Field()</div></pre></td></tr></table></figure></p>\n<p><strong>Pipeline</strong>：对Item中的数据做进一步处理，存入数据库or丢弃掉。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubanPipeline</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span><span class=\"params\">(self, item, spider)</span>:</span></div><div class=\"line\">        do something</div></pre></td></tr></table></figure></p>\n<p>以上是一个完整的Scrapy爬虫框架，Scrapy已经为我们写好了前三部分(Engine，Scheduler，Downloader)，我们只需要自己写出Spiders，Item，Pipeline就好。</p>\n<blockquote>\n<p>这里是scrapy的<a href=\"http://scrapy-chs.readthedocs.org/zh_CN/latest/intro/tutorial.html\" target=\"_blank\" rel=\"external\">中文文档</a>，如果我说的不清楚，大家可以去看官方文档。</p>\n</blockquote>\n","excerpt":"<h3 id=\"Scrapy学习\"><a href=\"#Scrapy学习\" class=\"headerlink\" title=\"Scrapy学习\"></a>Scrapy学习</h3><blockquote>\n<p>An open source and collaborative framework for extracting the data you need from websites. In a fast, simple, yet extensible way.</p>\n</blockquote>\n<p>Scrapy是一个开源的、能够快速、简单获取你所需网页数据的的框架，并且它具有良好的可扩展性。</p>\n<p>首先，它是一个框架，大部分时候是作为爬虫架构来使用。它与BeautifulSoup，request不同，严格意义上来说后两者是一个用来解析HTML\\XML的Python库，爬取工作仍然需要urllib或者其他的库来配合完成；而Scrapy提供了一整套网页爬取的架构，包括：爬取、下载，储存等功能。<br>","more":"<br>下图很形象的说明了Scrapy的工作原理：<br><img src=\"http://upload-images.jianshu.io/upload_images/1858466-e15a81faf81eb7f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Scrapy\"><br><strong>ScrapyEngine</strong>：位于<code>Scrapy/core/engine</code>，作为整个框架的引擎，驱动Scheduler，Donwload，Spiders。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExecutionEngine</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        do something</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">schedule</span><span class=\"params\">(self, request, spider)</span>:</span></div><div class=\"line\">        do something related to scheduler</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download</span><span class=\"params\">(self, request, spider)</span>:</span></div><div class=\"line\">        do something related to downloader</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">spider</span><span class=\"params\">(self, request, spider)</span>:</span></div><div class=\"line\">        do something related to schedule</div><div class=\"line\">    other function</div></pre></td></tr></table></figure></p>\n<p><strong>Scheduler</strong>：从<code>start_urls</code>依此获取url，交给Downloader下载，并且从Spiders中过去新的url<del>(如果有的话)</del>。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">          class Scheduler(object):</div><div class=\"line\">              def open(self, spider)</div><div class=\"line\">                   open spider</div><div class=\"line\">              def enqueue_request(self,request):</div><div class=\"line\">                   do something</div><div class=\"line\">              def next_request(self)</div><div class=\"line\">                   get next_request</div><div class=\"line\">              other function</div><div class=\"line\">```                </div><div class=\"line\">**Downloader**：获取Scheduler里的url，从网络中获取url的内容，并将获取内容交给Spiders。</div><div class=\"line\">``` python       </div><div class=\"line\">        class Downloader(object):</div><div class=\"line\">            def fetch(self, request, spider):</div><div class=\"line\">                fetching</div><div class=\"line\">            def download(self, slot, request, spider):</div><div class=\"line\">                download</div></pre></td></tr></table></figure></p>\n<p><strong>Spiders</strong>：解析获取页面的内容，通过XPath，获得需要的内容，将这些内容存放到Item定义的Field中<del>并交给Pipeline进一步处理</del>。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">yourSpider</span><span class=\"params\">(Spider)</span>:</span></div><div class=\"line\">    name = <span class=\"string\">\"your spider name, unique\"</span></div><div class=\"line\">    domain = <span class=\"string\">\"allowed domain\"</span></div><div class=\"line\">    start_urls = [<span class=\"string\">\"https://www.target.com/\"</span>,</div><div class=\"line\">                   other urls,</div><div class=\"line\">                 ]</div><div class=\"line\">    rules = [Rule(your rules)]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">        do something</div></pre></td></tr></table></figure></p>\n<p><strong>Item</strong>：Scrapy自定义的字典，规定你需要从网页中获取的内容。例如，你想要获得豆瓣排名前二十名的电影的名字、导演、评分，那么可以在Item中定义：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> Item, Field</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubanItem</span><span class=\"params\">(Item)</span>:</span></div><div class=\"line\">     title = Field()    </div><div class=\"line\">     movieInfo = Field()    </div><div class=\"line\">     star = Field()    </div><div class=\"line\">     quote = Field()</div></pre></td></tr></table></figure></p>\n<p><strong>Pipeline</strong>：对Item中的数据做进一步处理，存入数据库or丢弃掉。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubanPipeline</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span><span class=\"params\">(self, item, spider)</span>:</span></div><div class=\"line\">        do something</div></pre></td></tr></table></figure></p>\n<p>以上是一个完整的Scrapy爬虫框架，Scrapy已经为我们写好了前三部分(Engine，Scheduler，Downloader)，我们只需要自己写出Spiders，Item，Pipeline就好。</p>\n<blockquote>\n<p>这里是scrapy的<a href=\"http://scrapy-chs.readthedocs.org/zh_CN/latest/intro/tutorial.html\">中文文档</a>，如果我说的不清楚，大家可以去看官方文档。</p>\n</blockquote>"},{"title":"新的征程","date":"2016-04-05T02:07:07.000Z","_content":"> 既然选择了远方，便只顾风雨兼程。","source":"_posts/新的征程.md","raw":"---\ntitle: 新的征程\ndate: 2016-04-05 10:07:07\ntags: \ncategories: essay\n---\n> 既然选择了远方，便只顾风雨兼程。","slug":"新的征程","published":1,"updated":"2016-12-20T06:27:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwx5ihh70008i7q3647fr1bw","content":"<blockquote>\n<p>既然选择了远方，便只顾风雨兼程。</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>既然选择了远方，便只顾风雨兼程。</p>\n</blockquote>\n"},{"title":"将Django搭建在Apache上","date":"2016-04-06T02:47:57.000Z","_content":"前段时间，由于实验室项目的需要，要搭建一个web服务器，可怜我只会写python，所以就去研究了一下Django。学习Django是一个愉快的过程，本来就该如此嘛，Python提倡INTERESTING TO CODE，所以很快，我就完成了Django的本地部署，然而在把Django搭到服务器上的是，却是让我捣鼓了一个星期，真真是把我坑苦了。\n<!--more-->\n***\n### 1.我的环境\n在把Django搭建到Apache上时候，首先你需要明确你使用的**Django**和**Apache**的版本，嗯，还有**Python**的版本（<font color=\"gray\">这很重要</font>）！\n\n很多人依照网上的教程，BALABALA的输入`pip install Django`、`sudo apt-get install Apache2`，改了Apache配置文件，调了Django的setting，最后弄完了发现一直不成功，对着**命令**和**配置文件**看了半天也没发现有什么错误，怎么就一直不行呢？**很可能你一开始就错了呀！**人家是**Python2**，你的是**Python3**；人家的是**Apache2.2**，你的是**Apache2.4**。底子都不一样，搭起来能用才怪，所以第一步，一定要清楚自己的环境，具体的说就是你使用的版本号！\n\n如果你是看我的文章，从头开始安装的话，那么我建议你使用`pip install Django==1.x`来代替`pip install Django`，甚至在你安装pip的时候，我都建议你明确的指明是用python2或者python3来安装（现在大多数的云服务器都包含Py2和Py3两个版本）。\n\n接下来，我告诉你我搭建的环境，我的配置都是在此环境基础上配置的，如果其他环境，我了解我也会提一句。\n* OS: Ubuntu 14.04\n* Apache: Apache2.4\n   `sudo apt-get install apache2  #安装Apache`\n   `apachectl -v  #检查Apache版本，ubunt 14.04没经过其他设置，默认应该是Apache2.4`\n* Python: Python2 \n* Django: Django1.8\n`pip install Django==1.8`\n***\n### 2.建立Python与Apache的链接\n简单的来说就是**Apache**如何识别你的**Django**代码。无论如何，你的**Django**都是用Python写的，所以不恰当的说法就是给你的**Apache**安装**Python**解释器。\n\n``` bash\nsudo apt-get install libapache2-mod-wsgi      #Python2\nsudo apt-get install libapache2-mod-wsgi-py3  #Python3\n```\n\n第一条是对于**Python2**用户的，第二条是对于**Python3**用户的。\n>如果你是**Python2**用户又恰巧不小心输入了第二条命令，那么不要怕，再输入第一条命令就好啦，同样的**Python3**也可以通过再输入第二条命令来重置**Apache**的**Python**解释器（这种说法不一定对，但是我相信你懂我意思！）！\n\n***\n### 3.为Django安家，让Apache找到它\n大致可以分为四步：\n1. 将Django工程放在`/var/www/`下；\n2. `sudo vi /etc/apache2/sites-available/yoursite.conf` 修改配置文件；\n3. `sudo a2ensite yoursite.conf` 配置文件生效；\n4. `sudo service apache2 restart` 重启Apache。\n\n**Apache**默认的网站目录是`/var/www/`。通常来说，如果你只是自己搭着玩玩也没有必要更改这个目录，直接就将你的**Django工程文件夹**放在这就行了。\n\n如果你想要放在别处的话，可以通过修改`/etc/apache2/apache2.conf`中的`<Directory /var/www>`，将其改为`<Directory /where/you/want>`，不过配套的你需要修改其权限。具体的修改方法[这里](http://www.ziqiangxuetang.com/django/django-deploy.html)。\n\n以上只是完成了**为Django安家**这一步，但是我们还需要让**Apache找到Django**（方便查水表）。\n\n新建一个网站配置文件：\n``` bash    \nsudo vi /etc/apache2/sites-available/yoursite.conf。\n```\n这里边包含了你所有的网站配置信息，包括Apache如何查找静态文件(`js/css/images`)，网站上传的文件存在哪里，最重要的，包含了**Apache**识别**Django**的**wsgi**文件。\n``` bash\n    #<VirtualHost *:80>\n    ServerName www.yourdomain.com \n    #ServerAlias otherdomain.com\n    #ServerAdmin youremail@gmail.com \n\n    # 存放用户上传图片等文件的位置，注意去掉#号\n    #Alias /media/ /var/www/ProjectName/media/ \n                \n    # 静态文件(js/css/images)的存放位置\n    Alias /static/ /var/www/ProjectName/static/                \n  \n    # 允许通过网络获取static的内容\n    <Directory /var/www/ProjectName/static/>                  \n        Require all granted\n    </Directory>\n\n    # 最重要的！通过wsgi.py让Apache识别这是一个Django工程，别漏掉前边的 /\n    WSGIScriptAlias / /var/www/ProjectName/ProjectName/wsgi.py     \n    # wsgi.py文件的父级目录，第一个ProjectName为Django工程目录，第二个ProjectName为Django自建的与工程同名的目录\n    <Directory /var/www/ProjectName/ProjectName/>                  \n    <Files wsgi.py>\n        Require all granted\n    </Files>\n    </Directory>\n\n    </VirtualHost>\n```\n通过修改上面的文件，你就可以让**Apache**找到你的**Django**工程，上边可以修改的内容包括：\n\n* 80：修改80为其他数字，可以更改你的端口号，国内的电信貌似把80端口给封了（如果你的域名没有备案的话）。**注意，还要修改`/etc/apache2/port.conf`文件中的`Listen port`**。\n* ServerName：后边改成你自己的域名，如果没有的话就用IP代替。**注意，如果改成了域名，还需要修改Django工程下的`seeting.py`文件，将其`ALLOWED_HOSTS=[]`改为`ALLOWED_HOSTS=['www.yourdomain.com']`，多个域名可以通过逗号隔开**。\n* ServerAlias：你的其他域名或IP。\n\n最后要让这个配置文件生效，你需要运行\n``` bash\nsudo a2ensite yoursite.conf\n```\n有时候，你可能需要让它失效（因为你将yoursite.conf改名为其他名字？），可以运行\n``` bash         \nsudo a2dissite yoursite.conf\n```\n做完以上步骤，Apache会提醒你要执行`sudo service apache2 relaod`，这条命令主要是你手动**命令Apache根据你刚才配置的yoursite.conf去寻找Django工程**，当然我一般都是**restart**，如果你的**Apache**不为其他的网站提供服务，那么你也**restart**吧，因为**重启大法好**！\n>每次你修改**Django**工程文件之后，都要**restart**一下，它才会生效。\n\n***\n### 4.修改Django的wsgi.py文件 \n修改上面说的`/var/www/ProjectName/ProjectName/wsgi.py`为如下格式\n``` python\n        import os\n        from os.path import join,dirname,abspath\n        PROJECT_DIR = dirname(dirname(abspath(__file__)))\n\n        import sys\n        sys.path.insert(0,PROJECT_DIR)\n        os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"examsys.settings\")\n\n        from django.core.wsgi import get_wsgi_application\n        application = get_wsgi_application()\n```\n这个配置文件的作用也是让**Apache**找到**Djanog**，毕竟不能一厢情愿吗，**Apache**同意和**Django**“交往”了，但是万一人家**Django**不乐意呢？\n最后，还记得我说的嘛？\n>每次你修改**Django**工程文件之后，都要**restart**一下，它才会生效。\n\n***\n### 5.调试错误\n1. 如果你的网站没有加载静态文件(`js/css/images`)，请检查你的静态文件是不是在`ProjectName/static`下，而不是在`ProjectName/AppName/static`下（改这里边的文件是不用重启**Apache**的）。\n2. 不知道啥问题，就是不管用，请查看**Apache**的错误文档。\n`cat /var/log/apache2/error.log`\n3. **No module named xxxx**。首先检查一下你所依赖的库是否安装全了，没有的话就`pip install`。\n4. **No module named django或者其他含django的错误**。这说明你的环境搭错了。往上翻error.log，找到AH00489开头的错误，看看你到底用的是什么环境。一般都是你第二步**Apache**的**Python**解释器安装错误。\n\n以上皆参考涂伟忠老师的[自强学堂](http://www.ziqiangxuetang.com/django/django-deploy.html)，我自己搭建Django+Apache2时的心得，如果还不明白，可以去[自强学堂](http://www.ziqiangxuetang.com/django/django-deploy.html)看看。","source":"_posts/将Django搭建在Apache上.md","raw":"---\ntitle: 将Django搭建在Apache上\ndate: 2016-04-06 10:47:57\ntags: Python,Django\ncategories: Django\n\n---\n前段时间，由于实验室项目的需要，要搭建一个web服务器，可怜我只会写python，所以就去研究了一下Django。学习Django是一个愉快的过程，本来就该如此嘛，Python提倡INTERESTING TO CODE，所以很快，我就完成了Django的本地部署，然而在把Django搭到服务器上的是，却是让我捣鼓了一个星期，真真是把我坑苦了。\n<!--more-->\n***\n### 1.我的环境\n在把Django搭建到Apache上时候，首先你需要明确你使用的**Django**和**Apache**的版本，嗯，还有**Python**的版本（<font color=\"gray\">这很重要</font>）！\n\n很多人依照网上的教程，BALABALA的输入`pip install Django`、`sudo apt-get install Apache2`，改了Apache配置文件，调了Django的setting，最后弄完了发现一直不成功，对着**命令**和**配置文件**看了半天也没发现有什么错误，怎么就一直不行呢？**很可能你一开始就错了呀！**人家是**Python2**，你的是**Python3**；人家的是**Apache2.2**，你的是**Apache2.4**。底子都不一样，搭起来能用才怪，所以第一步，一定要清楚自己的环境，具体的说就是你使用的版本号！\n\n如果你是看我的文章，从头开始安装的话，那么我建议你使用`pip install Django==1.x`来代替`pip install Django`，甚至在你安装pip的时候，我都建议你明确的指明是用python2或者python3来安装（现在大多数的云服务器都包含Py2和Py3两个版本）。\n\n接下来，我告诉你我搭建的环境，我的配置都是在此环境基础上配置的，如果其他环境，我了解我也会提一句。\n* OS: Ubuntu 14.04\n* Apache: Apache2.4\n   `sudo apt-get install apache2  #安装Apache`\n   `apachectl -v  #检查Apache版本，ubunt 14.04没经过其他设置，默认应该是Apache2.4`\n* Python: Python2 \n* Django: Django1.8\n`pip install Django==1.8`\n***\n### 2.建立Python与Apache的链接\n简单的来说就是**Apache**如何识别你的**Django**代码。无论如何，你的**Django**都是用Python写的，所以不恰当的说法就是给你的**Apache**安装**Python**解释器。\n\n``` bash\nsudo apt-get install libapache2-mod-wsgi      #Python2\nsudo apt-get install libapache2-mod-wsgi-py3  #Python3\n```\n\n第一条是对于**Python2**用户的，第二条是对于**Python3**用户的。\n>如果你是**Python2**用户又恰巧不小心输入了第二条命令，那么不要怕，再输入第一条命令就好啦，同样的**Python3**也可以通过再输入第二条命令来重置**Apache**的**Python**解释器（这种说法不一定对，但是我相信你懂我意思！）！\n\n***\n### 3.为Django安家，让Apache找到它\n大致可以分为四步：\n1. 将Django工程放在`/var/www/`下；\n2. `sudo vi /etc/apache2/sites-available/yoursite.conf` 修改配置文件；\n3. `sudo a2ensite yoursite.conf` 配置文件生效；\n4. `sudo service apache2 restart` 重启Apache。\n\n**Apache**默认的网站目录是`/var/www/`。通常来说，如果你只是自己搭着玩玩也没有必要更改这个目录，直接就将你的**Django工程文件夹**放在这就行了。\n\n如果你想要放在别处的话，可以通过修改`/etc/apache2/apache2.conf`中的`<Directory /var/www>`，将其改为`<Directory /where/you/want>`，不过配套的你需要修改其权限。具体的修改方法[这里](http://www.ziqiangxuetang.com/django/django-deploy.html)。\n\n以上只是完成了**为Django安家**这一步，但是我们还需要让**Apache找到Django**（方便查水表）。\n\n新建一个网站配置文件：\n``` bash    \nsudo vi /etc/apache2/sites-available/yoursite.conf。\n```\n这里边包含了你所有的网站配置信息，包括Apache如何查找静态文件(`js/css/images`)，网站上传的文件存在哪里，最重要的，包含了**Apache**识别**Django**的**wsgi**文件。\n``` bash\n    #<VirtualHost *:80>\n    ServerName www.yourdomain.com \n    #ServerAlias otherdomain.com\n    #ServerAdmin youremail@gmail.com \n\n    # 存放用户上传图片等文件的位置，注意去掉#号\n    #Alias /media/ /var/www/ProjectName/media/ \n                \n    # 静态文件(js/css/images)的存放位置\n    Alias /static/ /var/www/ProjectName/static/                \n  \n    # 允许通过网络获取static的内容\n    <Directory /var/www/ProjectName/static/>                  \n        Require all granted\n    </Directory>\n\n    # 最重要的！通过wsgi.py让Apache识别这是一个Django工程，别漏掉前边的 /\n    WSGIScriptAlias / /var/www/ProjectName/ProjectName/wsgi.py     \n    # wsgi.py文件的父级目录，第一个ProjectName为Django工程目录，第二个ProjectName为Django自建的与工程同名的目录\n    <Directory /var/www/ProjectName/ProjectName/>                  \n    <Files wsgi.py>\n        Require all granted\n    </Files>\n    </Directory>\n\n    </VirtualHost>\n```\n通过修改上面的文件，你就可以让**Apache**找到你的**Django**工程，上边可以修改的内容包括：\n\n* 80：修改80为其他数字，可以更改你的端口号，国内的电信貌似把80端口给封了（如果你的域名没有备案的话）。**注意，还要修改`/etc/apache2/port.conf`文件中的`Listen port`**。\n* ServerName：后边改成你自己的域名，如果没有的话就用IP代替。**注意，如果改成了域名，还需要修改Django工程下的`seeting.py`文件，将其`ALLOWED_HOSTS=[]`改为`ALLOWED_HOSTS=['www.yourdomain.com']`，多个域名可以通过逗号隔开**。\n* ServerAlias：你的其他域名或IP。\n\n最后要让这个配置文件生效，你需要运行\n``` bash\nsudo a2ensite yoursite.conf\n```\n有时候，你可能需要让它失效（因为你将yoursite.conf改名为其他名字？），可以运行\n``` bash         \nsudo a2dissite yoursite.conf\n```\n做完以上步骤，Apache会提醒你要执行`sudo service apache2 relaod`，这条命令主要是你手动**命令Apache根据你刚才配置的yoursite.conf去寻找Django工程**，当然我一般都是**restart**，如果你的**Apache**不为其他的网站提供服务，那么你也**restart**吧，因为**重启大法好**！\n>每次你修改**Django**工程文件之后，都要**restart**一下，它才会生效。\n\n***\n### 4.修改Django的wsgi.py文件 \n修改上面说的`/var/www/ProjectName/ProjectName/wsgi.py`为如下格式\n``` python\n        import os\n        from os.path import join,dirname,abspath\n        PROJECT_DIR = dirname(dirname(abspath(__file__)))\n\n        import sys\n        sys.path.insert(0,PROJECT_DIR)\n        os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"examsys.settings\")\n\n        from django.core.wsgi import get_wsgi_application\n        application = get_wsgi_application()\n```\n这个配置文件的作用也是让**Apache**找到**Djanog**，毕竟不能一厢情愿吗，**Apache**同意和**Django**“交往”了，但是万一人家**Django**不乐意呢？\n最后，还记得我说的嘛？\n>每次你修改**Django**工程文件之后，都要**restart**一下，它才会生效。\n\n***\n### 5.调试错误\n1. 如果你的网站没有加载静态文件(`js/css/images`)，请检查你的静态文件是不是在`ProjectName/static`下，而不是在`ProjectName/AppName/static`下（改这里边的文件是不用重启**Apache**的）。\n2. 不知道啥问题，就是不管用，请查看**Apache**的错误文档。\n`cat /var/log/apache2/error.log`\n3. **No module named xxxx**。首先检查一下你所依赖的库是否安装全了，没有的话就`pip install`。\n4. **No module named django或者其他含django的错误**。这说明你的环境搭错了。往上翻error.log，找到AH00489开头的错误，看看你到底用的是什么环境。一般都是你第二步**Apache**的**Python**解释器安装错误。\n\n以上皆参考涂伟忠老师的[自强学堂](http://www.ziqiangxuetang.com/django/django-deploy.html)，我自己搭建Django+Apache2时的心得，如果还不明白，可以去[自强学堂](http://www.ziqiangxuetang.com/django/django-deploy.html)看看。","slug":"将Django搭建在Apache上","published":1,"updated":"2016-12-20T06:27:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwx5ihha0009i7q3dxlni70i","content":"<p>前段时间，由于实验室项目的需要，要搭建一个web服务器，可怜我只会写python，所以就去研究了一下Django。学习Django是一个愉快的过程，本来就该如此嘛，Python提倡INTERESTING TO CODE，所以很快，我就完成了Django的本地部署，然而在把Django搭到服务器上的是，却是让我捣鼓了一个星期，真真是把我坑苦了。<br><a id=\"more\"></a></p>\n<hr>\n<h3 id=\"1-我的环境\"><a href=\"#1-我的环境\" class=\"headerlink\" title=\"1.我的环境\"></a>1.我的环境</h3><p>在把Django搭建到Apache上时候，首先你需要明确你使用的<strong>Django</strong>和<strong>Apache</strong>的版本，嗯，还有<strong>Python</strong>的版本（<font color=\"gray\">这很重要</font>）！</p>\n<p>很多人依照网上的教程，BALABALA的输入<code>pip install Django</code>、<code>sudo apt-get install Apache2</code>，改了Apache配置文件，调了Django的setting，最后弄完了发现一直不成功，对着<strong>命令</strong>和<strong>配置文件</strong>看了半天也没发现有什么错误，怎么就一直不行呢？<strong>很可能你一开始就错了呀！</strong>人家是<strong>Python2</strong>，你的是<strong>Python3</strong>；人家的是<strong>Apache2.2</strong>，你的是<strong>Apache2.4</strong>。底子都不一样，搭起来能用才怪，所以第一步，一定要清楚自己的环境，具体的说就是你使用的版本号！</p>\n<p>如果你是看我的文章，从头开始安装的话，那么我建议你使用<code>pip install Django==1.x</code>来代替<code>pip install Django</code>，甚至在你安装pip的时候，我都建议你明确的指明是用python2或者python3来安装（现在大多数的云服务器都包含Py2和Py3两个版本）。</p>\n<p>接下来，我告诉你我搭建的环境，我的配置都是在此环境基础上配置的，如果其他环境，我了解我也会提一句。</p>\n<ul>\n<li>OS: Ubuntu 14.04</li>\n<li>Apache: Apache2.4<br> <code>sudo apt-get install apache2  #安装Apache</code><br> <code>apachectl -v  #检查Apache版本，ubunt 14.04没经过其他设置，默认应该是Apache2.4</code></li>\n<li>Python: Python2 </li>\n<li>Django: Django1.8<br><code>pip install Django==1.8</code></li>\n</ul>\n<hr>\n<h3 id=\"2-建立Python与Apache的链接\"><a href=\"#2-建立Python与Apache的链接\" class=\"headerlink\" title=\"2.建立Python与Apache的链接\"></a>2.建立Python与Apache的链接</h3><p>简单的来说就是<strong>Apache</strong>如何识别你的<strong>Django</strong>代码。无论如何，你的<strong>Django</strong>都是用Python写的，所以不恰当的说法就是给你的<strong>Apache</strong>安装<strong>Python</strong>解释器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install libapache2-mod-wsgi      <span class=\"comment\">#Python2</span></div><div class=\"line\">sudo apt-get install libapache2-mod-wsgi-py3  <span class=\"comment\">#Python3</span></div></pre></td></tr></table></figure>\n<p>第一条是对于<strong>Python2</strong>用户的，第二条是对于<strong>Python3</strong>用户的。</p>\n<blockquote>\n<p>如果你是<strong>Python2</strong>用户又恰巧不小心输入了第二条命令，那么不要怕，再输入第一条命令就好啦，同样的<strong>Python3</strong>也可以通过再输入第二条命令来重置<strong>Apache</strong>的<strong>Python</strong>解释器（这种说法不一定对，但是我相信你懂我意思！）！</p>\n</blockquote>\n<hr>\n<h3 id=\"3-为Django安家，让Apache找到它\"><a href=\"#3-为Django安家，让Apache找到它\" class=\"headerlink\" title=\"3.为Django安家，让Apache找到它\"></a>3.为Django安家，让Apache找到它</h3><p>大致可以分为四步：</p>\n<ol>\n<li>将Django工程放在<code>/var/www/</code>下；</li>\n<li><code>sudo vi /etc/apache2/sites-available/yoursite.conf</code> 修改配置文件；</li>\n<li><code>sudo a2ensite yoursite.conf</code> 配置文件生效；</li>\n<li><code>sudo service apache2 restart</code> 重启Apache。</li>\n</ol>\n<p><strong>Apache</strong>默认的网站目录是<code>/var/www/</code>。通常来说，如果你只是自己搭着玩玩也没有必要更改这个目录，直接就将你的<strong>Django工程文件夹</strong>放在这就行了。</p>\n<p>如果你想要放在别处的话，可以通过修改<code>/etc/apache2/apache2.conf</code>中的<code>&lt;Directory /var/www&gt;</code>，将其改为<code>&lt;Directory /where/you/want&gt;</code>，不过配套的你需要修改其权限。具体的修改方法<a href=\"http://www.ziqiangxuetang.com/django/django-deploy.html\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<p>以上只是完成了<strong>为Django安家</strong>这一步，但是我们还需要让<strong>Apache找到Django</strong>（方便查水表）。</p>\n<p>新建一个网站配置文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/apache2/sites-available/yoursite.conf。</div></pre></td></tr></table></figure></p>\n<p>这里边包含了你所有的网站配置信息，包括Apache如何查找静态文件(<code>js/css/images</code>)，网站上传的文件存在哪里，最重要的，包含了<strong>Apache</strong>识别<strong>Django</strong>的<strong>wsgi</strong>文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#&lt;VirtualHost *:80&gt;</span></div><div class=\"line\">ServerName www.yourdomain.com </div><div class=\"line\"><span class=\"comment\">#ServerAlias otherdomain.com</span></div><div class=\"line\"><span class=\"comment\">#ServerAdmin youremail@gmail.com </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 存放用户上传图片等文件的位置，注意去掉#号</span></div><div class=\"line\"><span class=\"comment\">#Alias /media/ /var/www/ProjectName/media/ </span></div><div class=\"line\">            </div><div class=\"line\"><span class=\"comment\"># 静态文件(js/css/images)的存放位置</span></div><div class=\"line\">Alias /static/ /var/www/ProjectName/static/                </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\"># 允许通过网络获取static的内容</span></div><div class=\"line\">&lt;Directory /var/www/ProjectName/static/&gt;                  </div><div class=\"line\">    Require all granted</div><div class=\"line\">&lt;/Directory&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 最重要的！通过wsgi.py让Apache识别这是一个Django工程，别漏掉前边的 /</span></div><div class=\"line\">WSGIScriptAlias / /var/www/ProjectName/ProjectName/wsgi.py     </div><div class=\"line\"><span class=\"comment\"># wsgi.py文件的父级目录，第一个ProjectName为Django工程目录，第二个ProjectName为Django自建的与工程同名的目录</span></div><div class=\"line\">&lt;Directory /var/www/ProjectName/ProjectName/&gt;                  </div><div class=\"line\">&lt;Files wsgi.py&gt;</div><div class=\"line\">    Require all granted</div><div class=\"line\">&lt;/Files&gt;</div><div class=\"line\">&lt;/Directory&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>\n<p>通过修改上面的文件，你就可以让<strong>Apache</strong>找到你的<strong>Django</strong>工程，上边可以修改的内容包括：</p>\n<ul>\n<li>80：修改80为其他数字，可以更改你的端口号，国内的电信貌似把80端口给封了（如果你的域名没有备案的话）。<strong>注意，还要修改<code>/etc/apache2/port.conf</code>文件中的<code>Listen port</code></strong>。</li>\n<li>ServerName：后边改成你自己的域名，如果没有的话就用IP代替。<strong>注意，如果改成了域名，还需要修改Django工程下的<code>seeting.py</code>文件，将其<code>ALLOWED_HOSTS=[]</code>改为<code>ALLOWED_HOSTS=[&#39;www.yourdomain.com&#39;]</code>，多个域名可以通过逗号隔开</strong>。</li>\n<li>ServerAlias：你的其他域名或IP。</li>\n</ul>\n<p>最后要让这个配置文件生效，你需要运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo a2ensite yoursite.conf</div></pre></td></tr></table></figure></p>\n<p>有时候，你可能需要让它失效（因为你将yoursite.conf改名为其他名字？），可以运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo a2dissite yoursite.conf</div></pre></td></tr></table></figure></p>\n<p>做完以上步骤，Apache会提醒你要执行<code>sudo service apache2 relaod</code>，这条命令主要是你手动<strong>命令Apache根据你刚才配置的yoursite.conf去寻找Django工程</strong>，当然我一般都是<strong>restart</strong>，如果你的<strong>Apache</strong>不为其他的网站提供服务，那么你也<strong>restart</strong>吧，因为<strong>重启大法好</strong>！</p>\n<blockquote>\n<p>每次你修改<strong>Django</strong>工程文件之后，都要<strong>restart</strong>一下，它才会生效。</p>\n</blockquote>\n<hr>\n<h3 id=\"4-修改Django的wsgi-py文件\"><a href=\"#4-修改Django的wsgi-py文件\" class=\"headerlink\" title=\"4.修改Django的wsgi.py文件\"></a>4.修改Django的wsgi.py文件</h3><p>修改上面说的<code>/var/www/ProjectName/ProjectName/wsgi.py</code>为如下格式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">from</span> os.path <span class=\"keyword\">import</span> join,dirname,abspath</div><div class=\"line\">PROJECT_DIR = dirname(dirname(abspath(__file__)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">sys.path.insert(<span class=\"number\">0</span>,PROJECT_DIR)</div><div class=\"line\">os.environ.setdefault(<span class=\"string\">\"DJANGO_SETTINGS_MODULE\"</span>, <span class=\"string\">\"examsys.settings\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> django.core.wsgi <span class=\"keyword\">import</span> get_wsgi_application</div><div class=\"line\">application = get_wsgi_application()</div></pre></td></tr></table></figure></p>\n<p>这个配置文件的作用也是让<strong>Apache</strong>找到<strong>Djanog</strong>，毕竟不能一厢情愿吗，<strong>Apache</strong>同意和<strong>Django</strong>“交往”了，但是万一人家<strong>Django</strong>不乐意呢？<br>最后，还记得我说的嘛？</p>\n<blockquote>\n<p>每次你修改<strong>Django</strong>工程文件之后，都要<strong>restart</strong>一下，它才会生效。</p>\n</blockquote>\n<hr>\n<h3 id=\"5-调试错误\"><a href=\"#5-调试错误\" class=\"headerlink\" title=\"5.调试错误\"></a>5.调试错误</h3><ol>\n<li>如果你的网站没有加载静态文件(<code>js/css/images</code>)，请检查你的静态文件是不是在<code>ProjectName/static</code>下，而不是在<code>ProjectName/AppName/static</code>下（改这里边的文件是不用重启<strong>Apache</strong>的）。</li>\n<li>不知道啥问题，就是不管用，请查看<strong>Apache</strong>的错误文档。<br><code>cat /var/log/apache2/error.log</code></li>\n<li><strong>No module named xxxx</strong>。首先检查一下你所依赖的库是否安装全了，没有的话就<code>pip install</code>。</li>\n<li><strong>No module named django或者其他含django的错误</strong>。这说明你的环境搭错了。往上翻error.log，找到AH00489开头的错误，看看你到底用的是什么环境。一般都是你第二步<strong>Apache</strong>的<strong>Python</strong>解释器安装错误。</li>\n</ol>\n<p>以上皆参考涂伟忠老师的<a href=\"http://www.ziqiangxuetang.com/django/django-deploy.html\" target=\"_blank\" rel=\"external\">自强学堂</a>，我自己搭建Django+Apache2时的心得，如果还不明白，可以去<a href=\"http://www.ziqiangxuetang.com/django/django-deploy.html\" target=\"_blank\" rel=\"external\">自强学堂</a>看看。</p>\n","excerpt":"<p>前段时间，由于实验室项目的需要，要搭建一个web服务器，可怜我只会写python，所以就去研究了一下Django。学习Django是一个愉快的过程，本来就该如此嘛，Python提倡INTERESTING TO CODE，所以很快，我就完成了Django的本地部署，然而在把Django搭到服务器上的是，却是让我捣鼓了一个星期，真真是把我坑苦了。<br>","more":"</p>\n<hr>\n<h3 id=\"1-我的环境\"><a href=\"#1-我的环境\" class=\"headerlink\" title=\"1.我的环境\"></a>1.我的环境</h3><p>在把Django搭建到Apache上时候，首先你需要明确你使用的<strong>Django</strong>和<strong>Apache</strong>的版本，嗯，还有<strong>Python</strong>的版本（<font color=\"gray\">这很重要</font>）！</p>\n<p>很多人依照网上的教程，BALABALA的输入<code>pip install Django</code>、<code>sudo apt-get install Apache2</code>，改了Apache配置文件，调了Django的setting，最后弄完了发现一直不成功，对着<strong>命令</strong>和<strong>配置文件</strong>看了半天也没发现有什么错误，怎么就一直不行呢？<strong>很可能你一开始就错了呀！</strong>人家是<strong>Python2</strong>，你的是<strong>Python3</strong>；人家的是<strong>Apache2.2</strong>，你的是<strong>Apache2.4</strong>。底子都不一样，搭起来能用才怪，所以第一步，一定要清楚自己的环境，具体的说就是你使用的版本号！</p>\n<p>如果你是看我的文章，从头开始安装的话，那么我建议你使用<code>pip install Django==1.x</code>来代替<code>pip install Django</code>，甚至在你安装pip的时候，我都建议你明确的指明是用python2或者python3来安装（现在大多数的云服务器都包含Py2和Py3两个版本）。</p>\n<p>接下来，我告诉你我搭建的环境，我的配置都是在此环境基础上配置的，如果其他环境，我了解我也会提一句。</p>\n<ul>\n<li>OS: Ubuntu 14.04</li>\n<li>Apache: Apache2.4<br> <code>sudo apt-get install apache2  #安装Apache</code><br> <code>apachectl -v  #检查Apache版本，ubunt 14.04没经过其他设置，默认应该是Apache2.4</code></li>\n<li>Python: Python2 </li>\n<li>Django: Django1.8<br><code>pip install Django==1.8</code></li>\n</ul>\n<hr>\n<h3 id=\"2-建立Python与Apache的链接\"><a href=\"#2-建立Python与Apache的链接\" class=\"headerlink\" title=\"2.建立Python与Apache的链接\"></a>2.建立Python与Apache的链接</h3><p>简单的来说就是<strong>Apache</strong>如何识别你的<strong>Django</strong>代码。无论如何，你的<strong>Django</strong>都是用Python写的，所以不恰当的说法就是给你的<strong>Apache</strong>安装<strong>Python</strong>解释器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install libapache2-mod-wsgi      <span class=\"comment\">#Python2</span></div><div class=\"line\">sudo apt-get install libapache2-mod-wsgi-py3  <span class=\"comment\">#Python3</span></div></pre></td></tr></table></figure>\n<p>第一条是对于<strong>Python2</strong>用户的，第二条是对于<strong>Python3</strong>用户的。</p>\n<blockquote>\n<p>如果你是<strong>Python2</strong>用户又恰巧不小心输入了第二条命令，那么不要怕，再输入第一条命令就好啦，同样的<strong>Python3</strong>也可以通过再输入第二条命令来重置<strong>Apache</strong>的<strong>Python</strong>解释器（这种说法不一定对，但是我相信你懂我意思！）！</p>\n</blockquote>\n<hr>\n<h3 id=\"3-为Django安家，让Apache找到它\"><a href=\"#3-为Django安家，让Apache找到它\" class=\"headerlink\" title=\"3.为Django安家，让Apache找到它\"></a>3.为Django安家，让Apache找到它</h3><p>大致可以分为四步：</p>\n<ol>\n<li>将Django工程放在<code>/var/www/</code>下；</li>\n<li><code>sudo vi /etc/apache2/sites-available/yoursite.conf</code> 修改配置文件；</li>\n<li><code>sudo a2ensite yoursite.conf</code> 配置文件生效；</li>\n<li><code>sudo service apache2 restart</code> 重启Apache。</li>\n</ol>\n<p><strong>Apache</strong>默认的网站目录是<code>/var/www/</code>。通常来说，如果你只是自己搭着玩玩也没有必要更改这个目录，直接就将你的<strong>Django工程文件夹</strong>放在这就行了。</p>\n<p>如果你想要放在别处的话，可以通过修改<code>/etc/apache2/apache2.conf</code>中的<code>&lt;Directory /var/www&gt;</code>，将其改为<code>&lt;Directory /where/you/want&gt;</code>，不过配套的你需要修改其权限。具体的修改方法<a href=\"http://www.ziqiangxuetang.com/django/django-deploy.html\">这里</a>。</p>\n<p>以上只是完成了<strong>为Django安家</strong>这一步，但是我们还需要让<strong>Apache找到Django</strong>（方便查水表）。</p>\n<p>新建一个网站配置文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/apache2/sites-available/yoursite.conf。</div></pre></td></tr></table></figure></p>\n<p>这里边包含了你所有的网站配置信息，包括Apache如何查找静态文件(<code>js/css/images</code>)，网站上传的文件存在哪里，最重要的，包含了<strong>Apache</strong>识别<strong>Django</strong>的<strong>wsgi</strong>文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#&lt;VirtualHost *:80&gt;</span></div><div class=\"line\">ServerName www.yourdomain.com </div><div class=\"line\"><span class=\"comment\">#ServerAlias otherdomain.com</span></div><div class=\"line\"><span class=\"comment\">#ServerAdmin youremail@gmail.com </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 存放用户上传图片等文件的位置，注意去掉#号</span></div><div class=\"line\"><span class=\"comment\">#Alias /media/ /var/www/ProjectName/media/ </span></div><div class=\"line\">            </div><div class=\"line\"><span class=\"comment\"># 静态文件(js/css/images)的存放位置</span></div><div class=\"line\">Alias /static/ /var/www/ProjectName/static/                </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\"># 允许通过网络获取static的内容</span></div><div class=\"line\">&lt;Directory /var/www/ProjectName/static/&gt;                  </div><div class=\"line\">    Require all granted</div><div class=\"line\">&lt;/Directory&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 最重要的！通过wsgi.py让Apache识别这是一个Django工程，别漏掉前边的 /</span></div><div class=\"line\">WSGIScriptAlias / /var/www/ProjectName/ProjectName/wsgi.py     </div><div class=\"line\"><span class=\"comment\"># wsgi.py文件的父级目录，第一个ProjectName为Django工程目录，第二个ProjectName为Django自建的与工程同名的目录</span></div><div class=\"line\">&lt;Directory /var/www/ProjectName/ProjectName/&gt;                  </div><div class=\"line\">&lt;Files wsgi.py&gt;</div><div class=\"line\">    Require all granted</div><div class=\"line\">&lt;/Files&gt;</div><div class=\"line\">&lt;/Directory&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>\n<p>通过修改上面的文件，你就可以让<strong>Apache</strong>找到你的<strong>Django</strong>工程，上边可以修改的内容包括：</p>\n<ul>\n<li>80：修改80为其他数字，可以更改你的端口号，国内的电信貌似把80端口给封了（如果你的域名没有备案的话）。<strong>注意，还要修改<code>/etc/apache2/port.conf</code>文件中的<code>Listen port</code></strong>。</li>\n<li>ServerName：后边改成你自己的域名，如果没有的话就用IP代替。<strong>注意，如果改成了域名，还需要修改Django工程下的<code>seeting.py</code>文件，将其<code>ALLOWED_HOSTS=[]</code>改为<code>ALLOWED_HOSTS=[&#39;www.yourdomain.com&#39;]</code>，多个域名可以通过逗号隔开</strong>。</li>\n<li>ServerAlias：你的其他域名或IP。</li>\n</ul>\n<p>最后要让这个配置文件生效，你需要运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo a2ensite yoursite.conf</div></pre></td></tr></table></figure></p>\n<p>有时候，你可能需要让它失效（因为你将yoursite.conf改名为其他名字？），可以运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo a2dissite yoursite.conf</div></pre></td></tr></table></figure></p>\n<p>做完以上步骤，Apache会提醒你要执行<code>sudo service apache2 relaod</code>，这条命令主要是你手动<strong>命令Apache根据你刚才配置的yoursite.conf去寻找Django工程</strong>，当然我一般都是<strong>restart</strong>，如果你的<strong>Apache</strong>不为其他的网站提供服务，那么你也<strong>restart</strong>吧，因为<strong>重启大法好</strong>！</p>\n<blockquote>\n<p>每次你修改<strong>Django</strong>工程文件之后，都要<strong>restart</strong>一下，它才会生效。</p>\n</blockquote>\n<hr>\n<h3 id=\"4-修改Django的wsgi-py文件\"><a href=\"#4-修改Django的wsgi-py文件\" class=\"headerlink\" title=\"4.修改Django的wsgi.py文件\"></a>4.修改Django的wsgi.py文件</h3><p>修改上面说的<code>/var/www/ProjectName/ProjectName/wsgi.py</code>为如下格式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">from</span> os.path <span class=\"keyword\">import</span> join,dirname,abspath</div><div class=\"line\">PROJECT_DIR = dirname(dirname(abspath(__file__)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">sys.path.insert(<span class=\"number\">0</span>,PROJECT_DIR)</div><div class=\"line\">os.environ.setdefault(<span class=\"string\">\"DJANGO_SETTINGS_MODULE\"</span>, <span class=\"string\">\"examsys.settings\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> django.core.wsgi <span class=\"keyword\">import</span> get_wsgi_application</div><div class=\"line\">application = get_wsgi_application()</div></pre></td></tr></table></figure></p>\n<p>这个配置文件的作用也是让<strong>Apache</strong>找到<strong>Djanog</strong>，毕竟不能一厢情愿吗，<strong>Apache</strong>同意和<strong>Django</strong>“交往”了，但是万一人家<strong>Django</strong>不乐意呢？<br>最后，还记得我说的嘛？</p>\n<blockquote>\n<p>每次你修改<strong>Django</strong>工程文件之后，都要<strong>restart</strong>一下，它才会生效。</p>\n</blockquote>\n<hr>\n<h3 id=\"5-调试错误\"><a href=\"#5-调试错误\" class=\"headerlink\" title=\"5.调试错误\"></a>5.调试错误</h3><ol>\n<li>如果你的网站没有加载静态文件(<code>js/css/images</code>)，请检查你的静态文件是不是在<code>ProjectName/static</code>下，而不是在<code>ProjectName/AppName/static</code>下（改这里边的文件是不用重启<strong>Apache</strong>的）。</li>\n<li>不知道啥问题，就是不管用，请查看<strong>Apache</strong>的错误文档。<br><code>cat /var/log/apache2/error.log</code></li>\n<li><strong>No module named xxxx</strong>。首先检查一下你所依赖的库是否安装全了，没有的话就<code>pip install</code>。</li>\n<li><strong>No module named django或者其他含django的错误</strong>。这说明你的环境搭错了。往上翻error.log，找到AH00489开头的错误，看看你到底用的是什么环境。一般都是你第二步<strong>Apache</strong>的<strong>Python</strong>解释器安装错误。</li>\n</ol>\n<p>以上皆参考涂伟忠老师的<a href=\"http://www.ziqiangxuetang.com/django/django-deploy.html\">自强学堂</a>，我自己搭建Django+Apache2时的心得，如果还不明白，可以去<a href=\"http://www.ziqiangxuetang.com/django/django-deploy.html\">自强学堂</a>看看。</p>"},{"title":"前端面试题","date":"2016-05-09T12:56:16.000Z","_content":"<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/)*\n**前端面试基础题**\n<!--more-->\n- [FE-interview](#fe-interview)\n  - [$HTML， HTTP，web综合问题](#$html，-http，web综合问题)\n    - [常见排序算法的时间复杂度,空间复杂度](#常见排序算法的时间复杂度空间复杂度)\n    - [前端需要注意哪些SEO](#前端需要注意哪些seo)\n    - [web开发中会话跟踪的方法有哪些](#web开发中会话跟踪的方法有哪些)\n    - [`<img>`的`title`和`alt`有什么区别](#img的title和alt有什么区别)\n    - [doctype是什么,举例常见doctype及特点](#doctype是什么举例常见doctype及特点)\n    - [HTML全局属性(global attribute)有哪些](#html全局属性global-attribute有哪些)\n    - [什么是web语义化,有什么好处](#什么是web语义化有什么好处)\n    - [HTTP method](#http-method)\n    - [从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)](#从浏览器地址栏输入url到显示页面的步骤以http为例)\n    - [HTTP request报文结构是怎样的](#http-request报文结构是怎样的)\n    - [HTTP response报文结构是怎样的](#http-response报文结构是怎样的)\n    - [如何进行网站性能优化](#如何进行网站性能优化)\n    - [什么是渐进增强](#什么是渐进增强)\n    - [HTTP状态码及其含义](#http状态码及其含义)\n  - [$CSS部分](#$css部分)\n    - [CSS选择器有哪些](#css选择器有哪些)\n    - [css sprite是什么,有什么优缺点](#css-sprite是什么有什么优缺点)\n    - [`display: none;`与`visibility: hidden;`的区别](#display-none与visibility-hidden的区别)\n    - [css hack原理及常用hack](#css-hack原理及常用hack)\n    - [specified value,computed value,used value计算方法](#specified-valuecomputed-valueused-value计算方法)\n    - [`link`与`@import`的区别](#link与@import的区别)\n    - [``display: block;``和``display: inline;``的区别](#display-block和display-inline的区别)\n    - [PNG,GIF,JPG的区别及如何选](#pnggifjpg的区别及如何选)\n    - [CSS有哪些继承属性](#css有哪些继承属性)\n    - [IE6浏览器有哪些常见的bug,缺陷或者与标准不一致的地方,如何解决](#ie6浏览器有哪些常见的bug缺陷或者与标准不一致的地方如何解决)\n    - [容器包含若干浮动元素时如何清理(包含)浮动](#容器包含若干浮动元素时如何清理包含浮动)\n    - [什么是FOUC?如何避免](#什么是fouc如何避免)\n    - [如何创建块级格式化上下文(block formatting context),BFC有什么用](#如何创建块级格式化上下文block-formatting-contextbfc有什么用)\n    - [display,float,position的关系](#displayfloatposition的关系)\n    - [外边距折叠(collapsing margins)](#外边距折叠collapsing-margins)\n    - [如何确定一个元素的包含块(containing block)](#如何确定一个元素的包含块containing-block)\n    - [stacking context,布局规则](#stacking-context布局规则)\n    - [如何水平居中一个元素](#如何水平居中一个元素)\n    - [如何竖直居中一个元素](#如何竖直居中一个元素)\n  - [$javascript概念部分](#$javascript概念部分)\n    - [DOM元素e的e.getAttribute(propName)和e.propName有什么区别和联系](#dom元素e的egetattributepropname和epropname有什么区别和联系)\n    - [offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别](#offsetwidthoffsetheightclientwidthclientheight与scrollwidthscrollheight的区别)\n    - [XMLHttpRequest通用属性和方法](#xmlhttprequest通用属性和方法)\n    - [focus/blur与focusin/focusout的区别与联系](#focusblur与focusinfocusout的区别与联系)\n    - [mouseover/mouseout与mouseenter/mouseleave的区别与联系](#mouseovermouseout与mouseentermouseleave的区别与联系)\n    - [sessionStorage,localStorage,cookie区别](#sessionstoragelocalstoragecookie区别)\n    - [javascript跨域通信](#javascript跨域通信)\n    - [javascript有哪几种数据类型](#javascript有哪几种数据类型)\n    - [什么闭包,闭包有什么用](#什么闭包闭包有什么用)\n    - [javascript有哪几种方法定义函数](#javascript有哪几种方法定义函数)\n    - [应用程序存储和离线web应用](#应用程序存储和离线web应用)\n    - [客户端存储localStorage和sessionStorage](#客户端存储localstorage和sessionstorage)\n    - [cookie及其操作](#cookie及其操作)\n    - [javascript有哪些方法定义对象](#javascript有哪些方法定义对象)\n    - [===运算符判断相等的流程是怎样的](#===运算符判断相等的流程是怎样的)\n    - [==运算符判断相等的流程是怎样的](#==运算符判断相等的流程是怎样的)\n    - [对象到字符串的转换步骤](#对象到字符串的转换步骤)\n    - [对象到数字的转换步骤](#对象到数字的转换步骤)\n    - [<,>,<=,>=的比较规则](#==的比较规则)\n    - [+运算符工作流程](#运算符工作流程)\n    - [函数内部arguments变量有哪些特性,有哪些属性,如何将它转换为数组](#函数内部arguments变量有哪些特性有哪些属性如何将它转换为数组)\n    - [DOM事件模型是如何的,编写一个EventUtil工具类实现事件管理兼容](#dom事件模型是如何的编写一个eventutil工具类实现事件管理兼容)\n    - [评价一下三种方法实现继承的优缺点,并改进](#评价一下三种方法实现继承的优缺点并改进)\n  - [$javascript编程部分](#$javascript编程部分)\n    - [请用原生js实现一个函数,给页面制定的任意一个元素添加一个透明遮罩(透明度可变,默认0.2),使这个区域点击无效,要求兼容IE8+及各主流浏览器,遮罩层效果如下图所示:](#请用原生js实现一个函数给页面制定的任意一个元素添加一个透明遮罩透明度可变默认02使这个区域点击无效要求兼容ie8及各主流浏览器遮罩层效果如下图所示)\n    - [请用代码写出(今天是星期x)其中x表示当天是星期几,如果当天是星期一,输出应该是\"今天是星期一\"](#请用代码写出今天是星期x其中x表示当天是星期几如果当天是星期一输出应该是今天是星期一)\n    - [下面这段代码想要循环延时输出结果0 1 2 3 4,请问输出结果是否正确,如果不正确,请说明为什么,并修改循环内的代码使其输出正确结果](#下面这段代码想要循环延时输出结果0-1-2-3-4请问输出结果是否正确如果不正确请说明为什么并修改循环内的代码使其输出正确结果)\n    - [现有一个Page类,其原型对象上有许多以post开头的方法(如postMsg);另有一拦截函数chekc,只返回ture或false.请设计一个函数,该函数应批量改造原Page的postXXX方法,在保留其原有功能的同时,为每个postXXX方法增加拦截验证功能,当chekc返回true时继续执行原postXXX方法,返回false时不再执行原postXXX方法](#现有一个page类其原型对象上有许多以post开头的方法如postmsg另有一拦截函数chekc只返回ture或false请设计一个函数该函数应批量改造原page的postxxx方法在保留其原有功能的同时为每个postxxx方法增加拦截验证功能当chekc返回true时继续执行原postxxx方法返回false时不再执行原postxxx方法)\n    - [完成下面的tool-tip](#完成下面的tool-tip)\n    - [编写javascript深度克隆函数deepClone](#编写javascript深度克隆函数deepclone)\n    - [补充代码,鼠标单击Button1后将Button1移动到Button2的后面](#补充代码鼠标单击button1后将button1移动到button2的后面)\n    - [网页中实现一个计算当年还剩多少时间的倒数计时程序,要求网页上实时动态显示\"××年还剩××天××时××分××秒\"](#网页中实现一个计算当年还剩多少时间的倒数计时程序要求网页上实时动态显示××年还剩××天××时××分××秒)\n    - [完成一个函数,接受数组作为参数,数组元素为整数或者数组,数组元素包含整数或数组,函数返回扁平化后的数组](#完成一个函数接受数组作为参数数组元素为整数或者数组数组元素包含整数或数组函数返回扁平化后的数组)\n    - [如何判断一个对象是否为数组](#如何判断一个对象是否为数组)\n    - [请评价以下事件监听器代码并给出改进意见](#请评价以下事件监听器代码并给出改进意见)\n    - [如何判断一个对象是否为函数](#如何判断一个对象是否为函数)\n    - [编写一个函数接受url中query string为参数,返回解析后的Object,query string使用application/x-www-form-urlencoded编码](#编写一个函数接受url中query-string为参数返回解析后的objectquery-string使用applicationx-www-form-urlencoded编码)\n    - [解析一个完整的url,返回Object包含域与window.location相同](#解析一个完整的url返回object包含域与windowlocation相同)\n    - [完成函数getViewportSize返回指定窗口的视口尺寸](#完成函数getviewportsize返回指定窗口的视口尺寸)\n    - [完成函数getScrollOffset返回窗口滚动条偏移量](#完成函数getscrolloffset返回窗口滚动条偏移量)\n    - [现有一个字符串richText,是一段富文本,需要显示在页面上.有个要求,需要给其中只包含一个img元素的p标签增加一个叫pic的class.请编写代码实现.可以使用jQuery或KISSY.](#现有一个字符串richtext是一段富文本需要显示在页面上有个要求需要给其中只包含一个img元素的p标签增加一个叫pic的class请编写代码实现可以使用jquery或kissy)\n    - [请实现一个Event类,继承自此类的对象都会拥有两个方法on,off,once和trigger](#请实现一个event类继承自此类的对象都会拥有两个方法onoffonce和trigger)\n    - [编写一个函数将列表子元素顺序反转](#编写一个函数将列表子元素顺序反转)\n    - [以下函数的作用是?空白区域应该填写什么](#以下函数的作用是空白区域应该填写什么)\n    - [编写一个函数实现form的序列化(即将一个表单中的键值序列化为可提交的字符串)](#编写一个函数实现form的序列化即将一个表单中的键值序列化为可提交的字符串)\n    - [使用原生javascript给下面列表中的li节点绑定点击事件,点击时创建一个Object对象,兼容IE和标准浏览器](#使用原生javascript给下面列表中的li节点绑定点击事件点击时创建一个object对象兼容ie和标准浏览器)\n    - [有一个大数组,var a = ['1', '2', '3', ...];a的长度是100,内容填充随机整数的字符串.请先构造此数组a,然后设计一个算法将其内容去重](#有一个大数组var-a-=-1-2-3-a的长度是100内容填充随机整数的字符串请先构造此数组a然后设计一个算法将其内容去重)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# FE-interview\n\n个人收集的前端知识点、面试题和答案，参考答案仅代表个人观点，方便复习，目录如下，通过文档内搜索目录可快速定位章节\n\n## $HTML， HTTP，web综合问题\n\n### 常见排序算法的时间复杂度,空间复杂度\n\n![排序算法比较](http://7xsspr.com2.z0.glb.clouddn.com/sort-compare.png)\n\n### 前端需要注意哪些SEO\n\n1. 合理的title、description、keywords：搜索对着三项的权重逐个减小，title值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面title要有所不同；description把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面description有所不同；keywords列举出重要关键词即可\n2. 语义化的HTML代码，符合W3C规范：语义化代码让搜索引擎容易理解网页\n3. 重要内容HTML代码放在最前：搜索引擎抓取HTML顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取\n4. 重要内容不要用js输出：爬虫不会执行js获取内容\n5. 少用iframe：搜索引擎不会抓取iframe中的内容\n6. 非装饰性图片必须加alt\n7. 提高网站速度：网站速度是搜索引擎排序的一个重要指标\n\n### web开发中会话跟踪的方法有哪些\n\n1. cookie\n2. session\n3. url重写\n4. 隐藏input\n5. ip地址\n\n### `<img>`的`title`和`alt`有什么区别\n\n1. `title`是[global attributes](http://www.w3.org/TR/html-markup/global-attributes.html#common.attrs.core)之一，用于为元素提供附加的advisory information。通常当鼠标滑动到元素上的时候显示。\n2. `alt`是`<img>`的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。\n\n### doctype是什么,举例常见doctype及特点\n\n1. `<!doctype>`声明必须处于HTML文档的头部，在`<html>`标签之前，HTML5中不区分大小写\n2. `<!doctype>`声明不是一个HTML标签，是一个用于告诉浏览器当前HTMl版本的指令\n3. 现代浏览器的html布局引擎通过检查doctype决定使用兼容模式还是标准模式对文档进行渲染，一些浏览器有一个接近标准模型。\n3. 在HTML4.01中`<!doctype>`声明指向一个DTD，由于HTML4.01基于SGML，所以DTD指定了标记规则以保证浏览器正确渲染内容\n4. HTML5不基于SGML，所以不用指定DTD\n\n常见dotype：\n\n1. **HTML4.01 strict**：不允许使用表现性、废弃元素（如font）以及frameset。声明：`<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">`\n2. **HTML4.01 Transitional**:允许使用表现性、废弃元素（如font），不允许使用frameset。声明：`<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">`\n3. **HTML4.01 Frameset**:允许表现性元素，废气元素以及frameset。声明：`<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\">`\n4. **XHTML1.0 Strict**:不使用允许表现性、废弃元素以及frameset。文档必须是结构良好的XML文档。声明：``<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">``\n5. **XHTML1.0 Transitional**:允许使用表现性、废弃元素，不允许frameset，文档必须是结构良好的XMl文档。声明： ``<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">``\n6. **XHTML 1.0 Frameset**:允许使用表现性、废弃元素以及frameset，文档必须是结构良好的XML文档。声明：``<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">``\n7. **HTML 5**: `<!doctype html>`\n\n### HTML全局属性(global attribute)有哪些\n\n参考资料：[MDN: html global attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes)或者[W3C HTML global-attributes](http://www.w3.org/TR/html-markup/global-attributes.html#common.attrs.core)\n\n- `accesskey`:设置快捷键，提供快速访问元素如<a href=\"#\" accesskey=\"a\">aaa</a>在windows下的firefox中按``alt + shift + a``可激活元素\n- `class`:为元素设置类标识，多个类名用空格分开，CSS和javascript可通过class属性获取元素\n- `contenteditable`: 指定元素内容是否可编辑\n- `contextmenu`: 自定义鼠标右键弹出菜单内容\n- `data-*`: 为元素增加自定义属性\n- `dir`: 设置元素文本方向\n- `draggable`: 设置元素是否可拖拽\n- `dropzone`: 设置元素拖放类型： copy, move, link\n- `hidden`: 表示一个元素是否与文档。样式上会导致元素不显示，但是不能用这个属性实现样式效果\n- `id`: 元素id，文档内唯一\n- `lang`: 元素内容的的语言\n- `spellcheck`: 是否启动拼写和语法检查\n- `style`: 行内css样式\n- `tabindex`: 设置元素可以获得焦点，通过tab可以导航\n- `title`: 元素相关的建议信息\n- `translate`: 元素和子孙节点内容是否需要本地化\n\n### 什么是web语义化,有什么好处\n\nweb语义化是指通过HTML标记表示页面包含的信息，包含了HTML标签的语义化和css命名的语义化。\nHTML标签的语义化是指：通过使用包含语义的标签（如h1-h6）恰当地表示文档结构\ncss命名的语义化是指：为html标签添加有意义的class，id补充未表达的语义，如[Microformat](http://en.wikipedia.org/wiki/Microformats)通过添加符合规则的class描述信息\n为什么需要语义化：\n\n- 去掉样式后页面呈现清晰的结构\n- 盲人使用读屏器更好地阅读\n- 搜索引擎更好地理解页面，有利于收录\n- 便团队项目的可持续运作及维护\n\n### HTTP method\n\n1. 一台服务器要与HTTP1.1兼容，只要为资源实现**GET**和**HEAD**方法即可\n2. **GET**是最常用的方法，通常用于**请求服务器发送某个资源**。\n3. **HEAD**与GET类似，但**服务器在响应中值返回首部，不返回实体的主体部分**\n4. **PUT**让服务器**用请求的主体部分来创建一个由所请求的URL命名的新文档，或者，如果那个URL已经存在的话，就用干这个主体替代它**\n5. **POST**起初是用来向服务器输入数据的。实际上，通常会用它来支持HTML的表单。表单中填好的数据通常会被送给服务器，然后由服务器将其发送到要去的地方。\n6. **TRACE**会在目的服务器端发起一个环回诊断，最后一站的服务器会弹回一个TRACE响应并在响应主体中携带它收到的原始请求报文。TRACE方法主要用于诊断，用于验证请求是否如愿穿过了请求/响应链。\n7. **OPTIONS**方法请求web服务器告知其支持的各种功能。可以查询服务器支持哪些方法或者对某些特殊资源支持哪些方法。\n8. **DELETE**请求服务器删除请求URL指定的资源\n\n### 从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)\n\n1. 在浏览器地址栏输入URL\n2. 浏览器查看**缓存**，如果请求资源在缓存中并且新鲜，跳转到转码步骤\n    1. 如果资源未缓存，发起新请求\n    2. 如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。\n    3. 检验新鲜通常有两个HTTP头进行控制`Expires`和`Cache-Control`：\n        - HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期\n        - HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间\n3. 浏览器**解析URL**获取协议，主机，端口，path\n4. 浏览器**组装一个HTTP（GET）请求报文**\n5. 浏览器**获取主机ip地址**，过程如下：\n    1. 浏览器缓存\n    2. 本机缓存\n    3. hosts文件\n    4. 路由器缓存\n    5. ISP DNS缓存\n    6. DNS递归查询（可能存在负载均衡导致每次IP不一样）\n6. **打开一个socket与目标IP地址，端口建立TCP链接**，三次握手如下：\n    1. 客户端发送一个TCP的**SYN=1，Seq=X**的包到服务器端口\n    2. 服务器发回**SYN=1， ACK=X+1， Seq=Y**的响应包\n    3. 客户端发送**ACK=Y+1， Seq=Z**\n7. TCP链接建立后**发送HTTP请求**\n8. 服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序\n9. 服务器检查**HTTP请求头是否包含缓存验证信息**如果验证缓存新鲜，返回**304**等对应状态码\n10. 处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作\n11. 服务器将**响应报文通过TCP连接发送回浏览器**\n12. 浏览器接收HTTP响应，然后根据情况选择**关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下**：\n    1. 主动方发送**Fin=1， Ack=Z， Seq= X**报文\n    2. 被动方发送**ACK=X+1， Seq=Z**报文\n    3. 被动方发送**Fin=1， ACK=X， Seq=Y**报文\n    4. 主动方发送**ACK=Y， Seq=X**报文\n13. 浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同\n14. 如果资源可缓存，**进行缓存**\n15. 对响应进行**解码**（例如gzip压缩）\n16. 根据资源类型决定如何处理（假设资源为HTML文档）\n17. **解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本**，这些操作没有严格的先后顺序，以下分别解释\n18. **构建DOM树**：\n    1. **Tokenizing**：根据HTML规范将字符流解析为标记\n    2. **Lexing**：词法分析将标记转换为对象并定义属性和规则\n    3. **DOM construction**：根据HTML标记关系将对象组成DOM树\n19. 解析过程中遇到图片、样式表、js文件，**启动下载**\n20. 构建**CSSOM树**：\n    1. **Tokenizing**：字符流转换为标记流\n    2. **Node**：根据标记创建节点\n    3. **CSSOM**：节点创建CSSOM树\n21. **[根据DOM树和CSSOM树构建渲染树](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction)**:\n    1. 从DOM树的根节点遍历所有**可见节点**，不可见节点包括：1）`script`,`meta`这样本身不可见的标签。2)被css隐藏的节点，如`display: none`\n    2. 对每一个可见节点，找到恰当的CSSOM规则并应用\n    3. 发布可视节点的内容和计算样式\n22. **js解析如下**：\n    1. 浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时**document.readystate为loading**\n    2. HTML解析器遇到**没有async和defer的script时**，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。**同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容**\n    3. 当解析器遇到设置了**async**属性的script时，开始下载脚本并继续解析文档。脚本会在它**下载完成后尽快执行**，但是**解析器不会停下来等它下载**。异步脚本**禁止使用document.write()**，它们可以访问自己script和之前的文档元素\n    4. 当文档完成解析，document.readState变成interactive\n    5. 所有**defer**脚本会**按照在文档出现的顺序执行**，延迟脚本**能访问完整文档树**，禁止使用document.write()\n    6. 浏览器**在Document对象上触发DOMContentLoaded事件**\n    7. 此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些**内容完成载入并且所有异步脚本完成载入和执行**，document.readState变为complete,window触发load事件\n23. **显示页面**（HTML解析过程中会逐步显示页面）\n\n### HTTP request报文结构是怎样的\n[rfc2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html)中进行了定义：\n\n1. 首行是**Request-Line**包括：**请求方法**，**请求URI**，**协议版本**，**CRLF**\n2. 首行之后是若干行**请求头**，包括**general-header**，**request-header**或者**entity-header**，每个一行以CRLF结束\n3. 请求头和消息实体之间有一个**CRLF分隔**\n4. 根据实际请求需要可能包含一个**消息实体**\n一个请求报文例子如下：\n\n```\nGET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1\nHost: www.w3.org\nConnection: keep-alive\nCache-Control: max-age=0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36\nReferer: https://www.google.com.hk/\nAccept-Encoding: gzip,deflate,sdch\nAccept-Language: zh-CN,zh;q=0.8,en;q=0.6\nCookie: authorstyle=yes\nIf-None-Match: \"2cc8-3e3073913b100\"\nIf-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT\n\nname=qiu&age=25\n```\n\n### HTTP response报文结构是怎样的\n\n[rfc2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html)中进行了定义：\n\n1. 首行是状态行包括：**HTTP版本，状态码，状态描述**，后面跟一个CRLF\n2. 首行之后是**若干行响应头**，包括：**通用头部，响应头部，实体头部**\n3. 响应头部和响应实体之间用**一个CRLF空行**分隔\n4. 最后是一个可能的**消息实体**\n响应报文例子如下：\n\n```\nHTTP/1.1 200 OK\nDate: Tue, 08 Jul 2014 05:28:43 GMT\nServer: Apache/2\nLast-Modified: Wed, 01 Sep 2004 13:24:52 GMT\nETag: \"40d7-3e3073913b100\"\nAccept-Ranges: bytes\nContent-Length: 16599\nCache-Control: max-age=21600\nExpires: Tue, 08 Jul 2014 11:28:43 GMT\nP3P: policyref=\"http://www.w3.org/2001/05/P3P/p3p.xml\"\nContent-Type: text/html; charset=iso-8859-1\n\n{\"name\": \"qiu\", \"age\": 25}\n```\n\n### 如何进行网站性能优化\n\n[雅虎Best Practices for Speeding Up Your Web Site](https://developer.yahoo.com/performance/rules.html)：\n\n- content方面\n    1. 减少HTTP请求：合并文件、CSS精灵、inline Image\n    2. 减少DNS查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询\n    3. 避免重定向：多余的中间访问\n    4. 使Ajax可缓存\n    5. 非必须组件延迟加载\n    6. 未来所需组件预加载\n    7. 减少DOM元素数量\n    8. 将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量\n    9. 减少iframe数量\n    10. 不要404\n\n- Server方面\n    1. 使用CDN\n    2. 添加Expires或者Cache-Control响应头\n    3. 对组件使用Gzip压缩\n    4. 配置ETag\n    5. Flush Buffer Early\n    6. Ajax使用GET进行请求\n    7. 避免空src的img标签\n- Cookie方面\n    1. 减小cookie大小\n    2. 引入资源的域名不要包含cookie\n- css方面\n    1. 将样式表放到页面顶部\n    2. 不使用CSS表达式\n    3. 使用<link>不使用@import\n    4. 不使用IE的Filter\n- Javascript方面\n    1. 将脚本放到页面底部\n    2. 将javascript和css从外部引入\n    3. 压缩javascript和css\n    4. 删除不需要的脚本\n    5. 减少DOM访问\n    6. 合理设计事件监听器\n- 图片方面\n    1. 优化图片：根据实际颜色需要选择色深、压缩\n    2. 优化css精灵\n    3. 不要在HTML中拉伸图片\n    4. 保证favicon.ico小并且可缓存\n- 移动方面\n    1. 保证组件小于25k\n    2. Pack Components into a Multipart Document\n\n\n### 什么是渐进增强\n\n渐进增强是指在web设计时强调可访问性、语义化HTML标签、外部样式表和脚本。保证所有人都能访问页面的基本内容和功能同时为高级浏览器和高带宽用户提供更好的用户体验。核心原则如下:\n\n- 所有浏览器都必须能访问基本内容\n- 所有浏览器都必须能使用基本功能\n- 所有内容都包含在语义化标签中\n- 通过外部CSS提供增强的布局\n- 通过非侵入式、外部javascript提供增强功能\n- end-user web browser preferences are respected\n\n### HTTP状态码及其含义\n\n参考[RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)\n\n- 1XX：信息状态码\n    - **100 Continue**：客户端应当继续发送请求。这个临时相应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求万仇向客户端发送一个最终响应\n    - **101 Switching Protocols**：服务器已经理解力客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到Upgrade消息头中定义的那些协议。\n- 2XX：成功状态码\n    - **200 OK**：请求成功，请求所希望的响应头或数据体将随此响应返回\n    - **201 Created**：\n    - **202 Accepted**：\n    - **203 Non-Authoritative Information**：\n    - **204 No Content**：\n    - **205 Reset Content**：\n    - **206 Partial Content**：\n- 3XX：重定向\n    - **300 Multiple Choices**：\n    - **301 Moved Permanently**：\n    - **302 Found**：\n    - **303 See Other**：\n    - **304 Not Modified**：\n    - **305 Use Proxy**：\n    - **306 （unused）**：\n    - **307 Temporary Redirect**：\n- 4XX：客户端错误\n    - **400 Bad Request**:\n    - **401 Unauthorized**:\n    - **402 Payment Required**:\n    - **403 Forbidden**:\n    - **404 Not Found**:\n    - **405 Method Not Allowed**:\n    - **406 Not Acceptable**:\n    - **407 Proxy Authentication Required**:\n    - **408 Request Timeout**:\n    - **409 Conflict**:\n    - **410 Gone**:\n    - **411 Length Required**:\n    - **412 Precondition Failed**:\n    - **413 Request Entity Too Large**:\n    - **414 Request-URI Too Long**:\n    - **415 Unsupported Media Type**:\n    - **416 Requested Range Not Satisfiable**:\n    - **417 Expectation Failed**:\n- 5XX: 服务器错误\n    - **500 Internal Server Error**:\n    - **501 Not Implemented**:\n    - **502 Bad Gateway**:\n    - **503 Service Unavailable**:\n    - **504 Gateway Timeout**:\n    - **505 HTTP Version Not Supported**:\n\n## $CSS部分\n\n### CSS选择器有哪些\n\n1. ***通用选择器**：选择所有元素，**不参与计算优先级**，兼容性IE6+\n2. **#X id选择器**：选择id值为X的元素，兼容性：IE6+\n3. **.X 类选择器**： 选择class包含X的元素，兼容性：IE6+\n4. **X Y后代选择器**： 选择满足X选择器的后代节点中满足Y选择器的元素，兼容性：IE6+\n5. **X 元素选择器**： 选择标所有签为X的元素，兼容性：IE6+\n6. **:link，：visited，：focus，：hover，：active链接状态**： 选择特定状态的链接元素，顺序LoVe HAte，兼容性: IE4+\n7. **X + Y直接兄弟选择器**：在**X之后第一个兄弟节点**中选择满足Y选择器的元素，兼容性： IE7+\n8. **X > Y子选择器**： 选择X的子元素中满足Y选择器的元素，兼容性： IE7+\n9. **X ~ Y兄弟**： 选择**X之后所有兄弟节点**中满足Y选择器的元素，兼容性： IE7+\n10. **[attr]**：选择所有设置了attr属性的元素，兼容性IE7+\n11. **[attr=value]**：选择属性值刚好为value的元素\n12. **[attr~=value]**：选择属性值为空白符分隔，其中一个的值刚好是value的元素\n13. **[attr|=value]**：选择属性值刚好为value或者value-开头的元素\n14. **[attr^=value]**：选择属性值以value开头的元素\n15. **[attr$=value]**：选择属性值以value结尾的元素\n16. **[attr*=value]**：选择属性值中包含value的元素\n17. **[:checked]**：选择单选框，复选框，下拉框中选中状态下的元素，兼容性：IE9+\n18. **X:after, X::after**：after伪元素，选择元素虚拟子元素（元素的最后一个子元素），CSS3中::表示伪元素。兼容性:after为IE8+，::after为IE9+\n18. **:hover**：鼠标移入状态的元素，兼容性a标签IE4+， 所有元素IE7+\n19. **:not(selector)**：选择不符合selector的元素。**不参与计算优先级**，兼容性：IE9+\n20. **::first-letter**：伪元素，选择块元素第一行的第一个字母，兼容性IE5.5+\n21. **::first-line**：伪元素，选择块元素的第一行，兼容性IE5.5+\n22. **:nth-child(an + b)**：伪类，选择前面有an + b - 1个兄弟节点的元素，其中n\n&gt;= 0， 兼容性IE9+\n23. **:nth-last-child(an + b)**：伪类，选择后面有an + b - 1个兄弟节点的元素\n其中n &gt;= 0，兼容性IE9+\n24. **X:nth-of-type(an+b)**：伪类，X为选择器，**解析得到元素标签**，选择**前面**有an + b - 1个**相同标签**兄弟节点的元素。兼容性IE9+\n25. **X:nth-last-of-type(an+b)**：伪类，X为选择器，解析得到元素标签，选择**后面**有an+b-1个相同**标签**兄弟节点的元素。兼容性IE9+\n26. **X:first-child**：伪类，选择满足X选择器的元素，且这个元素是其父节点的第一个子元素。兼容性IE7+\n27. **X:last-child**：伪类，选择满足X选择器的元素，且这个元素是其父节点的最后一个子元素。兼容性IE9+\n28. **X:only-child**：伪类，选择满足X选择器的元素，且这个元素是其父元素的唯一子元素。兼容性IE9+\n29. **X:only-of-type**：伪类，选择X选择的元素，**解析得到元素标签**，如果该元素没有相同类型的兄弟节点时选中它。兼容性IE9+\n30. **X:first-of-type**：伪类，选择X选择的元素，**解析得到元素标签**，如果该元素\n是此此类型元素的第一个兄弟。选中它。兼容性IE9+\n\n\n### css sprite是什么,有什么优缺点\n\n概念：将多个小图片拼接到一个图片中。通过background-position和元素尺寸调节需要显示的背景图案。\n\n优点：\n\n1. 减少HTTP请求数，极大地提高页面加载速度\n2. 增加图片信息重复度，提高压缩比，减少图片大小\n3. 更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现\n\n缺点：\n\n1. 图片合并麻烦\n2. 维护麻烦，修改一个图片可能需要从新布局整个图片，样式\n\n\n### `display: none;`与`visibility: hidden;`的区别\n联系：它们都能让元素不可见\n\n区别：\n\n1. display:none;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；visibility: hidden;不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见\n2. display: none;是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示；visibility: hidden;是继承属性，子孙节点消失由于继承了hidden，通过设置visibility: visible;可以让子孙节点显式\n3. 修改常规流中元素的display通常会造成文档重排。修改visibility属性只会造成本元素的重绘。\n4. 读屏器不会读取display: none;元素内容；会读取visibility: hidden;元素内容\n\n### css hack原理及常用hack\n\n原理：利用**不同浏览器对CSS的支持和解析结果不一样**编写针对特定浏览器样式。常见的hack有1）属性hack。2）选择器hack。3）IE条件注释\n\n- IE条件注释：适用于[IE5, IE9]常见格式如下\n\n```\n<!--[if IE 6]>\nSpecial instructions for IE 6 here\n<![endif]-->\n```\n\n- 选择器hack：不同浏览器对选择器的支持不一样\n\n```\n/***** Selector Hacks ******/\n\n/* IE6 and below */\n* html #uno  { color: red }\n\n/* IE7 */\n*:first-child+html #dos { color: red }\n\n/* IE7, FF, Saf, Opera  */\nhtml>body #tres { color: red }\n\n/* IE8, FF, Saf, Opera (Everything but IE 6,7) */\nhtml>/**/body #cuatro { color: red }\n\n/* Opera 9.27 and below, safari 2 */\nhtml:first-child #cinco { color: red }\n\n/* Safari 2-3 */\nhtml[xmlns*=\"\"] body:last-child #seis { color: red }\n\n/* safari 3+, chrome 1+, opera9+, ff 3.5+ */\nbody:nth-of-type(1) #siete { color: red }\n\n/* safari 3+, chrome 1+, opera9+, ff 3.5+ */\nbody:first-of-type #ocho {  color: red }\n\n/* saf3+, chrome1+ */\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n #diez  { color: red  }\n}\n\n/* iPhone / mobile webkit */\n@media screen and (max-device-width: 480px) {\n #veintiseis { color: red  }\n}\n\n/* Safari 2 - 3.1 */\nhtml[xmlns*=\"\"]:root #trece  { color: red  }\n\n/* Safari 2 - 3.1, Opera 9.25 */\n*|html[xmlns*=\"\"] #catorce { color: red  }\n\n/* Everything but IE6-8 */\n:root *> #quince { color: red  }\n\n/* IE7 */\n*+html #dieciocho {  color: red }\n\n/* Firefox only. 1+ */\n#veinticuatro,  x:-moz-any-link  { color: red }\n\n/* Firefox 3.0+ */\n#veinticinco,  x:-moz-any-link, x:default  { color: red  }\n```\n\n- 属性hack：不同浏览器解析bug或方法\n\n```\n/* IE6 */\n#once { _color: blue }\n\n/* IE6, IE7 */\n#doce { *color: blue; /* or #color: blue */ }\n\n/* Everything but IE6 */\n#diecisiete { color/**/: blue }\n\n/* IE6, IE7, IE8 */\n#diecinueve { color: blue\\9; }\n\n/* IE7, IE8 */\n#veinte { color/*\\**/: blue\\9; }\n\n/* IE6, IE7 -- acts as an !important */\n#veintesiete { color: blue !ie; } /* string after ! can be anything */\n```\n\n### specified value,computed value,used value计算方法\n\n- specified value: 计算方法如下：\n    1. 如果样式表设置了一个值，使用这个值\n    2. 如果没有设置值，这个属性是继承属性，从父元素继承\n    3. 如果没设置，并且不是继承属性，使用css规范指定的初始值\n\n- computed value: 以specified value根据规范定义的行为进行计算，通常将相对值计算为绝对值，例如em根据font-size进行计算。一些使用百分数并且需要布局来决定最终值的属性，如width，margin。百分数就直接作为computed value。line-height的无单位值也直接作为computed value。这些值将在计算used value时得到绝对值。**computed value的主要作用是用于继承**\n\n- used value：属性计算后的最终值，对于大多数属性可以通过window.getComputedStyle获得，尺寸值单位为像素。以下属性依赖于布局，\n    - background-position\n    - bottom, left, right, top\n    - height, width\n    - margin-bottom, margin-left, margin-right, margin-top\n    - min-height, min-width\n    - padding-bottom, padding-left, padding-right, padding-top\n    - text-indent\n\n### `link`与`@import`的区别\n\n1. ``link``是HTML方式， ``@import``是CSS方式\n2. ``link``最大限度支持并行下载，``@import``过多嵌套导致串行下载，出现[FOUC](http://www.bluerobot.com/web/css/fouc.asp/)\n4. ``link``可以通过``rel=\"alternate stylesheet\"``指定候选样式\n5. 浏览器对``link``支持早于``@import``，可以使用``@import``对老浏览器隐藏样式\n6. ``@import``必须在样式规则之前，可以在css文件中引用其他文件\n6. 总体来说：**[link优于@import](http://www.stevesouders.com/blog/2009/04/09/dont-use-import/)**\n\n### ``display: block;``和``display: inline;``的区别\n\n``block``元素特点：\n\n1.处于常规流中时，如果``width``没有设置，会自动填充满父容器\n2.可以应用``margin/padding``\n3.在没有设置高度的情况下会扩展高度以包含常规流中的子元素\n4.处于常规流中时布局时在前后元素位置之间（独占一个水平空间）\n5.忽略``vertical-align``\n\n``inline``元素特点\n\n1.水平方向上根据``direction``依次布局\n2.不会在元素前后进行换行\n3.受``white-space``控制\n4.``margin/padding``在竖直方向上无效，水平方向上有效\n5.``width/height``属性对非替换行内元素无效，宽度由元素内容决定\n6.非替换行内元素的行框高由``line-height``确定，替换行内元素的行框高由``height``,``margin``,``padding``,``border``决定\n6.浮动或绝对定位时会转换为``block``\n7.``vertical-align``属性生效\n\n\n\n### PNG,GIF,JPG的区别及如何选\n参考资料： [选择正确的图片格式](http://www.yuiblog.com/blog/2008/11/04/imageopt-2/)\n**GIF**:\n\n1. 8位像素，256色\n2. 无损压缩\n3. 支持简单动画\n4. 支持boolean透明\n5. 适合简单动画\n\n**JPEG**：\n\n1. 颜色限于256\n2. 有损压缩\n3. 可控制压缩质量\n4. 不支持透明\n5. 适合照片\n\n**PNG**：\n\n1. 有PNG8和truecolor PNG\n2. PNG8类似GIF颜色上限为256，文件小，支持alpha透明度，无动画\n3. 适合图标、背景、按钮\n\n### CSS有哪些继承属性\n\n- 关于文字排版的属性如：\n  +  [font](https://developer.mozilla.org/en-US/docs/Web/CSS/font)\n  +  [word-break](https://developer.mozilla.org/en-US/docs/Web/CSS/word-break)\n  +  [letter-spacing](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing)\n  +  [text-align](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align)\n  +  [text-rendering](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering)\n  +  [word-spacing](https://developer.mozilla.org/en-US/docs/Web/CSS/word-spacing)\n  +  [white-space](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)\n  +  [text-indent](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent)\n  +  [text-transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform)\n  +  [text-shadow](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow)\n- [line-height](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height)\n- [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color)\n- [visibility](https://developer.mozilla.org/en-US/docs/Web/CSS/visibility)\n- [cursor](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor)\n\n\n\n### IE6浏览器有哪些常见的bug,缺陷或者与标准不一致的地方,如何解决\n\n- IE6不支持min-height，解决办法使用css hack：\n\n```\n.target {\n    min-height: 100px;\n    height: auto !important;\n    height: 100px;   // IE6下内容高度超过会自动扩展高度\n}\n```\n\n- ``ol``内``li``的序号全为1，不递增。解决方法：为li设置样式``display: list-item;``\n\n- 未定位父元素``overflow: auto;``，包含``position: relative;``子元素，子元素高于父元素时会溢出。解决办法：1）子元素去掉``position: relative;``; 2）不能为子元素去掉定位时，父元素``position: relative;``\n\n```\n<style type=\"text/css\">\n.outer {\n    width: 215px;\n    height: 100px;\n    border: 1px solid red;\n    overflow: auto;\n    position: relative;  /* 修复bug */\n}\n.inner {\n    width: 100px;\n    height: 200px;\n    background-color: purple;\n    position: relative;\n}\n</style>\n\n<div class=\"outer\">\n    <div class=\"inner\"></div>\n</div>\n```\n\n- IE6只支持``a``标签的``:hover``伪类，解决方法：使用js为元素监听mouseenter，mouseleave事件，添加类实现效果：\n\n```\n<style type=\"text/css\">\n.p:hover,\n.hover {\n    background: purple;\n}\n</style>\n\n<p class=\"p\" id=\"target\">aaaa bbbbb<span>DDDDDDDDDDDd</span> aaaa lkjlkjdf j</p>\n\n<script type=\"text/javascript\">\nfunction addClass(elem, cls) {\n    if (elem.className) {\n        elem.className += ' ' + cls;\n    } else {\n        elem.className = cls;\n    }\n}\nfunction removeClass(elem, cls) {\n    var className = ' ' + elem.className + ' ';\n    var reg = new RegExp(' +' + cls + ' +', 'g');\n    elem.className = className.replace(reg, ' ').replace(/^ +| +$/, '');\n}\n\nvar target = document.getElementById('target');\nif (target.attachEvent) {\n    target.attachEvent('onmouseenter', function () {\n        addClass(target, 'hover');\n    });\n    target.attachEvent('onmouseleave', function () {\n        removeClass(target, 'hover');\n    })\n}\n</script>\n```\n\n- IE5-8不支持``opacity``，解决办法：\n\n```\n.opacity {\n    opacity: 0.4\n    filter: alpha(opacity=60); /* for IE5-7 */\n    -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)\"; /* for IE 8*/\n}\n```\n\n- IE6在设置``height``小于``font-size``时高度值为``font-size``，解决办法：``font-size: 0;``\n- IE6不支持PNG透明背景，解决办法: **IE6下使用gif图片**\n- IE6-7不支持``display: inline-block``解决办法：设置inline并触发hasLayout\n\n```\n    display: inline-block;\n    *display: inline;\n    *zoom: 1;\n```\n\n- IE6下浮动元素在浮动方向上与父元素边界接触元素的外边距会加倍。解决办法：\n1）使用padding控制间距。\n2）浮动元素``display: inline;``这样解决问题且无任何副作用：css标准规定浮动元素display:inline会自动调整为block\n- 通过为块级元素设置宽度和左右margin为auto时，IE6不能实现水平居中，解决方法：为父元素设置``text-align: center;``\n\n### 容器包含若干浮动元素时如何清理(包含)浮动\n\n1. 容器元素闭合标签前添加额外元素并设置``clear: both``\n2. 父元素触发块级格式化上下文(见块级可视化上下文部分)\n3. 设置容器元素伪元素进行清理[推荐的清理浮动方法](http://nicolasgallagher.com/micro-clearfix-hack/)\n\n```\n/**\n* 在标准浏览器下使用\n* 1 content内容为空格用于修复opera下文档中出现\n*   contenteditable属性时在清理浮动元素上下的空白\n* 2 使用display使用table而不是block：可以防止容器和\n*   子元素top-margin折叠,这样能使清理效果与BFC，IE6/7\n*   zoom: 1;一致\n**/\n\n.clearfix:before,\n.clearfix:after {\n    content: \" \"; /* 1 */\n    display: table; /* 2 */\n}\n\n.clearfix:after {\n    clear: both;\n}\n\n/**\n* IE 6/7下使用\n* 通过触发hasLayout实现包含浮动\n**/\n.clearfix {\n    *zoom: 1;\n}\n```\n\n### 什么是FOUC?如何避免\nFlash Of Unstyled Content：用户定义样式表加载之前浏览器使用默认样式显示文档，用户样式加载渲染之后再从新显示文档，造成页面闪烁。**解决方法**：把样式表放到文档的`head`\n\n### 如何创建块级格式化上下文(block formatting context),BFC有什么用\n创建规则：\n\n1. 根元素\n2. 浮动元素（``float``不是``none``）\n3. 绝对定位元素（``position``取值为``absolute``或``fixed``）\n4. ``display``取值为``inline-block``,``table-cell``, ``table-caption``,``flex``, ``inline-flex``之一的元素\n5. ``overflow``不是``visible``的元素\n\n\n作用：\n\n1. 可以包含浮动元素\n2. 不被浮动元素覆盖\n3. 阻止父子元素的margin折叠\n\n### display,float,position的关系\n\n1. 如果``display``为none，那么position和float都不起作用，这种情况下元素不产生框\n2. 否则，如果position值为absolute或者fixed，框就是绝对定位的，float的计算值为none，display根据下面的表格进行调整。\n3. 否则，如果float不是none，框是浮动的，display根据下表进行调整\n4. 否则，如果元素是根元素，display根据下表进行调整\n5. 其他情况下display的值为指定值\n总结起来：**绝对定位、浮动、根元素都需要调整``display``**\n![display转换规则](http://7xsspr.com2.z0.glb.clouddn.com/display-adjust.png)\n\n### 外边距折叠(collapsing margins)\n毗邻的两个或多个``margin``会合并成一个margin，叫做外边距折叠。规则如下：\n\n1. 两个或多个毗邻的普通流中的块元素垂直方向上的margin会折叠\n2. 浮动元素/inline-block元素/绝对定位元素的margin不会和垂直方向上的其他元素的margin折叠\n3. 创建了块级格式化上下文的元素，不会和它的子元素发生margin折叠\n4. 元素自身的margin-bottom和margin-top相邻时也会折叠\n\n### 如何确定一个元素的包含块(containing block)\n\n1. 根元素的包含块叫做初始包含块，在连续媒体中他的尺寸与viewport相同并且anchored at the canvas origin；对于paged media，它的尺寸等于page area。初始包含块的direction属性与根元素相同。\n2. ``position``为``relative``或者``static``的元素，它的包含块由最近的块级（``display``为``block``,``list-item``, ``table``）祖先元素的**内容框**组成\n3. 如果元素``position``为``fixed``。对于连续媒体，它的包含块为viewport；对于paged media，包含块为page area\n4. 如果元素``position``为``absolute``，它的包含块由祖先元素中最近一个``position``为``relative``,``absolute``或者``fixed``的元素产生，规则如下：\n    - 如果祖先元素为行内元素，the containing block is the bounding box around the **padding boxes** of the first and the last inline boxes generated for that element.\n    - 其他情况下包含块由祖先节点的**padding edge**组成\n\n    如果找不到定位的祖先元素，包含块为**初始包含块**\n\n### stacking context,布局规则\nz轴上的默认层叠顺序如下（从下到上）：\n\n1. 根元素的边界和背景\n2. 常规流中的元素按照html中顺序\n3. 浮动块\n4. positioned元素按照html中出现顺序\n\n如何创建stacking context：\n\n1. 根元素\n2. z-index不为auto的定位元素\n3. a flex item with a z-index value other than 'auto'\n4. opacity小于1的元素\n5. 在移动端webkit和chrome22+，z-index为auto，position: fixed也将创建新的stacking context\n\n### 如何水平居中一个元素\n- 如果需要居中的元素为**常规流中inline元素**，为父元素设置`text-align: center;`即可实现\n- 如果需要居中的元素为**常规流中block元素**，1）为元素设置宽度，2）设置左右margin为auto。3）IE6下需在父元素上设置`text-align: center;`,再给子元素恢复需要的值\n\n```\n<body>\n    <div class=\"content\">\n    aaaaaa aaaaaa a a a a a a a a\n    </div>\n</body>\n\n<style>\n    body {\n        background: #DDD;\n        text-align: center; /* 3 */\n    }\n    .content {\n        width: 500px;      /* 1 */\n        text-align: left;  /* 3 */\n        margin: 0 auto;    /* 2 */\n\n        background: purple;\n    }\n</style>\n```\n\n- 如果需要居中的元素为**浮动元素**，1）为元素设置宽度，2）`position: relative;`，3）浮动方向偏移量（left或者right）设置为50%，4）浮动方向上的margin设置为元素宽度一半乘以-1\n\n```\n<body>\n    <div class=\"content\">\n    aaaaaa aaaaaa a a a a a a a a\n    </div>\n</body>\n\n<style>\n    body {\n        background: #DDD;\n    }\n    .content {\n        width: 500px;         /* 1 */\n        float: left;\n\n        position: relative;   /* 2 */\n        left: 50%;            /* 3 */\n        margin-left: -250px;  /* 4 */\n\n        background-color: purple;\n    }\n</style>\n```\n\n- 如果需要居中的元素为**绝对定位元素**，1）为元素设置宽度，2）偏移量设置为50%，3）偏移方向外边距设置为元素宽度一半乘以-1\n\n```\n<body>\n    <div class=\"content\">\n    aaaaaa aaaaaa a a a a a a a a\n    </div>\n</body>\n\n<style>\n    body {\n        background: #DDD;\n        position: relative;\n    }\n    .content {\n        width: 800px;\n\n        position: absolute;\n        left: 50%;\n        margin-left: -400px;\n\n        background-color: purple;\n    }\n</style>\n```\n\n- 如果需要居中的元素为**绝对定位元素**，1）为元素设置宽度，2）设置左右偏移量都为0,3）设置左右外边距都为auto\n\n```\n<body>\n    <div class=\"content\">\n    aaaaaa aaaaaa a a a a a a a a\n    </div>\n</body>\n\n<style>\n    body {\n        background: #DDD;\n        position: relative;\n    }\n    .content {\n        width: 800px;\n\n        position: absolute;\n        margin: 0 auto;\n        left: 0;\n        right: 0;\n\n        background-color: purple;\n    }\n</style>\n```\n\n### 如何竖直居中一个元素\n参考资料：[6 Methods For Vertical Centering With CSS](http://www.vanseodesign.com/css/vertical-centering/)。 [盘点8种CSS实现垂直居中](http://blog.csdn.net/freshlover/article/details/11579669)\n\n- 需要居中元素为**单行文本**，为包含文本的元素设置大于`font-size`的`line-height`：\n\n```\n<p class=\"text\">center text</p>\n\n<style>\n.text {\n    line-height: 200px;\n}\n</style>\n```\n\n\n## $javascript概念部分\n\n### DOM元素e的e.getAttribute(propName)和e.propName有什么区别和联系\n\n- e.getAttribute()，是标准DOM操作文档元素属性的方法，具有通用性可在任意文档上使用，返回元素在源文件中**设置的属性**\n- e.propName通常是在HTML文档中访问特定元素的**特性**，浏览器解析元素后生成对应对象（如a标签生成HTMLAnchorElement），这些对象的特性会根据特定规则结合属性设置得到，对于没有对应特性的属性，只能使用getAttribute进行访问\n- e.getAttribute()返回值是源文件中设置的值，类型是字符串或者null（有的实现返回\"\"）\n- e.propName返回值可能是字符串、布尔值、对象、undefined等\n- 大部分attribute与property是一一对应关系，修改其中一个会影响另一个，如id，title等属性\n- 一些布尔属性`<input hidden/>`的检测设置需要hasAttribute和removeAttribute来完成，或者设置对应property\n- 像`<a href=\"../index.html\">link</a>`中href属性，转换成property的时候需要通过转换得到完整URL\n- 一些attribute和property不是一一对应如：form控件中`<input value=\"hello\"/>`对应的是defaultValue，修改或设置value property修改的是控件当前值，setAttribute修改value属性不会改变value property\n\n### offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别\n\n- offsetWidth/offsetHeight返回值包含**content + padding + border**，效果与e.getBoundingClientRect()相同\n- clientWidth/clientHeight返回值只包含**content + padding**，如果有滚动条，也**不包含滚动条**\n- scrollWidth/scrollHeight返回值包含**content + padding + 溢出内容的尺寸**\n\n[Measuring Element Dimension and Location with CSSOM in Windows Internet Explorer 9](http://msdn.microsoft.com/en-us/library/ie/hh781509(v=vs.85).aspx)\n\n![元素尺寸](http://7xsspr.com2.z0.glb.clouddn.com/element-size.png)\n\n### XMLHttpRequest通用属性和方法\n\n1. `readyState`:表示请求状态的整数，取值：\n  - UNSENT（0）：对象已创建\n  - OPENED（1）：open()成功调用，在这个状态下，可以为xhr设置请求头，或者使用send()发送请求\n  - HEADERS_RECEIVED(2)：所有重定向已经自动完成访问，并且最终响应的HTTP头已经收到\n  - LOADING(3)：响应体正在接收\n  - DONE(4)：数据传输完成或者传输产生错误\n3. `onreadystatechange`：readyState改变时调用的函数\n4. `status`：服务器返回的HTTP状态码（如，200， 404）\n5. `statusText`:服务器返回的HTTP状态信息（如，OK，No Content）\n6. `responseText`:作为字符串形式的来自服务器的完整响应\n6. `responseXML`: Document对象，表示服务器的响应解析成的XML文档\n7. `abort()`:取消异步HTTP请求\n8. `getAllResponseHeaders()`: 返回一个字符串，包含响应中服务器发送的全部HTTP报头。每个报头都是一个用冒号分隔开的名/值对，并且使用一个回车/换行来分隔报头行\n9. `getResponseHeader(headerName)`:返回headName对应的报头值\n10. `open(method, url, asynchronous [, user, password])`:初始化准备发送到服务器上的请求。method是HTTP方法，不区分大小写；url是请求发送的相对或绝对URL；asynchronous表示请求是否异步；user和password提供身份验证\n11. `setRequestHeader(name, value)`:设置HTTP报头\n12. `send(body)`:对服务器请求进行初始化。参数body包含请求的主体部分，对于POST请求为键值对字符串；对于GET请求，为null\n\n### focus/blur与focusin/focusout的区别与联系\n\n1. focus/blur不冒泡，focusin/focusout冒泡\n2. focus/blur兼容性好，focusin/focusout在除FireFox外的浏览器下都保持良好兼容性，如需使用事件托管，可考虑在FireFox下使用事件捕获elem.addEventListener('focus', handler, true)\n3. 可获得焦点的元素：\n    1. window\n    2. 链接被点击或键盘操作\n    3. 表单空间被点击或键盘操作\n    4. 设置`tabindex`属性的元素被点击或键盘操作\n\n### mouseover/mouseout与mouseenter/mouseleave的区别与联系\n\n1. mouseover/mouseout是标准事件，**所有浏览器都支持**；mouseenter/mouseleave是IE5.5引入的特有事件后来被DOM3标准采纳，现代标准浏览器也支持\n2. mouseover/mouseout是**冒泡**事件；mouseenter/mouseleave**不冒泡**。需要为**多个元素监听鼠标移入/出事件时，推荐mouseover/mouseout托管，提高性能**\n3. 标准事件模型中event.target表示发生移入/出的元素,**vent.relatedTarget**对应移出/如元素；在老IE中event.srcElement表示发生移入/出的元素，**event.toElement**表示移出的目标元素，**event.fromElement**表示移入时的来源元素\n\n例子：鼠标从div#target元素移出时进行处理，判断逻辑如下：\n\n    <div id=\"target\"><span>test</span></div>\n\n    <script type=\"text/javascript\">\n    var target = document.getElementById('target');\n    if (target.addEventListener) {\n      target.addEventListener('mouseout', mouseoutHandler, false);\n    } else if (target.attachEvent) {\n      target.attachEvent('onmouseout', mouseoutHandler);\n    }\n\n    function mouseoutHandler(e) {\n      e = e || window.event;\n      var target = e.target || e.srcElement;\n\n      // 判断移出鼠标的元素是否为目标元素\n      if (target.id !== 'target') {\n        return;\n      }\n\n      // 判断鼠标是移出元素还是移到子元素\n      var relatedTarget = event.relatedTarget || e.toElement;\n      while (relatedTarget !== target\n        && relatedTarget.nodeName.toUpperCase() !== 'BODY') {\n        relatedTarget = relatedTarget.parentNode;\n      }\n\n      // 如果相等，说明鼠标在元素内部移动\n      if (relatedTarget === target) {\n        return;\n      }\n\n      // 执行需要操作\n      //alert('鼠标移出');\n\n    }\n    </script>\n\n### sessionStorage,localStorage,cookie区别\n\n1. 都会在浏览器端保存，有大小限制，同源限制\n2. cookie会在请求时发送到服务器，作为会话标识，服务器可修改cookie；web storage不会发送到服务器\n3. cookie有path概念，子路径可以访问父路径cookie，父路径不能访问子路径cookie\n4. 有效期：cookie在设置的有效期内有效，默认为浏览器关闭；sessionStorage在窗口关闭前有效，localStorage长期有效，直到用户删除\n5. 共享：sessionStorage不能共享，localStorage在同源文档之间共享，cookie在同源且符合path规则的文档之间共享\n6. localStorage的修改会促发其他文档窗口的update事件\n7. cookie有secure属性要求HTTPS传输\n8. 浏览器不能保存超过300个cookie，单个服务器不能超过20个，每个cookie不能超过4k。web storage大小支持能达到5M\n\n### javascript跨域通信\n同源：两个文档同源需满足\n\n1. 协议相同\n2. 域名相同\n3. 端口相同\n\n跨域通信：js进行DOM操作、通信时如果目标与当前窗口不满足同源条件，浏览器为了安全会阻止跨域操作。跨域通信通常有以下方法\n\n- 如果是log之类的简单**单项通信**，新建``<img>``,``<script>``,``<link>``,``<iframe>``元素，通过src，href属性设置为目标url。实现跨域请求\n- 如果请求**json数据**，使用``<script>``进行jsonp请求\n- 现代浏览器中**多窗口通信**使用HTML5规范的targetWindow.postMessage(data, origin);其中data是需要发送的对象，origin是目标窗口的origin。window.addEventListener('message', handler, false);handler的event.data是postMessage发送来的数据，event.origin是发送窗口的origin，event.source是发送消息的窗口引用\n- 内部服务器代理请求跨域url，然后返回数据\n- 跨域请求数据，现代浏览器可使用HTML5规范的CORS功能，只要目标服务器返回HTTP头部**``Access-Control-Allow-Origin: *``**即可像普通ajax一样访问跨域资源\n\n### javascript有哪几种数据类型\n六种基本数据类型\n\n- undefined\n- null\n- string\n- boolean\n- number\n- [symbol](https://developer.mozilla.org/en-US/docs/Glossary/Symbol)(ES6)\n\n一种引用类型\n\n- Object\n\n### 什么闭包,闭包有什么用\n**闭包是在某个作用域内定义的函数，它可以访问这个作用域内的所有变量**。闭包作用域链通常包括三个部分：\n\n1. 函数本身作用域。\n2. 闭包定义时的作用域。\n3. 全局作用域。\n\n闭包常见用途：\n\n1. 创建特权方法用于访问控制\n2. 事件处理程序及回调\n\n### javascript有哪几种方法定义函数\n\n1. [函数声明表达式](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)\n2. [function操作符](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function)\n3. [Function 构造函数](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)\n4. [ES6:arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions)\n\n重要参考资料：[MDN:Functions_and_function_scope](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope)\n\n### 应用程序存储和离线web应用\nHTML5新增应用程序缓存，允许web应用将应用程序自身保存到用户浏览器中，用户离线状态也能访问。\n1.为html元素设置manifest属性:``<html manifest=\"myapp.appcache\">``，其中后缀名只是一个约定，真正识别方式是通过``text/cache-manifest``作为MIME类型。所以需要配置服务器保证设置正确\n2.manifest文件首行为``CACHE MANIFEST``，其余就是要缓存的URL列表，每个一行，相对路径都相对于manifest文件的url。注释以#开头\n3.url分为三种类型：``CACHE``:为默认类型。``NETWORK``：表示资源从不缓存。 ``FALLBACK``:每行包含两个url，第二个URL是指需要加载和存储在缓存中的资源， 第一个URL是一个前缀。任何匹配该前缀的URL都不会缓存，如果从网络中载入这样的URL失败的话，就会用第二个URL指定的缓存资源来替代。以下是一个文件例子：\n\n```\nCACHE MANIFEST\n\nCACHE:\nmyapp.html\nmyapp.css\nmyapp.js\n\nFALLBACK:\nvideos/ offline_help.html\n\nNETWORK:\ncgi/\n```\n\n### 客户端存储localStorage和sessionStorage\n\n- localStorage有效期为永久，sessionStorage有效期为顶层窗口关闭前\n- 同源文档可以读取并修改localStorage数据，sessionStorage只允许同一个窗口下的文档访问，如通过iframe引入的同源文档。\n- Storage对象通常被当做普通javascript对象使用：**通过设置属性来存取字符串值**，也可以通过**setItem(key, value)设置**，**getItem(key)读取**，**removeItem(key)删除**，**clear()删除所有数据**，**length表示已存储的数据项数目**，**key(index)返回对应索引的key**\n\n```\nlocalStorage.setItem('x', 1); // storge x->1\nlocalStorage.getItem('x); // return value of x\n\n// 枚举所有存储的键值对\nfor (var i = 0, len = localStorage.length; i < len; ++i ) {\n    var name = localStorage.key(i);\n    var value = localStorage.getItem(name);\n}\n\nlocalStorage.removeItem('x'); // remove x\nlocalStorage.clear();  // remove all data\n```\n\n### cookie及其操作\n\n- cookie是web浏览器存储的少量数据，最早设计为服务器端使用，作为HTTP协议的扩展实现。cookie数据会自动在浏览器和服务器之间传输。\n- 通过读写cookie检测是否支持\n- cookie属性有**名**，**值**，**max-age**，**path**, **domain**，**secure**；\n- cookie默认有效期为浏览器会话，一旦用户关闭浏览器，数据就丢失，通过设置**max-age=seconds**属性告诉浏览器cookie有效期\n- cookie作用域通过**文档源**和**文档路径**来确定，通过**path**和**domain**进行配置，web页面同目录或子目录文档都可访问\n- 通过cookie保存数据的方法为：为document.cookie设置一个符合目标的字符串如下\n- 读取document.cookie获得'; '分隔的字符串，key=value,解析得到结果\n\n```\ndocument.cookie = 'name=qiu; max-age=9999; path=/; domain=domain; secure';\n\ndocument.cookie = 'name=aaa; path=/; domain=domain; secure';\n// 要改变cookie的值，需要使用相同的名字、路径和域，新的值\n// 来设置cookie，同样的方法可以用来改变有效期\n\n// 设置max-age为0可以删除指定cookie\n\n//读取cookie，访问document.cookie返回键值对组成的字符串，\n//不同键值对之间用'; '分隔。通过解析获得需要的值\n```\n\n[cookieUtil.js](https://github.com/qiu-deqing/google/blob/master/module/js/cookieUtil.js)：自己写的cookie操作工具\n\n### javascript有哪些方法定义对象\n\n1. 对象字面量： `var obj = {};`\n2. 构造函数： `var obj = new Object();`\n3. Object.create(): `var obj = Object.create(Object.prototype);`\n\n### ===运算符判断相等的流程是怎样的\n\n1. 如果两个值不是相同类型，它们不相等\n2. 如果两个值都是null或者都是undefined，它们相等\n3. 如果两个值都是布尔类型true或者都是false，它们相等\n4. 如果其中有一个是**NaN**，它们不相等\n5. 如果都是数值型并且数值相等，他们相等， -0等于0\n6. 如果他们都是字符串并且在相同位置包含相同的16位值，他它们相等；如果在长度或者内容上不等，它们不相等；两个字符串显示结果相同但是编码不同==和===都认为他们不相等\n7. 如果他们指向相同对象、数组、函数，它们相等；如果指向不同对象，他们不相等\n\n### ==运算符判断相等的流程是怎样的\n\n1. 如果两个值类型相同，按照===比较方法进行比较\n2. 如果类型不同，使用如下规则进行比较\n  1. 如果其中一个值是null，另一个是undefined，它们相等\n  2. 如果一个值是**数字**另一个是**字符串**，将**字符串转换为数字**进行比较\n  3. 如果有布尔类型，将**true转换为1，false转换为0**，然后用==规则继续比较\n  4. 如果一个值是对象，另一个是数字或字符串，将对象转换为原始值然后用==规则继续比较\n  5. **其他所有情况都认为不相等**\n\n### 对象到字符串的转换步骤\n\n1. 如果对象有toString()方法，javascript调用它。如果返回一个原始值（primitive value如：string number boolean）,将这个值转换为字符串作为结果\n2. 如果对象没有toString()方法或者返回值不是原始值，javascript寻找对象的valueOf()方法，如果存在就调用它，返回结果是原始值则转为字符串作为结果\n3. 否则，javascript不能从toString()或者valueOf()获得一个原始值，此时throws a TypeError\n\n\n### 对象到数字的转换步骤\n\n    1. 如果对象有valueOf()方法并且返回元素值，javascript将返回值转换为数字作为结果\n    2. 否则，如果对象有toString()并且返回原始值，javascript将返回结果转换为数字作为结果\n    3. 否则，throws a TypeError\n\n### <,>,<=,>=的比较规则\n\n所有比较运算符都支持任意类型，但是**比较只支持数字和字符串**，所以需要执行必要的转换然后进行比较，转换规则如下:\n1. 如果操作数是对象，转换为原始值：如果valueOf方法返回原始值，则使用这个值，否则使用toString方法的结果，如果转换失败则报错\n2. 经过必要的对象到原始值的转换后，如果两个操作数都是字符串，按照字母顺序进行比较（他们的16位unicode值的大小）\n3. 否则，如果有一个操作数不是字符串，**将两个操作数转换为数字**进行比较\n\n### +运算符工作流程\n1. 如果有操作数是对象，转换为原始值\n2. 此时如果有**一个操作数是字符串**，其他的操作数都转换为字符串并执行连接\n3. 否则：**所有操作数都转换为数字并执行加法**\n\n### 函数内部arguments变量有哪些特性,有哪些属性,如何将它转换为数组\n\n- arguments所有函数中都包含的一个局部变量，是一个类数组对象，对应函数调用时的实参。如果函数定义同名参数会在调用时覆盖默认对象\n- arguments[index]分别对应函数调用时的实参，并且通过arguments修改实参时会同时修改实参\n- arguments.length为实参的个数（Function.length表示形参长度）\n- arguments.callee为当前正在执行的函数本身，使用这个属性进行递归调用时需注意this的变化\n- arguments.caller为调用当前函数的函数（已被遗弃）\n- 转换为数组：<code>var args = Array.prototype.slice.call(arguments, 0);</code>\n\n### DOM事件模型是如何的,编写一个EventUtil工具类实现事件管理兼容\n\n- DOM事件包含捕获（capture）和冒泡（bubble）两个阶段：捕获阶段事件从window开始触发事件然后通过祖先节点一次传递到触发事件的DOM元素上；冒泡阶段事件从初始元素依次向祖先节点传递直到window\n- 标准事件监听elem.addEventListener(type, handler, capture)/elem.removeEventListener(type, handler, capture)：handler接收保存事件信息的event对象作为参数，event.target为触发事件的对象，handler调用上下文this为绑定监听器的对象，event.preventDefault()取消事件默认行为，event.stopPropagation()/event.stopImmediatePropagation()取消事件传递\n- 老版本IE事件监听elem.attachEvent('on'+type, handler)/elem.detachEvent('on'+type, handler)：handler不接收event作为参数，事件信息保存在window.event中，触发事件的对象为event.srcElement，handler执行上下文this为window使用闭包中调用handler.call(elem, event)可模仿标准模型，然后返回闭包，保证了监听器的移除。event.returnValue为false时取消事件默认行为，event.cancleBubble为true时取消时间传播\n- 通常利用事件冒泡机制托管事件处理程序提高程序性能。\n\n```\n/**\n * 跨浏览器事件处理工具。只支持冒泡。不支持捕获\n * @author  (qiu_deqing@126.com)\n */\n\nvar EventUtil = {\n    getEvent: function (event) {\n        return event || window.event;\n    },\n    getTarget: function (event) {\n        return event.target || event.srcElement;\n    },\n    // 返回注册成功的监听器，IE中需要使用返回值来移除监听器\n    on: function (elem, type, handler) {\n        if (elem.addEventListener) {\n            elem.addEventListener(type, handler, false);\n            return handler;\n        } else if (elem.attachEvent) {\n            var wrapper = function () {\n              var event = window.event;\n              event.target = event.srcElement;\n              handler.call(elem, event);\n            };\n            elem.attachEvent('on' + type, wrapper);\n            return wrapper;\n        }\n    },\n    off: function (elem, type, handler) {\n        if (elem.removeEventListener) {\n            elem.removeEventListener(type, handler, false);\n        } else if (elem.detachEvent) {\n            elem.detachEvent('on' + type, handler);\n        }\n    },\n    preventDefault: function (event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        } else if ('returnValue' in event) {\n            event.returnValue = false;\n        }\n    },\n    stopPropagation: function (event) {\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        } else if ('cancelBubble' in event) {\n            event.cancelBubble = true;\n        }\n    },\n    /**\n     * keypress事件跨浏览器获取输入字符\n     * 某些浏览器在一些特殊键上也触发keypress，此时返回null\n     **/\n     getChar: function (event) {\n        if (event.which == null) {\n            return String.fromCharCode(event.keyCode);  // IE\n        }\n        else if (event.which != 0 && event.charCode != 0) {\n            return String.fromCharCode(event.which);    // the rest\n        }\n        else {\n            return null;    // special key\n        }\n     }\n};\n```\n\n### 评价一下三种方法实现继承的优缺点,并改进\n\n```\nfunction Shape() {}\n\nfunction Rect() {}\n\n// 方法1\nRect.prototype = new Shape();\n\n// 方法2\nRect.prototype = Shape.prototype;\n\n// 方法3\nRect.prototype = Object.create(Shape.prototype);\n\nRect.prototype.area = function () {\n  // do something\n};\n```\n\n方法1：\n\n1. 优点：正确设置原型链实现继承\n2. 优点：父类实例属性得到继承，原型链查找效率提高，也能为一些属性提供合理的默认值\n3. 缺点：父类实例属性为引用类型时，不恰当地修改会导致所有子类被修改\n4. 缺点：创建父类实例作为子类原型时，可能无法确定构造函数需要的合理参数，这样提供的参数继承给子类没有实际意义，当子类需要这些参数时应该在构造函数中进行初始化和设置\n5. 总结：继承应该是继承方法而不是属性，为子类设置父类实例属性应该是通过在子类构造函数中调用父类构造函数进行初始化\n\n方法2：\n\n1. 优点：正确设置原型链实现继承\n2. 缺点：父类构造函数原型与子类相同。修改子类原型添加方法会修改父类\n\n方法3：\n\n1. 优点：正确设置原型链且避免方法1.2中的缺点\n2. 缺点：ES5方法需要注意兼容性\n\n改进：\n\n1. 所有三种方法应该在子类构造函数中调用父类构造函数实现实例属性初始化\n\n```\nfunction Rect() {\n    Shape.call(this);\n}\n```\n\n\n2. 用新创建的对象替代子类默认原型，设置``Rect.prototype.constructor = Rect;``保证一致性\n3. 第三种方法的polyfill：\n\n```\nfunction create(obj) {\n    if (Object.create) {\n        return Object.create(obj);\n    }\n\n    function f() {};\n    f.prototype = obj;\n    return new f();\n}\n```\n\n## $javascript编程部分\n\n### 请用原生js实现一个函数,给页面制定的任意一个元素添加一个透明遮罩(透明度可变,默认0.2),使这个区域点击无效,要求兼容IE8+及各主流浏览器,遮罩层效果如下图所示:\n![遮罩效果](http://7xsspr.com2.z0.glb.clouddn.com/element-mask.jpg)\n\n```\n<style>\n#target {\n    width: 200px;\n    height: 300px;\n    margin: 40px;\n    background-color: tomato;\n}\n</style>\n\n<div id=\"target\"></div>\n\n<script>\nfunction addMask(elem, opacity) {\n    opacity = opacity || 0.2;\n\n    var rect = elem.getBoundingClientRect();\n    var style = getComputedStyle(elem, null);\n\n    var mask = document.createElement('div');\n    mask.style.position = 'absolute';\n    var marginLeft = parseFloat(style.marginLeft);\n    mask.style.left = (elem.offsetLeft - marginLeft) + 'px';\n    var marginTop = parseFloat(style.marginTop);\n    mask.style.top = (elem.offsetTop - marginTop) + 'px';\n    mask.style.zIndex = 9999;\n    mask.style.opacity = '' + opacity;\n    mask.style.backgroundColor = '#000';\n\n    mask.style.width = (parseFloat(style.marginLeft) +\n        parseFloat(style.marginRight) + rect.width) + 'px';\n    mask.style.height = (parseFloat(style.marginTop) +\n        parseFloat(style.marginBottom) + rect.height) + 'px';\n\n    elem.parentNode.appendChild(mask);\n}\n\nvar target = document.getElementById('target');\naddMask(target);\n\ntarget.addEventListener('click', function () {\n    console.log('click');\n}, false);\n</script>\n```\n\n### 请用代码写出(今天是星期x)其中x表示当天是星期几,如果当天是星期一,输出应该是\"今天是星期一\"\n\n```\nvar days = ['日','一','二','三','四','五','六'];\nvar date = new Date();\n\nconsole.log('今天是星期' + days[date.getDay()]);\n```\n\n### 下面这段代码想要循环延时输出结果0 1 2 3 4,请问输出结果是否正确,如果不正确,请说明为什么,并修改循环内的代码使其输出正确结果\n\n```\nfor (var i = 0; i < 5; ++i) {\n  setTimeout(function () {\n    console.log(i + ' ');\n  }, 100);\n}\n```\n\n不能输出正确结果，因为循环中setTimeout接受的参数函数通过闭包访问变量i。javascript运行环境为单线程，setTimeout注册的函数需要等待线程空闲才能执行，此时for循环已经结束，i值为5.五个定时输出都是5\n修改方法：将setTimeout放在函数立即调用表达式中，将i值作为参数传递给包裹函数，创建新闭包\n\n```\nfor (var i = 0; i < 5; ++i) {\n  (function (i) {\n    setTimeout(function () {\n      console.log(i + ' ');\n    }, 100);\n  }(i));\n}\n```\n\n\n\n### 现有一个Page类,其原型对象上有许多以post开头的方法(如postMsg);另有一拦截函数chekc,只返回ture或false.请设计一个函数,该函数应批量改造原Page的postXXX方法,在保留其原有功能的同时,为每个postXXX方法增加拦截验证功能,当chekc返回true时继续执行原postXXX方法,返回false时不再执行原postXXX方法\n\n```\nfunction Page() {}\n\nPage.prototype = {\n  constructor: Page,\n\n  postA: function (a) {\n    console.log('a:' + a);\n  },\n  postB: function (b) {\n    console.log('b:' + b);\n  },\n  postC: function (c) {\n    console.log('c:' + c);\n  },\n  check: function () {\n    return Math.random() > 0.5;\n  }\n}\n\nfunction checkfy(obj) {\n  for (var key in obj) {\n    if (key.indexOf('post') === 0 && typeof obj[key] === 'function') {\n      (function (key) {\n        var fn = obj[key];\n        obj[key] = function () {\n          if (obj.check()) {\n            fn.apply(obj, arguments);\n          }\n        };\n      }(key));\n    }\n  }\n} // end checkfy()\n\ncheckfy(Page.prototype);\n\nvar obj = new Page();\n\nobj.postA('checkfy');\nobj.postB('checkfy');\nobj.postC('checkfy');\n```\n\n### 完成下面的tool-tip\n![xxx](http://7xsspr.com2.z0.glb.clouddn.com/tip-box.jpg)\n\n### 编写javascript深度克隆函数deepClone\n\n    function deepClone(obj) {\n        var _toString = Object.prototype.toString;\n\n        // null, undefined, non-object, function\n        if (!obj || typeof obj !== 'object') {\n            return obj;\n        }\n\n        // DOM Node\n        if (obj.nodeType && 'cloneNode' in obj) {\n            return obj.cloneNode(true);\n        }\n\n        // Date\n        if (_toString.call(obj) === '[object Date]') {\n            return new Date(obj.getTime());\n        }\n\n        // RegExp\n        if (_toString.call(obj) === '[object RegExp]') {\n            var flags = [];\n            if (obj.global) { flags.push('g'); }\n            if (obj.multiline) { flags.push('m'); }\n            if (obj.ignoreCase) { flags.push('i'); }\n\n            return new RegExp(obj.source, flags.join(''));\n        }\n\n        var result = Array.isArray(obj) ? [] :\n            obj.constructor ? new obj.constructor() : {};\n\n        for (var key in obj ) {\n            result[key] = deepClone(obj[key]);\n        }\n\n        return result;\n    }\n\n    function A() {\n        this.a = a;\n    }\n\n    var a = {\n        name: 'qiu',\n        birth: new Date(),\n        pattern: /qiu/gim,\n        container: document.body,\n        hobbys: ['book', new Date(), /aaa/gim, 111]\n    };\n\n    var c = new A();\n    var b = deepClone(c);\n    console.log(c.a === b.a);\n    console.log(c, b);\n\n### 补充代码,鼠标单击Button1后将Button1移动到Button2的后面\n    <!doctype html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>TEst</title>\n    </head>\n    <body>\n\n    <div>\n       <input type=\"button\" id =\"button1\" value=\"1\" />\n       <input type=\"button\" id =\"button2\" value=\"2\" />\n    </div>\n\n    <script type=\"text/javascript\">\n        var btn1 = document.getElementById('button1');\n        var btn2 = document.getElementById('button2');\n\n        addListener(btn1, 'click', function (event) {\n            btn1.parentNode.insertBefore(btn2, btn1);\n        });\n\n        function addListener(elem, type, handler) {\n            if (elem.addEventListener) {\n                elem.addEventListener(type, handler, false);\n                return handler;\n            } else if (elem.attachEvent) {\n                function wrapper() {\n                    var event = window.event;\n                    event.target = event.srcElement;\n                    handler.call(elem, event);\n                }\n                elem.attachEvent('on' + type, wrapper);\n                return wrapper;\n            }\n        }\n\n    </script>\n    </body>\n    </html>\n\n### 网页中实现一个计算当年还剩多少时间的倒数计时程序,要求网页上实时动态显示\"××年还剩××天××时××分××秒\"\n\n    <!doctype html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>TEst</title>\n    </head>\n    <body>\n\n        <span id=\"target\"></span>\n\n\n    <script type=\"text/javascript\">\n        // 为了简化。每月默认30天\n        function getTimeString() {\n            var start = new Date();\n            var end = new Date(start.getFullYear() + 1, 0, 1);\n            var elapse = Math.floor((end - start) / 1000);\n\n            var seconds = elapse % 60 ;\n            var minutes = Math.floor(elapse / 60) % 60;\n            var hours = Math.floor(elapse / (60 * 60)) % 24;\n            var days = Math.floor(elapse / (60 * 60 * 24)) % 30;\n            var months = Math.floor(elapse / (60 * 60 * 24 * 30)) % 12;\n            var years = Math.floor(elapse / (60 * 60 * 24 * 30 * 12));\n\n            return start.getFullYear() + '年还剩' + years + '年' + months + '月' + days + '日'\n                + hours + '小时' + minutes + '分' + seconds + '秒';\n        }\n\n        function domText(elem, text) {\n            if (text == undefined) {\n\n                if (elem.textContent) {\n                    return elem.textContent;\n                } else if (elem.innerText) {\n                    return elem.innerText;\n                }\n            } else {\n                if (elem.textContent) {\n                    elem.textContent = text;\n                } else if (elem.innerText) {\n                    elem.innerText = text;\n                } else {\n                    elem.innerHTML = text;\n                }\n            }\n        }\n\n        var target = document.getElementById('target');\n\n        setInterval(function () {\n            domText(target, getTimeString());\n        }, 1000)\n    </script>\n\n    </body>\n    </html>\n\n### 完成一个函数,接受数组作为参数,数组元素为整数或者数组,数组元素包含整数或数组,函数返回扁平化后的数组\n如：[1, [2, [ [3, 4], 5], 6]] => [1, 2, 3, 4, 5, 6]\n\n```\n    var data =  [1, [2, [ [3, 4], 5], 6]];\n\n    function flat(data, result) {\n        var i, d, len;\n        for (i = 0, len = data.length; i < len; ++i) {\n            d = data[i];\n            if (typeof d === 'number') {\n                result.push(d);\n            } else {\n                flat(d, result);\n            }\n        }\n    }\n\n    var result = [];\n    flat(data, result);\n\n    console.log(result);\n```\n\n### 如何判断一个对象是否为数组\n如果浏览器支持Array.isArray()可以直接判断否则需进行必要判断\n\n```\n/**\n * 判断一个对象是否是数组，参数不是对象或者不是数组，返回false\n *\n * @param {Object} arg 需要测试是否为数组的对象\n * @return {Boolean} 传入参数是数组返回true，否则返回false\n */\nfunction isArray(arg) {\n    if (typeof arg === 'object') {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n    return false;\n}\n```\n\n### 请评价以下事件监听器代码并给出改进意见\n\n```\nif (window.addEventListener) {\n  var addListener = function (el, type, listener, useCapture) {\n    el.addEventListener(type, listener, useCapture);\n  };\n}\nelse if (document.all) {\n  addListener = function (el, type, listener) {\n    el.attachEvent('on' + type, function () {\n      listener.apply(el);\n    });\n  };\n}\n```\n\n作用：浏览器功能检测实现跨浏览器DOM事件绑定\n\n优点：\n\n1. 测试代码只运行一次，根据浏览器确定绑定方法\n2. 通过``listener.apply(el)``解决IE下监听器this与标准不一致的地方\n3. 在浏览器不支持的情况下提供简单的功能，在标准浏览器中提供捕获功能\n\n缺点：\n\n1. document.all作为IE检测不可靠，应该使用if(el.attachEvent)\n2. addListener在不同浏览器下API不一样\n3. ``listener.apply``使this与标准一致但监听器无法移除\n4. 未解决IE下listener参数event。 target问题\n\n改进:\n\n```\nvar addListener;\n\nif (window.addEventListener) {\n  addListener = function (el, type, listener, useCapture) {\n    el.addEventListener(type, listener, useCapture);\n    return listener;\n  };\n}\nelse if (window.attachEvent) {\n  addListener = function (el, type, listener) {\n    // 标准化this，event，target\n    var wrapper = function () {\n      var event = window.event;\n      event.target = event.srcElement;\n      listener.call(el, event);\n    };\n\n    el.attachEvent('on' + type, wrapper);\n    return wrapper;\n    // 返回wrapper。调用者可以保存，以后remove\n  };\n}\n```\n\n### 如何判断一个对象是否为函数\n\n```\n/**\n * 判断对象是否为函数，如果当前运行环境对可调用对象（如正则表达式）\n * 的typeof返回'function'，采用通用方法，否则采用优化方法\n *\n * @param {Any} arg 需要检测是否为函数的对象\n * @return {boolean} 如果参数是函数，返回true，否则false\n */\nfunction isFunction(arg) {\n    if (arg) {\n        if (typeof (/./) !== 'function') {\n            return typeof arg === 'function';\n        } else {\n            return Object.prototype.toString.call(arg) === '[object Function]';\n        }\n    } // end if\n    return false;\n}\n```\n\n### 编写一个函数接受url中query string为参数,返回解析后的Object,query string使用application/x-www-form-urlencoded编码\n\n```\n/**\n * 解析query string转换为对象，一个key有多个值时生成数组\n *\n * @param {String} query 需要解析的query字符串，开头可以是?，\n * 按照application/x-www-form-urlencoded编码\n * @return {Object} 参数解析后的对象\n */\nfunction parseQuery(query) {\n    var result = {};\n\n    // 如果不是字符串返回空对象\n    if (typeof query !== 'string') {\n        return result;\n    }\n\n    // 去掉字符串开头可能带的?\n    if (query.charAt(0) === '?') {\n        query = query.substring(1);\n    }\n\n    var pairs = query.split('&');\n    var pair;\n    var key, value;\n    var i, len;\n\n    for (i = 0, len = pairs.length; i < len; ++i) {\n        pair = pairs[i].split('=');\n        // application/x-www-form-urlencoded编码会将' '转换为+\n        key = decodeURIComponent(pair[0]).replace(/\\+/g, ' ');\n        value = decodeURIComponent(pair[1]).replace(/\\+/g, ' ');\n\n        // 如果是新key，直接添加\n        if (!(key in result)) {\n            result[key] = value;\n        }\n        // 如果key已经出现一次以上，直接向数组添加value\n        else if (isArray(result[key])) {\n            result[key].push(value);\n        }\n        // key第二次出现，将结果改为数组\n        else {\n            var arr = [result[key]];\n            arr.push(value);\n            result[key] = arr;\n        } // end if-else\n    } // end for\n\n    return result;\n}\n\nfunction isArray(arg) {\n    if (arg && typeof arg === 'object') {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n    return false;\n}\n/**\nconsole.log(parseQuery('sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8'));\n */\n```\n\n### 解析一个完整的url,返回Object包含域与window.location相同\n\n```\n/**\n * 解析一个url并生成window.location对象中包含的域\n * location:\n * {\n *      href: '包含完整的url',\n *      origin: '包含协议到pathname之前的内容',\n *      protocol: 'url使用的协议，包含末尾的:',\n *      username: '用户名', // 暂时不支持\n *      password: '密码',  // 暂时不支持\n *      host: '完整主机名，包含:和端口',\n *      hostname: '主机名，不包含端口'\n *      port: '端口号',\n *      pathname: '服务器上访问资源的路径/开头',\n *      search: 'query string，?开头',\n *      hash: '#开头的fragment identifier'\n * }\n *\n * @param {string} url 需要解析的url\n * @return {Object} 包含url信息的对象\n */\nfunction parseUrl(url) {\n    var result = {};\n    var keys = ['href', 'origin', 'protocol', 'host',\n                'hostname', 'port', 'pathname', 'search', 'hash'];\n    var i, len;\n    var regexp = /(([^:]+:)\\/\\/(([^:\\/\\?#]+)(:\\d+)?))(\\/[^?#]*)?(\\?[^#]*)?(#.*)?/;\n\n    var match = regexp.exec(url);\n\n    if (match) {\n        for (i = keys.length - 1; i >= 0; --i) {\n            result[keys[i]] = match[i] ? match[i] : '';\n        }\n    }\n\n    return result;\n}\n```\n\n### 完成函数getViewportSize返回指定窗口的视口尺寸\n\n```\n/**\n* 查询指定窗口的视口尺寸，如果不指定窗口，查询当前窗口尺寸\n**/\nfunction getViewportSize(w) {\n    w = w || window;\n\n    // IE9及标准浏览器中可使用此标准方法\n    if ('innerHeight' in w) {\n        return {\n            width: w.innerWidth,\n            height: w.innerHeight\n        };\n    }\n\n    var d = w.document;\n    // IE 8及以下浏览器在标准模式下\n    if (document.compatMode === 'CSS1Compat') {\n        return {\n            width: d.documentElement.clientWidth,\n            height: d.documentElement.clientHeight\n        };\n    }\n\n    // IE8及以下浏览器在怪癖模式下\n    return {\n        width: d.body.clientWidth,\n        height: d.body.clientHeight\n    };\n}\n```\n\n### 完成函数getScrollOffset返回窗口滚动条偏移量\n\n    /**\n     * 获取指定window中滚动条的偏移量，如未指定则获取当前window\n     * 滚动条偏移量\n     *\n     * @param {window} w 需要获取滚动条偏移量的窗口\n     * @return {Object} obj.x为水平滚动条偏移量,obj.y为竖直滚动条偏移量\n     */\n    function getScrollOffset(w) {\n        w =  w || window;\n        // 如果是标准浏览器\n        if (w.pageXOffset != null) {\n            return {\n                x: w.pageXOffset,\n                y: w.pageYOffset\n            };\n        }\n\n        // 老版本IE，根据兼容性不同访问不同元素\n        var d = w.document;\n        if (d.compatMode === 'CSS1Compat') {\n            return {\n                x: d.documentElement.scrollLeft,\n                y: d.documentElement.scrollTop\n            }\n        }\n\n        return {\n            x: d.body.scrollLeft,\n            y: d.body.scrollTop\n        };\n    }\n\n\n### 现有一个字符串richText,是一段富文本,需要显示在页面上.有个要求,需要给其中只包含一个img元素的p标签增加一个叫pic的class.请编写代码实现.可以使用jQuery或KISSY.\n\n    function richText(text) {\n        var div = document.createElement('div');\n        div.innerHTML = text;\n        var p = div.getElementsByTagName('p');\n        var i, len;\n\n        for (i = 0, len = p.length; i < len; ++i) {\n            if (p[i].getElementsByTagName('img').length === 1) {\n                p[i].classList.add('pic');\n            }\n        }\n\n        return div.innerHTML;\n    }\n\n### 请实现一个Event类,继承自此类的对象都会拥有两个方法on,off,once和trigger\n\n\n    function Event() {\n        if (!(this instanceof Event)) {\n            return new Event();\n        }\n        this._callbacks = {};\n    }\n    Event.prototype.on = function (type, handler) {\n        this_callbacks = this._callbacks || {};\n        this._callbacks[type] = this.callbacks[type] || [];\n        this._callbacks[type].push(handler);\n\n        return this;\n    };\n\n    Event.prototype.off = function (type, handler) {\n        var list = this._callbacks[type];\n\n        if (list) {\n            for (var i = list.length; i >= 0; --i) {\n                if (list[i] === handler) {\n                    list.splice(i, 1);\n                }\n            }\n        }\n\n        return this;\n    };\n\n    Event.prototype.trigger = function (type, data) {\n        var list = this._callbacks[type];\n\n        if (list) {\n            for (var i = 0, len = list.length; i < len; ++i) {\n                list[i].call(this, data);\n            }\n        }\n    };\n\n    Event.prototype.once = function (type, handler) {\n        var self = this;\n\n        function wrapper() {\n            handler.apply(self, arguments);\n            self.off(type, wrapper);\n        }\n        this.on(type, wrapper);\n        return this;\n    };\n\n### 编写一个函数将列表子元素顺序反转\n\n```\n<ul id=\"target\">\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n</ul>\n\n<script>\n    var target = document.getElementById('target');\n    var i;\n    var frag = document.createDocumentFragment();\n\n    for (i = target.children.length - 1; i &gt;= 0; --i) {\n        frag.appendChild(target.children[i]);\n    }\n    target.appendChild(frag);\n</script>\n```\n\n### 以下函数的作用是?空白区域应该填写什么\n\n```\n// define\n(function (window) {\n    function fn(str) {\n        this.str = str;\n    }\n\n    fn.prototype.format = function () {\n        var arg = __1__;\n        return this.str.replace(__2__, function (a, b) {\n            return arg[b] || '';\n        });\n    };\n\n    window.fn = fn;\n})(window);\n\n// use\n(function () {\n    var t = new fn('<p><a href=\"{0}\">{1}</a><span>{2}</span></p>');\n    console.log(t.format('http://www.alibaba.com', 'Alibaba', 'Welcome'));\n})();\n```\n\ndefine部分定义一个简单的模板类，使用{}作为转义标记，中间的数字表示替换目标，format实参用来替换模板内标记\n横线处填：\n\n1. ``Array.prototype.slice.call(arguments, 0)``\n2. ``/\\{\\s*(\\d+)\\s*\\}/g``\n\n### 编写一个函数实现form的序列化(即将一个表单中的键值序列化为可提交的字符串)\n\n\n    <form id=\"target\">\n        <select name=\"age\">\n            <option value=\"aaa\">aaa</option>\n            <option value=\"bbb\" selected>bbb</option>\n        </select>\n        <select name=\"friends\" multiple>\n            <option value=\"qiu\" selected>qiu</option>\n            <option value=\"de\">de</option>\n            <option value=\"qing\" selected>qing</option>\n        </select>\n        <input name=\"name\" value=\"qiudeqing\">\n        <input type=\"password\" name=\"password\" value=\"11111\">\n        <input type=\"hidden\" name=\"salery\" value=\"3333\">\n        <textarea name=\"description\">description</textarea>\n        <input type=\"checkbox\" name=\"hobby\" checked value=\"football\">Football\n        <input type=\"checkbox\" name=\"hobby\" value=\"basketball\">Basketball\n        <input type=\"radio\" name=\"sex\" checked value=\"Female\">Female\n        <input type=\"radio\" name=\"sex\" value=\"Male\">Male\n    </form>\n\n\n    <script>\n\n    /**\n     * 将一个表单元素序列化为可提交的字符串\n     *\n     * @param {FormElement} form 需要序列化的表单元素\n     * @return {string} 表单序列化后的字符串\n     */\n    function serializeForm(form) {\n      if (!form || form.nodeName.toUpperCase() !== 'FORM') {\n        return;\n      }\n\n      var result = [];\n\n      var i, len;\n      var field, fieldName, fieldType;\n\n      for (i = 0, len = form.length; i < len; ++i) {\n        field = form.elements[i];\n        fieldName = field.name;\n        fieldType = field.type;\n\n        if (field.disabled || !fieldName) {\n          continue;\n        } // enf if\n\n        switch (fieldType) {\n          case 'text':\n          case 'password':\n          case 'hidden':\n          case 'textarea':\n            result.push(encodeURIComponent(fieldName) + '=' +\n                encodeURIComponent(field.value));\n            break;\n\n          case 'radio':\n          case 'checkbox':\n            if (field.checked) {\n              result.push(encodeURIComponent(fieldName) + '=' +\n                encodeURIComponent(field.value));\n            }\n            break;\n\n          case 'select-one':\n          case 'select-multiple':\n            for (var j = 0, jLen = field.options.length; j < jLen; ++j) {\n              if (field.options[j].selected) {\n                result.push(encodeURIComponent(fieldName) + '=' +\n                  encodeURIComponent(field.options[j].value || field.options[j].text));\n              }\n            } // end for\n            break;\n\n          case 'file':\n          case 'submit':\n            break; // 是否处理？\n\n          default:\n            break;\n        } // end switch\n      } // end for\n\n        return result.join('&');\n    }\n\n    var form = document.getElementById('target');\n    console.log(serializeForm(form));\n    </script>\n\n### 使用原生javascript给下面列表中的li节点绑定点击事件,点击时创建一个Object对象,兼容IE和标准浏览器\n\n```\n<ul id=\"nav\">\n    <li><a href=\"http://11111\">111</a></li>\n    <li><a href=\"http://2222\">222</a></li>\n    <li><a href=\"http://333\">333</a></li>\n    <li><a href=\"http://444\">444</a></li>\n</ul>\n\nObject:\n{\n    \"index\": 1,\n    \"name\": \"111\",\n    \"link\": \"http://1111\"\n}\n```\n\nscript:\n\n```\nvar EventUtil = {\n    getEvent: function (event) {\n        return event || window.event;\n    },\n    getTarget: function (event) {\n        return event.target || event.srcElement;\n    },\n    // 返回注册成功的监听器，IE中需要使用返回值来移除监听器\n    on: function (elem, type, handler) {\n        if (elem.addEventListener) {\n            elem.addEventListener(type, handler, false);\n            return handler;\n        } else if (elem.attachEvent) {\n            function wrapper(event) {\n                return handler.call(elem, event);\n            };\n            elem.attachEvent('on' + type, wrapper);\n            return wrapper;\n        }\n    },\n    off: function (elem, type, handler) {\n        if (elem.removeEventListener) {\n            elem.removeEventListener(type, handler, false);\n        } else if (elem.detachEvent) {\n            elem.detachEvent('on' + type, handler);\n        }\n    },\n    preventDefault: function (event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        } else if ('returnValue' in event) {\n            event.returnValue = false;\n        }\n    },\n    stopPropagation: function (event) {\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        } else if ('cancelBubble' in event) {\n            event.cancelBubble = true;\n        }\n    }\n};\nvar DOMUtil = {\n    text: function (elem) {\n        if ('textContent' in elem) {\n            return elem.textContent;\n        } else if ('innerText' in elem) {\n            return elem.innerText;\n        }\n    },\n    prop: function (elem, propName) {\n        return elem.getAttribute(propName);\n    }\n};\n\nvar nav = document.getElementById('nav');\n\nEventUtil.on(nav, 'click', function (event) {\n    var event = EventUtil.getEvent(event);\n    var target = EventUtil.getTarget(event);\n\n    var children = this.children;\n    var i, len;\n    var anchor;\n    var obj = {};\n\n    for (i = 0, len = children.length; i < len; ++i) {\n        if (children[i] === target) {\n            obj.index = i + 1;\n            anchor = target.getElementsByTagName('a')[0];\n            obj.name = DOMUtil.text(anchor);\n            obj.link = DOMUtil.prop(anchor, 'href');\n        }\n    }\n\n    alert('index: ' + obj.index + ' name: ' + obj.name +\n        ' link: ' + obj.link);\n});\n```\n\n### 有一个大数组,var a = ['1', '2', '3', ...];a的长度是100,内容填充随机整数的字符串.请先构造此数组a,然后设计一个算法将其内容去重\n\n```\n    /**\n    * 数组去重\n    **/\n    function normalize(arr) {\n        if (arr && Array.isArray(arr)) {\n            var i, len, map = {};\n            for (i = arr.length; i >= 0; --i) {\n                if (arr[i] in map) {\n                    arr.splice(i, 1);\n                } else {\n                    map[arr[i]] = true;\n                }\n            }\n        }\n        return arr;\n    }\n\n    /**\n    * 用100个随机整数对应的字符串填充数组。\n    **/\n    function fillArray(arr, start, end) {\n        start = start == undefined ? 1 : start;\n        end = end == undefined ?  100 : end;\n\n        if (end <= start) {\n            end = start + 100;\n        }\n\n        var width = end - start;\n        var i;\n        for (i = 100; i >= 1; --i) {\n            arr.push('' + (Math.floor(Math.random() * width) + start));\n        }\n        return arr;\n    }\n\n    var input = [];\n    fillArray(input, 1, 100);\n    input.sort(function (a, b) {\n        return a - b;\n    });\n    console.log(input);\n\n    normalize(input);\n    console.log(input);\n```\n---\n转载自: [https://github.com/qiu-deqing/FE-interview](https://github.com/qiu-deqing/FE-interview)\n","source":"_posts/前端面试题.md","raw":"---\ntitle: 前端面试题\ndate: 2016-05-09 20:56:16\ntags:\n---\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/)*\n**前端面试基础题**\n<!--more-->\n- [FE-interview](#fe-interview)\n  - [$HTML， HTTP，web综合问题](#$html，-http，web综合问题)\n    - [常见排序算法的时间复杂度,空间复杂度](#常见排序算法的时间复杂度空间复杂度)\n    - [前端需要注意哪些SEO](#前端需要注意哪些seo)\n    - [web开发中会话跟踪的方法有哪些](#web开发中会话跟踪的方法有哪些)\n    - [`<img>`的`title`和`alt`有什么区别](#img的title和alt有什么区别)\n    - [doctype是什么,举例常见doctype及特点](#doctype是什么举例常见doctype及特点)\n    - [HTML全局属性(global attribute)有哪些](#html全局属性global-attribute有哪些)\n    - [什么是web语义化,有什么好处](#什么是web语义化有什么好处)\n    - [HTTP method](#http-method)\n    - [从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)](#从浏览器地址栏输入url到显示页面的步骤以http为例)\n    - [HTTP request报文结构是怎样的](#http-request报文结构是怎样的)\n    - [HTTP response报文结构是怎样的](#http-response报文结构是怎样的)\n    - [如何进行网站性能优化](#如何进行网站性能优化)\n    - [什么是渐进增强](#什么是渐进增强)\n    - [HTTP状态码及其含义](#http状态码及其含义)\n  - [$CSS部分](#$css部分)\n    - [CSS选择器有哪些](#css选择器有哪些)\n    - [css sprite是什么,有什么优缺点](#css-sprite是什么有什么优缺点)\n    - [`display: none;`与`visibility: hidden;`的区别](#display-none与visibility-hidden的区别)\n    - [css hack原理及常用hack](#css-hack原理及常用hack)\n    - [specified value,computed value,used value计算方法](#specified-valuecomputed-valueused-value计算方法)\n    - [`link`与`@import`的区别](#link与@import的区别)\n    - [``display: block;``和``display: inline;``的区别](#display-block和display-inline的区别)\n    - [PNG,GIF,JPG的区别及如何选](#pnggifjpg的区别及如何选)\n    - [CSS有哪些继承属性](#css有哪些继承属性)\n    - [IE6浏览器有哪些常见的bug,缺陷或者与标准不一致的地方,如何解决](#ie6浏览器有哪些常见的bug缺陷或者与标准不一致的地方如何解决)\n    - [容器包含若干浮动元素时如何清理(包含)浮动](#容器包含若干浮动元素时如何清理包含浮动)\n    - [什么是FOUC?如何避免](#什么是fouc如何避免)\n    - [如何创建块级格式化上下文(block formatting context),BFC有什么用](#如何创建块级格式化上下文block-formatting-contextbfc有什么用)\n    - [display,float,position的关系](#displayfloatposition的关系)\n    - [外边距折叠(collapsing margins)](#外边距折叠collapsing-margins)\n    - [如何确定一个元素的包含块(containing block)](#如何确定一个元素的包含块containing-block)\n    - [stacking context,布局规则](#stacking-context布局规则)\n    - [如何水平居中一个元素](#如何水平居中一个元素)\n    - [如何竖直居中一个元素](#如何竖直居中一个元素)\n  - [$javascript概念部分](#$javascript概念部分)\n    - [DOM元素e的e.getAttribute(propName)和e.propName有什么区别和联系](#dom元素e的egetattributepropname和epropname有什么区别和联系)\n    - [offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别](#offsetwidthoffsetheightclientwidthclientheight与scrollwidthscrollheight的区别)\n    - [XMLHttpRequest通用属性和方法](#xmlhttprequest通用属性和方法)\n    - [focus/blur与focusin/focusout的区别与联系](#focusblur与focusinfocusout的区别与联系)\n    - [mouseover/mouseout与mouseenter/mouseleave的区别与联系](#mouseovermouseout与mouseentermouseleave的区别与联系)\n    - [sessionStorage,localStorage,cookie区别](#sessionstoragelocalstoragecookie区别)\n    - [javascript跨域通信](#javascript跨域通信)\n    - [javascript有哪几种数据类型](#javascript有哪几种数据类型)\n    - [什么闭包,闭包有什么用](#什么闭包闭包有什么用)\n    - [javascript有哪几种方法定义函数](#javascript有哪几种方法定义函数)\n    - [应用程序存储和离线web应用](#应用程序存储和离线web应用)\n    - [客户端存储localStorage和sessionStorage](#客户端存储localstorage和sessionstorage)\n    - [cookie及其操作](#cookie及其操作)\n    - [javascript有哪些方法定义对象](#javascript有哪些方法定义对象)\n    - [===运算符判断相等的流程是怎样的](#===运算符判断相等的流程是怎样的)\n    - [==运算符判断相等的流程是怎样的](#==运算符判断相等的流程是怎样的)\n    - [对象到字符串的转换步骤](#对象到字符串的转换步骤)\n    - [对象到数字的转换步骤](#对象到数字的转换步骤)\n    - [<,>,<=,>=的比较规则](#==的比较规则)\n    - [+运算符工作流程](#运算符工作流程)\n    - [函数内部arguments变量有哪些特性,有哪些属性,如何将它转换为数组](#函数内部arguments变量有哪些特性有哪些属性如何将它转换为数组)\n    - [DOM事件模型是如何的,编写一个EventUtil工具类实现事件管理兼容](#dom事件模型是如何的编写一个eventutil工具类实现事件管理兼容)\n    - [评价一下三种方法实现继承的优缺点,并改进](#评价一下三种方法实现继承的优缺点并改进)\n  - [$javascript编程部分](#$javascript编程部分)\n    - [请用原生js实现一个函数,给页面制定的任意一个元素添加一个透明遮罩(透明度可变,默认0.2),使这个区域点击无效,要求兼容IE8+及各主流浏览器,遮罩层效果如下图所示:](#请用原生js实现一个函数给页面制定的任意一个元素添加一个透明遮罩透明度可变默认02使这个区域点击无效要求兼容ie8及各主流浏览器遮罩层效果如下图所示)\n    - [请用代码写出(今天是星期x)其中x表示当天是星期几,如果当天是星期一,输出应该是\"今天是星期一\"](#请用代码写出今天是星期x其中x表示当天是星期几如果当天是星期一输出应该是今天是星期一)\n    - [下面这段代码想要循环延时输出结果0 1 2 3 4,请问输出结果是否正确,如果不正确,请说明为什么,并修改循环内的代码使其输出正确结果](#下面这段代码想要循环延时输出结果0-1-2-3-4请问输出结果是否正确如果不正确请说明为什么并修改循环内的代码使其输出正确结果)\n    - [现有一个Page类,其原型对象上有许多以post开头的方法(如postMsg);另有一拦截函数chekc,只返回ture或false.请设计一个函数,该函数应批量改造原Page的postXXX方法,在保留其原有功能的同时,为每个postXXX方法增加拦截验证功能,当chekc返回true时继续执行原postXXX方法,返回false时不再执行原postXXX方法](#现有一个page类其原型对象上有许多以post开头的方法如postmsg另有一拦截函数chekc只返回ture或false请设计一个函数该函数应批量改造原page的postxxx方法在保留其原有功能的同时为每个postxxx方法增加拦截验证功能当chekc返回true时继续执行原postxxx方法返回false时不再执行原postxxx方法)\n    - [完成下面的tool-tip](#完成下面的tool-tip)\n    - [编写javascript深度克隆函数deepClone](#编写javascript深度克隆函数deepclone)\n    - [补充代码,鼠标单击Button1后将Button1移动到Button2的后面](#补充代码鼠标单击button1后将button1移动到button2的后面)\n    - [网页中实现一个计算当年还剩多少时间的倒数计时程序,要求网页上实时动态显示\"××年还剩××天××时××分××秒\"](#网页中实现一个计算当年还剩多少时间的倒数计时程序要求网页上实时动态显示××年还剩××天××时××分××秒)\n    - [完成一个函数,接受数组作为参数,数组元素为整数或者数组,数组元素包含整数或数组,函数返回扁平化后的数组](#完成一个函数接受数组作为参数数组元素为整数或者数组数组元素包含整数或数组函数返回扁平化后的数组)\n    - [如何判断一个对象是否为数组](#如何判断一个对象是否为数组)\n    - [请评价以下事件监听器代码并给出改进意见](#请评价以下事件监听器代码并给出改进意见)\n    - [如何判断一个对象是否为函数](#如何判断一个对象是否为函数)\n    - [编写一个函数接受url中query string为参数,返回解析后的Object,query string使用application/x-www-form-urlencoded编码](#编写一个函数接受url中query-string为参数返回解析后的objectquery-string使用applicationx-www-form-urlencoded编码)\n    - [解析一个完整的url,返回Object包含域与window.location相同](#解析一个完整的url返回object包含域与windowlocation相同)\n    - [完成函数getViewportSize返回指定窗口的视口尺寸](#完成函数getviewportsize返回指定窗口的视口尺寸)\n    - [完成函数getScrollOffset返回窗口滚动条偏移量](#完成函数getscrolloffset返回窗口滚动条偏移量)\n    - [现有一个字符串richText,是一段富文本,需要显示在页面上.有个要求,需要给其中只包含一个img元素的p标签增加一个叫pic的class.请编写代码实现.可以使用jQuery或KISSY.](#现有一个字符串richtext是一段富文本需要显示在页面上有个要求需要给其中只包含一个img元素的p标签增加一个叫pic的class请编写代码实现可以使用jquery或kissy)\n    - [请实现一个Event类,继承自此类的对象都会拥有两个方法on,off,once和trigger](#请实现一个event类继承自此类的对象都会拥有两个方法onoffonce和trigger)\n    - [编写一个函数将列表子元素顺序反转](#编写一个函数将列表子元素顺序反转)\n    - [以下函数的作用是?空白区域应该填写什么](#以下函数的作用是空白区域应该填写什么)\n    - [编写一个函数实现form的序列化(即将一个表单中的键值序列化为可提交的字符串)](#编写一个函数实现form的序列化即将一个表单中的键值序列化为可提交的字符串)\n    - [使用原生javascript给下面列表中的li节点绑定点击事件,点击时创建一个Object对象,兼容IE和标准浏览器](#使用原生javascript给下面列表中的li节点绑定点击事件点击时创建一个object对象兼容ie和标准浏览器)\n    - [有一个大数组,var a = ['1', '2', '3', ...];a的长度是100,内容填充随机整数的字符串.请先构造此数组a,然后设计一个算法将其内容去重](#有一个大数组var-a-=-1-2-3-a的长度是100内容填充随机整数的字符串请先构造此数组a然后设计一个算法将其内容去重)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# FE-interview\n\n个人收集的前端知识点、面试题和答案，参考答案仅代表个人观点，方便复习，目录如下，通过文档内搜索目录可快速定位章节\n\n## $HTML， HTTP，web综合问题\n\n### 常见排序算法的时间复杂度,空间复杂度\n\n![排序算法比较](http://7xsspr.com2.z0.glb.clouddn.com/sort-compare.png)\n\n### 前端需要注意哪些SEO\n\n1. 合理的title、description、keywords：搜索对着三项的权重逐个减小，title值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面title要有所不同；description把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面description有所不同；keywords列举出重要关键词即可\n2. 语义化的HTML代码，符合W3C规范：语义化代码让搜索引擎容易理解网页\n3. 重要内容HTML代码放在最前：搜索引擎抓取HTML顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取\n4. 重要内容不要用js输出：爬虫不会执行js获取内容\n5. 少用iframe：搜索引擎不会抓取iframe中的内容\n6. 非装饰性图片必须加alt\n7. 提高网站速度：网站速度是搜索引擎排序的一个重要指标\n\n### web开发中会话跟踪的方法有哪些\n\n1. cookie\n2. session\n3. url重写\n4. 隐藏input\n5. ip地址\n\n### `<img>`的`title`和`alt`有什么区别\n\n1. `title`是[global attributes](http://www.w3.org/TR/html-markup/global-attributes.html#common.attrs.core)之一，用于为元素提供附加的advisory information。通常当鼠标滑动到元素上的时候显示。\n2. `alt`是`<img>`的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。\n\n### doctype是什么,举例常见doctype及特点\n\n1. `<!doctype>`声明必须处于HTML文档的头部，在`<html>`标签之前，HTML5中不区分大小写\n2. `<!doctype>`声明不是一个HTML标签，是一个用于告诉浏览器当前HTMl版本的指令\n3. 现代浏览器的html布局引擎通过检查doctype决定使用兼容模式还是标准模式对文档进行渲染，一些浏览器有一个接近标准模型。\n3. 在HTML4.01中`<!doctype>`声明指向一个DTD，由于HTML4.01基于SGML，所以DTD指定了标记规则以保证浏览器正确渲染内容\n4. HTML5不基于SGML，所以不用指定DTD\n\n常见dotype：\n\n1. **HTML4.01 strict**：不允许使用表现性、废弃元素（如font）以及frameset。声明：`<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">`\n2. **HTML4.01 Transitional**:允许使用表现性、废弃元素（如font），不允许使用frameset。声明：`<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">`\n3. **HTML4.01 Frameset**:允许表现性元素，废气元素以及frameset。声明：`<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\">`\n4. **XHTML1.0 Strict**:不使用允许表现性、废弃元素以及frameset。文档必须是结构良好的XML文档。声明：``<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">``\n5. **XHTML1.0 Transitional**:允许使用表现性、废弃元素，不允许frameset，文档必须是结构良好的XMl文档。声明： ``<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">``\n6. **XHTML 1.0 Frameset**:允许使用表现性、废弃元素以及frameset，文档必须是结构良好的XML文档。声明：``<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">``\n7. **HTML 5**: `<!doctype html>`\n\n### HTML全局属性(global attribute)有哪些\n\n参考资料：[MDN: html global attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes)或者[W3C HTML global-attributes](http://www.w3.org/TR/html-markup/global-attributes.html#common.attrs.core)\n\n- `accesskey`:设置快捷键，提供快速访问元素如<a href=\"#\" accesskey=\"a\">aaa</a>在windows下的firefox中按``alt + shift + a``可激活元素\n- `class`:为元素设置类标识，多个类名用空格分开，CSS和javascript可通过class属性获取元素\n- `contenteditable`: 指定元素内容是否可编辑\n- `contextmenu`: 自定义鼠标右键弹出菜单内容\n- `data-*`: 为元素增加自定义属性\n- `dir`: 设置元素文本方向\n- `draggable`: 设置元素是否可拖拽\n- `dropzone`: 设置元素拖放类型： copy, move, link\n- `hidden`: 表示一个元素是否与文档。样式上会导致元素不显示，但是不能用这个属性实现样式效果\n- `id`: 元素id，文档内唯一\n- `lang`: 元素内容的的语言\n- `spellcheck`: 是否启动拼写和语法检查\n- `style`: 行内css样式\n- `tabindex`: 设置元素可以获得焦点，通过tab可以导航\n- `title`: 元素相关的建议信息\n- `translate`: 元素和子孙节点内容是否需要本地化\n\n### 什么是web语义化,有什么好处\n\nweb语义化是指通过HTML标记表示页面包含的信息，包含了HTML标签的语义化和css命名的语义化。\nHTML标签的语义化是指：通过使用包含语义的标签（如h1-h6）恰当地表示文档结构\ncss命名的语义化是指：为html标签添加有意义的class，id补充未表达的语义，如[Microformat](http://en.wikipedia.org/wiki/Microformats)通过添加符合规则的class描述信息\n为什么需要语义化：\n\n- 去掉样式后页面呈现清晰的结构\n- 盲人使用读屏器更好地阅读\n- 搜索引擎更好地理解页面，有利于收录\n- 便团队项目的可持续运作及维护\n\n### HTTP method\n\n1. 一台服务器要与HTTP1.1兼容，只要为资源实现**GET**和**HEAD**方法即可\n2. **GET**是最常用的方法，通常用于**请求服务器发送某个资源**。\n3. **HEAD**与GET类似，但**服务器在响应中值返回首部，不返回实体的主体部分**\n4. **PUT**让服务器**用请求的主体部分来创建一个由所请求的URL命名的新文档，或者，如果那个URL已经存在的话，就用干这个主体替代它**\n5. **POST**起初是用来向服务器输入数据的。实际上，通常会用它来支持HTML的表单。表单中填好的数据通常会被送给服务器，然后由服务器将其发送到要去的地方。\n6. **TRACE**会在目的服务器端发起一个环回诊断，最后一站的服务器会弹回一个TRACE响应并在响应主体中携带它收到的原始请求报文。TRACE方法主要用于诊断，用于验证请求是否如愿穿过了请求/响应链。\n7. **OPTIONS**方法请求web服务器告知其支持的各种功能。可以查询服务器支持哪些方法或者对某些特殊资源支持哪些方法。\n8. **DELETE**请求服务器删除请求URL指定的资源\n\n### 从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)\n\n1. 在浏览器地址栏输入URL\n2. 浏览器查看**缓存**，如果请求资源在缓存中并且新鲜，跳转到转码步骤\n    1. 如果资源未缓存，发起新请求\n    2. 如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。\n    3. 检验新鲜通常有两个HTTP头进行控制`Expires`和`Cache-Control`：\n        - HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期\n        - HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间\n3. 浏览器**解析URL**获取协议，主机，端口，path\n4. 浏览器**组装一个HTTP（GET）请求报文**\n5. 浏览器**获取主机ip地址**，过程如下：\n    1. 浏览器缓存\n    2. 本机缓存\n    3. hosts文件\n    4. 路由器缓存\n    5. ISP DNS缓存\n    6. DNS递归查询（可能存在负载均衡导致每次IP不一样）\n6. **打开一个socket与目标IP地址，端口建立TCP链接**，三次握手如下：\n    1. 客户端发送一个TCP的**SYN=1，Seq=X**的包到服务器端口\n    2. 服务器发回**SYN=1， ACK=X+1， Seq=Y**的响应包\n    3. 客户端发送**ACK=Y+1， Seq=Z**\n7. TCP链接建立后**发送HTTP请求**\n8. 服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序\n9. 服务器检查**HTTP请求头是否包含缓存验证信息**如果验证缓存新鲜，返回**304**等对应状态码\n10. 处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作\n11. 服务器将**响应报文通过TCP连接发送回浏览器**\n12. 浏览器接收HTTP响应，然后根据情况选择**关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下**：\n    1. 主动方发送**Fin=1， Ack=Z， Seq= X**报文\n    2. 被动方发送**ACK=X+1， Seq=Z**报文\n    3. 被动方发送**Fin=1， ACK=X， Seq=Y**报文\n    4. 主动方发送**ACK=Y， Seq=X**报文\n13. 浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同\n14. 如果资源可缓存，**进行缓存**\n15. 对响应进行**解码**（例如gzip压缩）\n16. 根据资源类型决定如何处理（假设资源为HTML文档）\n17. **解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本**，这些操作没有严格的先后顺序，以下分别解释\n18. **构建DOM树**：\n    1. **Tokenizing**：根据HTML规范将字符流解析为标记\n    2. **Lexing**：词法分析将标记转换为对象并定义属性和规则\n    3. **DOM construction**：根据HTML标记关系将对象组成DOM树\n19. 解析过程中遇到图片、样式表、js文件，**启动下载**\n20. 构建**CSSOM树**：\n    1. **Tokenizing**：字符流转换为标记流\n    2. **Node**：根据标记创建节点\n    3. **CSSOM**：节点创建CSSOM树\n21. **[根据DOM树和CSSOM树构建渲染树](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction)**:\n    1. 从DOM树的根节点遍历所有**可见节点**，不可见节点包括：1）`script`,`meta`这样本身不可见的标签。2)被css隐藏的节点，如`display: none`\n    2. 对每一个可见节点，找到恰当的CSSOM规则并应用\n    3. 发布可视节点的内容和计算样式\n22. **js解析如下**：\n    1. 浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时**document.readystate为loading**\n    2. HTML解析器遇到**没有async和defer的script时**，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。**同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容**\n    3. 当解析器遇到设置了**async**属性的script时，开始下载脚本并继续解析文档。脚本会在它**下载完成后尽快执行**，但是**解析器不会停下来等它下载**。异步脚本**禁止使用document.write()**，它们可以访问自己script和之前的文档元素\n    4. 当文档完成解析，document.readState变成interactive\n    5. 所有**defer**脚本会**按照在文档出现的顺序执行**，延迟脚本**能访问完整文档树**，禁止使用document.write()\n    6. 浏览器**在Document对象上触发DOMContentLoaded事件**\n    7. 此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些**内容完成载入并且所有异步脚本完成载入和执行**，document.readState变为complete,window触发load事件\n23. **显示页面**（HTML解析过程中会逐步显示页面）\n\n### HTTP request报文结构是怎样的\n[rfc2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html)中进行了定义：\n\n1. 首行是**Request-Line**包括：**请求方法**，**请求URI**，**协议版本**，**CRLF**\n2. 首行之后是若干行**请求头**，包括**general-header**，**request-header**或者**entity-header**，每个一行以CRLF结束\n3. 请求头和消息实体之间有一个**CRLF分隔**\n4. 根据实际请求需要可能包含一个**消息实体**\n一个请求报文例子如下：\n\n```\nGET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1\nHost: www.w3.org\nConnection: keep-alive\nCache-Control: max-age=0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36\nReferer: https://www.google.com.hk/\nAccept-Encoding: gzip,deflate,sdch\nAccept-Language: zh-CN,zh;q=0.8,en;q=0.6\nCookie: authorstyle=yes\nIf-None-Match: \"2cc8-3e3073913b100\"\nIf-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT\n\nname=qiu&age=25\n```\n\n### HTTP response报文结构是怎样的\n\n[rfc2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html)中进行了定义：\n\n1. 首行是状态行包括：**HTTP版本，状态码，状态描述**，后面跟一个CRLF\n2. 首行之后是**若干行响应头**，包括：**通用头部，响应头部，实体头部**\n3. 响应头部和响应实体之间用**一个CRLF空行**分隔\n4. 最后是一个可能的**消息实体**\n响应报文例子如下：\n\n```\nHTTP/1.1 200 OK\nDate: Tue, 08 Jul 2014 05:28:43 GMT\nServer: Apache/2\nLast-Modified: Wed, 01 Sep 2004 13:24:52 GMT\nETag: \"40d7-3e3073913b100\"\nAccept-Ranges: bytes\nContent-Length: 16599\nCache-Control: max-age=21600\nExpires: Tue, 08 Jul 2014 11:28:43 GMT\nP3P: policyref=\"http://www.w3.org/2001/05/P3P/p3p.xml\"\nContent-Type: text/html; charset=iso-8859-1\n\n{\"name\": \"qiu\", \"age\": 25}\n```\n\n### 如何进行网站性能优化\n\n[雅虎Best Practices for Speeding Up Your Web Site](https://developer.yahoo.com/performance/rules.html)：\n\n- content方面\n    1. 减少HTTP请求：合并文件、CSS精灵、inline Image\n    2. 减少DNS查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询\n    3. 避免重定向：多余的中间访问\n    4. 使Ajax可缓存\n    5. 非必须组件延迟加载\n    6. 未来所需组件预加载\n    7. 减少DOM元素数量\n    8. 将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量\n    9. 减少iframe数量\n    10. 不要404\n\n- Server方面\n    1. 使用CDN\n    2. 添加Expires或者Cache-Control响应头\n    3. 对组件使用Gzip压缩\n    4. 配置ETag\n    5. Flush Buffer Early\n    6. Ajax使用GET进行请求\n    7. 避免空src的img标签\n- Cookie方面\n    1. 减小cookie大小\n    2. 引入资源的域名不要包含cookie\n- css方面\n    1. 将样式表放到页面顶部\n    2. 不使用CSS表达式\n    3. 使用<link>不使用@import\n    4. 不使用IE的Filter\n- Javascript方面\n    1. 将脚本放到页面底部\n    2. 将javascript和css从外部引入\n    3. 压缩javascript和css\n    4. 删除不需要的脚本\n    5. 减少DOM访问\n    6. 合理设计事件监听器\n- 图片方面\n    1. 优化图片：根据实际颜色需要选择色深、压缩\n    2. 优化css精灵\n    3. 不要在HTML中拉伸图片\n    4. 保证favicon.ico小并且可缓存\n- 移动方面\n    1. 保证组件小于25k\n    2. Pack Components into a Multipart Document\n\n\n### 什么是渐进增强\n\n渐进增强是指在web设计时强调可访问性、语义化HTML标签、外部样式表和脚本。保证所有人都能访问页面的基本内容和功能同时为高级浏览器和高带宽用户提供更好的用户体验。核心原则如下:\n\n- 所有浏览器都必须能访问基本内容\n- 所有浏览器都必须能使用基本功能\n- 所有内容都包含在语义化标签中\n- 通过外部CSS提供增强的布局\n- 通过非侵入式、外部javascript提供增强功能\n- end-user web browser preferences are respected\n\n### HTTP状态码及其含义\n\n参考[RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)\n\n- 1XX：信息状态码\n    - **100 Continue**：客户端应当继续发送请求。这个临时相应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求万仇向客户端发送一个最终响应\n    - **101 Switching Protocols**：服务器已经理解力客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到Upgrade消息头中定义的那些协议。\n- 2XX：成功状态码\n    - **200 OK**：请求成功，请求所希望的响应头或数据体将随此响应返回\n    - **201 Created**：\n    - **202 Accepted**：\n    - **203 Non-Authoritative Information**：\n    - **204 No Content**：\n    - **205 Reset Content**：\n    - **206 Partial Content**：\n- 3XX：重定向\n    - **300 Multiple Choices**：\n    - **301 Moved Permanently**：\n    - **302 Found**：\n    - **303 See Other**：\n    - **304 Not Modified**：\n    - **305 Use Proxy**：\n    - **306 （unused）**：\n    - **307 Temporary Redirect**：\n- 4XX：客户端错误\n    - **400 Bad Request**:\n    - **401 Unauthorized**:\n    - **402 Payment Required**:\n    - **403 Forbidden**:\n    - **404 Not Found**:\n    - **405 Method Not Allowed**:\n    - **406 Not Acceptable**:\n    - **407 Proxy Authentication Required**:\n    - **408 Request Timeout**:\n    - **409 Conflict**:\n    - **410 Gone**:\n    - **411 Length Required**:\n    - **412 Precondition Failed**:\n    - **413 Request Entity Too Large**:\n    - **414 Request-URI Too Long**:\n    - **415 Unsupported Media Type**:\n    - **416 Requested Range Not Satisfiable**:\n    - **417 Expectation Failed**:\n- 5XX: 服务器错误\n    - **500 Internal Server Error**:\n    - **501 Not Implemented**:\n    - **502 Bad Gateway**:\n    - **503 Service Unavailable**:\n    - **504 Gateway Timeout**:\n    - **505 HTTP Version Not Supported**:\n\n## $CSS部分\n\n### CSS选择器有哪些\n\n1. ***通用选择器**：选择所有元素，**不参与计算优先级**，兼容性IE6+\n2. **#X id选择器**：选择id值为X的元素，兼容性：IE6+\n3. **.X 类选择器**： 选择class包含X的元素，兼容性：IE6+\n4. **X Y后代选择器**： 选择满足X选择器的后代节点中满足Y选择器的元素，兼容性：IE6+\n5. **X 元素选择器**： 选择标所有签为X的元素，兼容性：IE6+\n6. **:link，：visited，：focus，：hover，：active链接状态**： 选择特定状态的链接元素，顺序LoVe HAte，兼容性: IE4+\n7. **X + Y直接兄弟选择器**：在**X之后第一个兄弟节点**中选择满足Y选择器的元素，兼容性： IE7+\n8. **X > Y子选择器**： 选择X的子元素中满足Y选择器的元素，兼容性： IE7+\n9. **X ~ Y兄弟**： 选择**X之后所有兄弟节点**中满足Y选择器的元素，兼容性： IE7+\n10. **[attr]**：选择所有设置了attr属性的元素，兼容性IE7+\n11. **[attr=value]**：选择属性值刚好为value的元素\n12. **[attr~=value]**：选择属性值为空白符分隔，其中一个的值刚好是value的元素\n13. **[attr|=value]**：选择属性值刚好为value或者value-开头的元素\n14. **[attr^=value]**：选择属性值以value开头的元素\n15. **[attr$=value]**：选择属性值以value结尾的元素\n16. **[attr*=value]**：选择属性值中包含value的元素\n17. **[:checked]**：选择单选框，复选框，下拉框中选中状态下的元素，兼容性：IE9+\n18. **X:after, X::after**：after伪元素，选择元素虚拟子元素（元素的最后一个子元素），CSS3中::表示伪元素。兼容性:after为IE8+，::after为IE9+\n18. **:hover**：鼠标移入状态的元素，兼容性a标签IE4+， 所有元素IE7+\n19. **:not(selector)**：选择不符合selector的元素。**不参与计算优先级**，兼容性：IE9+\n20. **::first-letter**：伪元素，选择块元素第一行的第一个字母，兼容性IE5.5+\n21. **::first-line**：伪元素，选择块元素的第一行，兼容性IE5.5+\n22. **:nth-child(an + b)**：伪类，选择前面有an + b - 1个兄弟节点的元素，其中n\n&gt;= 0， 兼容性IE9+\n23. **:nth-last-child(an + b)**：伪类，选择后面有an + b - 1个兄弟节点的元素\n其中n &gt;= 0，兼容性IE9+\n24. **X:nth-of-type(an+b)**：伪类，X为选择器，**解析得到元素标签**，选择**前面**有an + b - 1个**相同标签**兄弟节点的元素。兼容性IE9+\n25. **X:nth-last-of-type(an+b)**：伪类，X为选择器，解析得到元素标签，选择**后面**有an+b-1个相同**标签**兄弟节点的元素。兼容性IE9+\n26. **X:first-child**：伪类，选择满足X选择器的元素，且这个元素是其父节点的第一个子元素。兼容性IE7+\n27. **X:last-child**：伪类，选择满足X选择器的元素，且这个元素是其父节点的最后一个子元素。兼容性IE9+\n28. **X:only-child**：伪类，选择满足X选择器的元素，且这个元素是其父元素的唯一子元素。兼容性IE9+\n29. **X:only-of-type**：伪类，选择X选择的元素，**解析得到元素标签**，如果该元素没有相同类型的兄弟节点时选中它。兼容性IE9+\n30. **X:first-of-type**：伪类，选择X选择的元素，**解析得到元素标签**，如果该元素\n是此此类型元素的第一个兄弟。选中它。兼容性IE9+\n\n\n### css sprite是什么,有什么优缺点\n\n概念：将多个小图片拼接到一个图片中。通过background-position和元素尺寸调节需要显示的背景图案。\n\n优点：\n\n1. 减少HTTP请求数，极大地提高页面加载速度\n2. 增加图片信息重复度，提高压缩比，减少图片大小\n3. 更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现\n\n缺点：\n\n1. 图片合并麻烦\n2. 维护麻烦，修改一个图片可能需要从新布局整个图片，样式\n\n\n### `display: none;`与`visibility: hidden;`的区别\n联系：它们都能让元素不可见\n\n区别：\n\n1. display:none;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；visibility: hidden;不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见\n2. display: none;是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示；visibility: hidden;是继承属性，子孙节点消失由于继承了hidden，通过设置visibility: visible;可以让子孙节点显式\n3. 修改常规流中元素的display通常会造成文档重排。修改visibility属性只会造成本元素的重绘。\n4. 读屏器不会读取display: none;元素内容；会读取visibility: hidden;元素内容\n\n### css hack原理及常用hack\n\n原理：利用**不同浏览器对CSS的支持和解析结果不一样**编写针对特定浏览器样式。常见的hack有1）属性hack。2）选择器hack。3）IE条件注释\n\n- IE条件注释：适用于[IE5, IE9]常见格式如下\n\n```\n<!--[if IE 6]>\nSpecial instructions for IE 6 here\n<![endif]-->\n```\n\n- 选择器hack：不同浏览器对选择器的支持不一样\n\n```\n/***** Selector Hacks ******/\n\n/* IE6 and below */\n* html #uno  { color: red }\n\n/* IE7 */\n*:first-child+html #dos { color: red }\n\n/* IE7, FF, Saf, Opera  */\nhtml>body #tres { color: red }\n\n/* IE8, FF, Saf, Opera (Everything but IE 6,7) */\nhtml>/**/body #cuatro { color: red }\n\n/* Opera 9.27 and below, safari 2 */\nhtml:first-child #cinco { color: red }\n\n/* Safari 2-3 */\nhtml[xmlns*=\"\"] body:last-child #seis { color: red }\n\n/* safari 3+, chrome 1+, opera9+, ff 3.5+ */\nbody:nth-of-type(1) #siete { color: red }\n\n/* safari 3+, chrome 1+, opera9+, ff 3.5+ */\nbody:first-of-type #ocho {  color: red }\n\n/* saf3+, chrome1+ */\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n #diez  { color: red  }\n}\n\n/* iPhone / mobile webkit */\n@media screen and (max-device-width: 480px) {\n #veintiseis { color: red  }\n}\n\n/* Safari 2 - 3.1 */\nhtml[xmlns*=\"\"]:root #trece  { color: red  }\n\n/* Safari 2 - 3.1, Opera 9.25 */\n*|html[xmlns*=\"\"] #catorce { color: red  }\n\n/* Everything but IE6-8 */\n:root *> #quince { color: red  }\n\n/* IE7 */\n*+html #dieciocho {  color: red }\n\n/* Firefox only. 1+ */\n#veinticuatro,  x:-moz-any-link  { color: red }\n\n/* Firefox 3.0+ */\n#veinticinco,  x:-moz-any-link, x:default  { color: red  }\n```\n\n- 属性hack：不同浏览器解析bug或方法\n\n```\n/* IE6 */\n#once { _color: blue }\n\n/* IE6, IE7 */\n#doce { *color: blue; /* or #color: blue */ }\n\n/* Everything but IE6 */\n#diecisiete { color/**/: blue }\n\n/* IE6, IE7, IE8 */\n#diecinueve { color: blue\\9; }\n\n/* IE7, IE8 */\n#veinte { color/*\\**/: blue\\9; }\n\n/* IE6, IE7 -- acts as an !important */\n#veintesiete { color: blue !ie; } /* string after ! can be anything */\n```\n\n### specified value,computed value,used value计算方法\n\n- specified value: 计算方法如下：\n    1. 如果样式表设置了一个值，使用这个值\n    2. 如果没有设置值，这个属性是继承属性，从父元素继承\n    3. 如果没设置，并且不是继承属性，使用css规范指定的初始值\n\n- computed value: 以specified value根据规范定义的行为进行计算，通常将相对值计算为绝对值，例如em根据font-size进行计算。一些使用百分数并且需要布局来决定最终值的属性，如width，margin。百分数就直接作为computed value。line-height的无单位值也直接作为computed value。这些值将在计算used value时得到绝对值。**computed value的主要作用是用于继承**\n\n- used value：属性计算后的最终值，对于大多数属性可以通过window.getComputedStyle获得，尺寸值单位为像素。以下属性依赖于布局，\n    - background-position\n    - bottom, left, right, top\n    - height, width\n    - margin-bottom, margin-left, margin-right, margin-top\n    - min-height, min-width\n    - padding-bottom, padding-left, padding-right, padding-top\n    - text-indent\n\n### `link`与`@import`的区别\n\n1. ``link``是HTML方式， ``@import``是CSS方式\n2. ``link``最大限度支持并行下载，``@import``过多嵌套导致串行下载，出现[FOUC](http://www.bluerobot.com/web/css/fouc.asp/)\n4. ``link``可以通过``rel=\"alternate stylesheet\"``指定候选样式\n5. 浏览器对``link``支持早于``@import``，可以使用``@import``对老浏览器隐藏样式\n6. ``@import``必须在样式规则之前，可以在css文件中引用其他文件\n6. 总体来说：**[link优于@import](http://www.stevesouders.com/blog/2009/04/09/dont-use-import/)**\n\n### ``display: block;``和``display: inline;``的区别\n\n``block``元素特点：\n\n1.处于常规流中时，如果``width``没有设置，会自动填充满父容器\n2.可以应用``margin/padding``\n3.在没有设置高度的情况下会扩展高度以包含常规流中的子元素\n4.处于常规流中时布局时在前后元素位置之间（独占一个水平空间）\n5.忽略``vertical-align``\n\n``inline``元素特点\n\n1.水平方向上根据``direction``依次布局\n2.不会在元素前后进行换行\n3.受``white-space``控制\n4.``margin/padding``在竖直方向上无效，水平方向上有效\n5.``width/height``属性对非替换行内元素无效，宽度由元素内容决定\n6.非替换行内元素的行框高由``line-height``确定，替换行内元素的行框高由``height``,``margin``,``padding``,``border``决定\n6.浮动或绝对定位时会转换为``block``\n7.``vertical-align``属性生效\n\n\n\n### PNG,GIF,JPG的区别及如何选\n参考资料： [选择正确的图片格式](http://www.yuiblog.com/blog/2008/11/04/imageopt-2/)\n**GIF**:\n\n1. 8位像素，256色\n2. 无损压缩\n3. 支持简单动画\n4. 支持boolean透明\n5. 适合简单动画\n\n**JPEG**：\n\n1. 颜色限于256\n2. 有损压缩\n3. 可控制压缩质量\n4. 不支持透明\n5. 适合照片\n\n**PNG**：\n\n1. 有PNG8和truecolor PNG\n2. PNG8类似GIF颜色上限为256，文件小，支持alpha透明度，无动画\n3. 适合图标、背景、按钮\n\n### CSS有哪些继承属性\n\n- 关于文字排版的属性如：\n  +  [font](https://developer.mozilla.org/en-US/docs/Web/CSS/font)\n  +  [word-break](https://developer.mozilla.org/en-US/docs/Web/CSS/word-break)\n  +  [letter-spacing](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing)\n  +  [text-align](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align)\n  +  [text-rendering](https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering)\n  +  [word-spacing](https://developer.mozilla.org/en-US/docs/Web/CSS/word-spacing)\n  +  [white-space](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)\n  +  [text-indent](https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent)\n  +  [text-transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform)\n  +  [text-shadow](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow)\n- [line-height](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height)\n- [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color)\n- [visibility](https://developer.mozilla.org/en-US/docs/Web/CSS/visibility)\n- [cursor](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor)\n\n\n\n### IE6浏览器有哪些常见的bug,缺陷或者与标准不一致的地方,如何解决\n\n- IE6不支持min-height，解决办法使用css hack：\n\n```\n.target {\n    min-height: 100px;\n    height: auto !important;\n    height: 100px;   // IE6下内容高度超过会自动扩展高度\n}\n```\n\n- ``ol``内``li``的序号全为1，不递增。解决方法：为li设置样式``display: list-item;``\n\n- 未定位父元素``overflow: auto;``，包含``position: relative;``子元素，子元素高于父元素时会溢出。解决办法：1）子元素去掉``position: relative;``; 2）不能为子元素去掉定位时，父元素``position: relative;``\n\n```\n<style type=\"text/css\">\n.outer {\n    width: 215px;\n    height: 100px;\n    border: 1px solid red;\n    overflow: auto;\n    position: relative;  /* 修复bug */\n}\n.inner {\n    width: 100px;\n    height: 200px;\n    background-color: purple;\n    position: relative;\n}\n</style>\n\n<div class=\"outer\">\n    <div class=\"inner\"></div>\n</div>\n```\n\n- IE6只支持``a``标签的``:hover``伪类，解决方法：使用js为元素监听mouseenter，mouseleave事件，添加类实现效果：\n\n```\n<style type=\"text/css\">\n.p:hover,\n.hover {\n    background: purple;\n}\n</style>\n\n<p class=\"p\" id=\"target\">aaaa bbbbb<span>DDDDDDDDDDDd</span> aaaa lkjlkjdf j</p>\n\n<script type=\"text/javascript\">\nfunction addClass(elem, cls) {\n    if (elem.className) {\n        elem.className += ' ' + cls;\n    } else {\n        elem.className = cls;\n    }\n}\nfunction removeClass(elem, cls) {\n    var className = ' ' + elem.className + ' ';\n    var reg = new RegExp(' +' + cls + ' +', 'g');\n    elem.className = className.replace(reg, ' ').replace(/^ +| +$/, '');\n}\n\nvar target = document.getElementById('target');\nif (target.attachEvent) {\n    target.attachEvent('onmouseenter', function () {\n        addClass(target, 'hover');\n    });\n    target.attachEvent('onmouseleave', function () {\n        removeClass(target, 'hover');\n    })\n}\n</script>\n```\n\n- IE5-8不支持``opacity``，解决办法：\n\n```\n.opacity {\n    opacity: 0.4\n    filter: alpha(opacity=60); /* for IE5-7 */\n    -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)\"; /* for IE 8*/\n}\n```\n\n- IE6在设置``height``小于``font-size``时高度值为``font-size``，解决办法：``font-size: 0;``\n- IE6不支持PNG透明背景，解决办法: **IE6下使用gif图片**\n- IE6-7不支持``display: inline-block``解决办法：设置inline并触发hasLayout\n\n```\n    display: inline-block;\n    *display: inline;\n    *zoom: 1;\n```\n\n- IE6下浮动元素在浮动方向上与父元素边界接触元素的外边距会加倍。解决办法：\n1）使用padding控制间距。\n2）浮动元素``display: inline;``这样解决问题且无任何副作用：css标准规定浮动元素display:inline会自动调整为block\n- 通过为块级元素设置宽度和左右margin为auto时，IE6不能实现水平居中，解决方法：为父元素设置``text-align: center;``\n\n### 容器包含若干浮动元素时如何清理(包含)浮动\n\n1. 容器元素闭合标签前添加额外元素并设置``clear: both``\n2. 父元素触发块级格式化上下文(见块级可视化上下文部分)\n3. 设置容器元素伪元素进行清理[推荐的清理浮动方法](http://nicolasgallagher.com/micro-clearfix-hack/)\n\n```\n/**\n* 在标准浏览器下使用\n* 1 content内容为空格用于修复opera下文档中出现\n*   contenteditable属性时在清理浮动元素上下的空白\n* 2 使用display使用table而不是block：可以防止容器和\n*   子元素top-margin折叠,这样能使清理效果与BFC，IE6/7\n*   zoom: 1;一致\n**/\n\n.clearfix:before,\n.clearfix:after {\n    content: \" \"; /* 1 */\n    display: table; /* 2 */\n}\n\n.clearfix:after {\n    clear: both;\n}\n\n/**\n* IE 6/7下使用\n* 通过触发hasLayout实现包含浮动\n**/\n.clearfix {\n    *zoom: 1;\n}\n```\n\n### 什么是FOUC?如何避免\nFlash Of Unstyled Content：用户定义样式表加载之前浏览器使用默认样式显示文档，用户样式加载渲染之后再从新显示文档，造成页面闪烁。**解决方法**：把样式表放到文档的`head`\n\n### 如何创建块级格式化上下文(block formatting context),BFC有什么用\n创建规则：\n\n1. 根元素\n2. 浮动元素（``float``不是``none``）\n3. 绝对定位元素（``position``取值为``absolute``或``fixed``）\n4. ``display``取值为``inline-block``,``table-cell``, ``table-caption``,``flex``, ``inline-flex``之一的元素\n5. ``overflow``不是``visible``的元素\n\n\n作用：\n\n1. 可以包含浮动元素\n2. 不被浮动元素覆盖\n3. 阻止父子元素的margin折叠\n\n### display,float,position的关系\n\n1. 如果``display``为none，那么position和float都不起作用，这种情况下元素不产生框\n2. 否则，如果position值为absolute或者fixed，框就是绝对定位的，float的计算值为none，display根据下面的表格进行调整。\n3. 否则，如果float不是none，框是浮动的，display根据下表进行调整\n4. 否则，如果元素是根元素，display根据下表进行调整\n5. 其他情况下display的值为指定值\n总结起来：**绝对定位、浮动、根元素都需要调整``display``**\n![display转换规则](http://7xsspr.com2.z0.glb.clouddn.com/display-adjust.png)\n\n### 外边距折叠(collapsing margins)\n毗邻的两个或多个``margin``会合并成一个margin，叫做外边距折叠。规则如下：\n\n1. 两个或多个毗邻的普通流中的块元素垂直方向上的margin会折叠\n2. 浮动元素/inline-block元素/绝对定位元素的margin不会和垂直方向上的其他元素的margin折叠\n3. 创建了块级格式化上下文的元素，不会和它的子元素发生margin折叠\n4. 元素自身的margin-bottom和margin-top相邻时也会折叠\n\n### 如何确定一个元素的包含块(containing block)\n\n1. 根元素的包含块叫做初始包含块，在连续媒体中他的尺寸与viewport相同并且anchored at the canvas origin；对于paged media，它的尺寸等于page area。初始包含块的direction属性与根元素相同。\n2. ``position``为``relative``或者``static``的元素，它的包含块由最近的块级（``display``为``block``,``list-item``, ``table``）祖先元素的**内容框**组成\n3. 如果元素``position``为``fixed``。对于连续媒体，它的包含块为viewport；对于paged media，包含块为page area\n4. 如果元素``position``为``absolute``，它的包含块由祖先元素中最近一个``position``为``relative``,``absolute``或者``fixed``的元素产生，规则如下：\n    - 如果祖先元素为行内元素，the containing block is the bounding box around the **padding boxes** of the first and the last inline boxes generated for that element.\n    - 其他情况下包含块由祖先节点的**padding edge**组成\n\n    如果找不到定位的祖先元素，包含块为**初始包含块**\n\n### stacking context,布局规则\nz轴上的默认层叠顺序如下（从下到上）：\n\n1. 根元素的边界和背景\n2. 常规流中的元素按照html中顺序\n3. 浮动块\n4. positioned元素按照html中出现顺序\n\n如何创建stacking context：\n\n1. 根元素\n2. z-index不为auto的定位元素\n3. a flex item with a z-index value other than 'auto'\n4. opacity小于1的元素\n5. 在移动端webkit和chrome22+，z-index为auto，position: fixed也将创建新的stacking context\n\n### 如何水平居中一个元素\n- 如果需要居中的元素为**常规流中inline元素**，为父元素设置`text-align: center;`即可实现\n- 如果需要居中的元素为**常规流中block元素**，1）为元素设置宽度，2）设置左右margin为auto。3）IE6下需在父元素上设置`text-align: center;`,再给子元素恢复需要的值\n\n```\n<body>\n    <div class=\"content\">\n    aaaaaa aaaaaa a a a a a a a a\n    </div>\n</body>\n\n<style>\n    body {\n        background: #DDD;\n        text-align: center; /* 3 */\n    }\n    .content {\n        width: 500px;      /* 1 */\n        text-align: left;  /* 3 */\n        margin: 0 auto;    /* 2 */\n\n        background: purple;\n    }\n</style>\n```\n\n- 如果需要居中的元素为**浮动元素**，1）为元素设置宽度，2）`position: relative;`，3）浮动方向偏移量（left或者right）设置为50%，4）浮动方向上的margin设置为元素宽度一半乘以-1\n\n```\n<body>\n    <div class=\"content\">\n    aaaaaa aaaaaa a a a a a a a a\n    </div>\n</body>\n\n<style>\n    body {\n        background: #DDD;\n    }\n    .content {\n        width: 500px;         /* 1 */\n        float: left;\n\n        position: relative;   /* 2 */\n        left: 50%;            /* 3 */\n        margin-left: -250px;  /* 4 */\n\n        background-color: purple;\n    }\n</style>\n```\n\n- 如果需要居中的元素为**绝对定位元素**，1）为元素设置宽度，2）偏移量设置为50%，3）偏移方向外边距设置为元素宽度一半乘以-1\n\n```\n<body>\n    <div class=\"content\">\n    aaaaaa aaaaaa a a a a a a a a\n    </div>\n</body>\n\n<style>\n    body {\n        background: #DDD;\n        position: relative;\n    }\n    .content {\n        width: 800px;\n\n        position: absolute;\n        left: 50%;\n        margin-left: -400px;\n\n        background-color: purple;\n    }\n</style>\n```\n\n- 如果需要居中的元素为**绝对定位元素**，1）为元素设置宽度，2）设置左右偏移量都为0,3）设置左右外边距都为auto\n\n```\n<body>\n    <div class=\"content\">\n    aaaaaa aaaaaa a a a a a a a a\n    </div>\n</body>\n\n<style>\n    body {\n        background: #DDD;\n        position: relative;\n    }\n    .content {\n        width: 800px;\n\n        position: absolute;\n        margin: 0 auto;\n        left: 0;\n        right: 0;\n\n        background-color: purple;\n    }\n</style>\n```\n\n### 如何竖直居中一个元素\n参考资料：[6 Methods For Vertical Centering With CSS](http://www.vanseodesign.com/css/vertical-centering/)。 [盘点8种CSS实现垂直居中](http://blog.csdn.net/freshlover/article/details/11579669)\n\n- 需要居中元素为**单行文本**，为包含文本的元素设置大于`font-size`的`line-height`：\n\n```\n<p class=\"text\">center text</p>\n\n<style>\n.text {\n    line-height: 200px;\n}\n</style>\n```\n\n\n## $javascript概念部分\n\n### DOM元素e的e.getAttribute(propName)和e.propName有什么区别和联系\n\n- e.getAttribute()，是标准DOM操作文档元素属性的方法，具有通用性可在任意文档上使用，返回元素在源文件中**设置的属性**\n- e.propName通常是在HTML文档中访问特定元素的**特性**，浏览器解析元素后生成对应对象（如a标签生成HTMLAnchorElement），这些对象的特性会根据特定规则结合属性设置得到，对于没有对应特性的属性，只能使用getAttribute进行访问\n- e.getAttribute()返回值是源文件中设置的值，类型是字符串或者null（有的实现返回\"\"）\n- e.propName返回值可能是字符串、布尔值、对象、undefined等\n- 大部分attribute与property是一一对应关系，修改其中一个会影响另一个，如id，title等属性\n- 一些布尔属性`<input hidden/>`的检测设置需要hasAttribute和removeAttribute来完成，或者设置对应property\n- 像`<a href=\"../index.html\">link</a>`中href属性，转换成property的时候需要通过转换得到完整URL\n- 一些attribute和property不是一一对应如：form控件中`<input value=\"hello\"/>`对应的是defaultValue，修改或设置value property修改的是控件当前值，setAttribute修改value属性不会改变value property\n\n### offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别\n\n- offsetWidth/offsetHeight返回值包含**content + padding + border**，效果与e.getBoundingClientRect()相同\n- clientWidth/clientHeight返回值只包含**content + padding**，如果有滚动条，也**不包含滚动条**\n- scrollWidth/scrollHeight返回值包含**content + padding + 溢出内容的尺寸**\n\n[Measuring Element Dimension and Location with CSSOM in Windows Internet Explorer 9](http://msdn.microsoft.com/en-us/library/ie/hh781509(v=vs.85).aspx)\n\n![元素尺寸](http://7xsspr.com2.z0.glb.clouddn.com/element-size.png)\n\n### XMLHttpRequest通用属性和方法\n\n1. `readyState`:表示请求状态的整数，取值：\n  - UNSENT（0）：对象已创建\n  - OPENED（1）：open()成功调用，在这个状态下，可以为xhr设置请求头，或者使用send()发送请求\n  - HEADERS_RECEIVED(2)：所有重定向已经自动完成访问，并且最终响应的HTTP头已经收到\n  - LOADING(3)：响应体正在接收\n  - DONE(4)：数据传输完成或者传输产生错误\n3. `onreadystatechange`：readyState改变时调用的函数\n4. `status`：服务器返回的HTTP状态码（如，200， 404）\n5. `statusText`:服务器返回的HTTP状态信息（如，OK，No Content）\n6. `responseText`:作为字符串形式的来自服务器的完整响应\n6. `responseXML`: Document对象，表示服务器的响应解析成的XML文档\n7. `abort()`:取消异步HTTP请求\n8. `getAllResponseHeaders()`: 返回一个字符串，包含响应中服务器发送的全部HTTP报头。每个报头都是一个用冒号分隔开的名/值对，并且使用一个回车/换行来分隔报头行\n9. `getResponseHeader(headerName)`:返回headName对应的报头值\n10. `open(method, url, asynchronous [, user, password])`:初始化准备发送到服务器上的请求。method是HTTP方法，不区分大小写；url是请求发送的相对或绝对URL；asynchronous表示请求是否异步；user和password提供身份验证\n11. `setRequestHeader(name, value)`:设置HTTP报头\n12. `send(body)`:对服务器请求进行初始化。参数body包含请求的主体部分，对于POST请求为键值对字符串；对于GET请求，为null\n\n### focus/blur与focusin/focusout的区别与联系\n\n1. focus/blur不冒泡，focusin/focusout冒泡\n2. focus/blur兼容性好，focusin/focusout在除FireFox外的浏览器下都保持良好兼容性，如需使用事件托管，可考虑在FireFox下使用事件捕获elem.addEventListener('focus', handler, true)\n3. 可获得焦点的元素：\n    1. window\n    2. 链接被点击或键盘操作\n    3. 表单空间被点击或键盘操作\n    4. 设置`tabindex`属性的元素被点击或键盘操作\n\n### mouseover/mouseout与mouseenter/mouseleave的区别与联系\n\n1. mouseover/mouseout是标准事件，**所有浏览器都支持**；mouseenter/mouseleave是IE5.5引入的特有事件后来被DOM3标准采纳，现代标准浏览器也支持\n2. mouseover/mouseout是**冒泡**事件；mouseenter/mouseleave**不冒泡**。需要为**多个元素监听鼠标移入/出事件时，推荐mouseover/mouseout托管，提高性能**\n3. 标准事件模型中event.target表示发生移入/出的元素,**vent.relatedTarget**对应移出/如元素；在老IE中event.srcElement表示发生移入/出的元素，**event.toElement**表示移出的目标元素，**event.fromElement**表示移入时的来源元素\n\n例子：鼠标从div#target元素移出时进行处理，判断逻辑如下：\n\n    <div id=\"target\"><span>test</span></div>\n\n    <script type=\"text/javascript\">\n    var target = document.getElementById('target');\n    if (target.addEventListener) {\n      target.addEventListener('mouseout', mouseoutHandler, false);\n    } else if (target.attachEvent) {\n      target.attachEvent('onmouseout', mouseoutHandler);\n    }\n\n    function mouseoutHandler(e) {\n      e = e || window.event;\n      var target = e.target || e.srcElement;\n\n      // 判断移出鼠标的元素是否为目标元素\n      if (target.id !== 'target') {\n        return;\n      }\n\n      // 判断鼠标是移出元素还是移到子元素\n      var relatedTarget = event.relatedTarget || e.toElement;\n      while (relatedTarget !== target\n        && relatedTarget.nodeName.toUpperCase() !== 'BODY') {\n        relatedTarget = relatedTarget.parentNode;\n      }\n\n      // 如果相等，说明鼠标在元素内部移动\n      if (relatedTarget === target) {\n        return;\n      }\n\n      // 执行需要操作\n      //alert('鼠标移出');\n\n    }\n    </script>\n\n### sessionStorage,localStorage,cookie区别\n\n1. 都会在浏览器端保存，有大小限制，同源限制\n2. cookie会在请求时发送到服务器，作为会话标识，服务器可修改cookie；web storage不会发送到服务器\n3. cookie有path概念，子路径可以访问父路径cookie，父路径不能访问子路径cookie\n4. 有效期：cookie在设置的有效期内有效，默认为浏览器关闭；sessionStorage在窗口关闭前有效，localStorage长期有效，直到用户删除\n5. 共享：sessionStorage不能共享，localStorage在同源文档之间共享，cookie在同源且符合path规则的文档之间共享\n6. localStorage的修改会促发其他文档窗口的update事件\n7. cookie有secure属性要求HTTPS传输\n8. 浏览器不能保存超过300个cookie，单个服务器不能超过20个，每个cookie不能超过4k。web storage大小支持能达到5M\n\n### javascript跨域通信\n同源：两个文档同源需满足\n\n1. 协议相同\n2. 域名相同\n3. 端口相同\n\n跨域通信：js进行DOM操作、通信时如果目标与当前窗口不满足同源条件，浏览器为了安全会阻止跨域操作。跨域通信通常有以下方法\n\n- 如果是log之类的简单**单项通信**，新建``<img>``,``<script>``,``<link>``,``<iframe>``元素，通过src，href属性设置为目标url。实现跨域请求\n- 如果请求**json数据**，使用``<script>``进行jsonp请求\n- 现代浏览器中**多窗口通信**使用HTML5规范的targetWindow.postMessage(data, origin);其中data是需要发送的对象，origin是目标窗口的origin。window.addEventListener('message', handler, false);handler的event.data是postMessage发送来的数据，event.origin是发送窗口的origin，event.source是发送消息的窗口引用\n- 内部服务器代理请求跨域url，然后返回数据\n- 跨域请求数据，现代浏览器可使用HTML5规范的CORS功能，只要目标服务器返回HTTP头部**``Access-Control-Allow-Origin: *``**即可像普通ajax一样访问跨域资源\n\n### javascript有哪几种数据类型\n六种基本数据类型\n\n- undefined\n- null\n- string\n- boolean\n- number\n- [symbol](https://developer.mozilla.org/en-US/docs/Glossary/Symbol)(ES6)\n\n一种引用类型\n\n- Object\n\n### 什么闭包,闭包有什么用\n**闭包是在某个作用域内定义的函数，它可以访问这个作用域内的所有变量**。闭包作用域链通常包括三个部分：\n\n1. 函数本身作用域。\n2. 闭包定义时的作用域。\n3. 全局作用域。\n\n闭包常见用途：\n\n1. 创建特权方法用于访问控制\n2. 事件处理程序及回调\n\n### javascript有哪几种方法定义函数\n\n1. [函数声明表达式](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)\n2. [function操作符](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function)\n3. [Function 构造函数](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)\n4. [ES6:arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions)\n\n重要参考资料：[MDN:Functions_and_function_scope](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope)\n\n### 应用程序存储和离线web应用\nHTML5新增应用程序缓存，允许web应用将应用程序自身保存到用户浏览器中，用户离线状态也能访问。\n1.为html元素设置manifest属性:``<html manifest=\"myapp.appcache\">``，其中后缀名只是一个约定，真正识别方式是通过``text/cache-manifest``作为MIME类型。所以需要配置服务器保证设置正确\n2.manifest文件首行为``CACHE MANIFEST``，其余就是要缓存的URL列表，每个一行，相对路径都相对于manifest文件的url。注释以#开头\n3.url分为三种类型：``CACHE``:为默认类型。``NETWORK``：表示资源从不缓存。 ``FALLBACK``:每行包含两个url，第二个URL是指需要加载和存储在缓存中的资源， 第一个URL是一个前缀。任何匹配该前缀的URL都不会缓存，如果从网络中载入这样的URL失败的话，就会用第二个URL指定的缓存资源来替代。以下是一个文件例子：\n\n```\nCACHE MANIFEST\n\nCACHE:\nmyapp.html\nmyapp.css\nmyapp.js\n\nFALLBACK:\nvideos/ offline_help.html\n\nNETWORK:\ncgi/\n```\n\n### 客户端存储localStorage和sessionStorage\n\n- localStorage有效期为永久，sessionStorage有效期为顶层窗口关闭前\n- 同源文档可以读取并修改localStorage数据，sessionStorage只允许同一个窗口下的文档访问，如通过iframe引入的同源文档。\n- Storage对象通常被当做普通javascript对象使用：**通过设置属性来存取字符串值**，也可以通过**setItem(key, value)设置**，**getItem(key)读取**，**removeItem(key)删除**，**clear()删除所有数据**，**length表示已存储的数据项数目**，**key(index)返回对应索引的key**\n\n```\nlocalStorage.setItem('x', 1); // storge x->1\nlocalStorage.getItem('x); // return value of x\n\n// 枚举所有存储的键值对\nfor (var i = 0, len = localStorage.length; i < len; ++i ) {\n    var name = localStorage.key(i);\n    var value = localStorage.getItem(name);\n}\n\nlocalStorage.removeItem('x'); // remove x\nlocalStorage.clear();  // remove all data\n```\n\n### cookie及其操作\n\n- cookie是web浏览器存储的少量数据，最早设计为服务器端使用，作为HTTP协议的扩展实现。cookie数据会自动在浏览器和服务器之间传输。\n- 通过读写cookie检测是否支持\n- cookie属性有**名**，**值**，**max-age**，**path**, **domain**，**secure**；\n- cookie默认有效期为浏览器会话，一旦用户关闭浏览器，数据就丢失，通过设置**max-age=seconds**属性告诉浏览器cookie有效期\n- cookie作用域通过**文档源**和**文档路径**来确定，通过**path**和**domain**进行配置，web页面同目录或子目录文档都可访问\n- 通过cookie保存数据的方法为：为document.cookie设置一个符合目标的字符串如下\n- 读取document.cookie获得'; '分隔的字符串，key=value,解析得到结果\n\n```\ndocument.cookie = 'name=qiu; max-age=9999; path=/; domain=domain; secure';\n\ndocument.cookie = 'name=aaa; path=/; domain=domain; secure';\n// 要改变cookie的值，需要使用相同的名字、路径和域，新的值\n// 来设置cookie，同样的方法可以用来改变有效期\n\n// 设置max-age为0可以删除指定cookie\n\n//读取cookie，访问document.cookie返回键值对组成的字符串，\n//不同键值对之间用'; '分隔。通过解析获得需要的值\n```\n\n[cookieUtil.js](https://github.com/qiu-deqing/google/blob/master/module/js/cookieUtil.js)：自己写的cookie操作工具\n\n### javascript有哪些方法定义对象\n\n1. 对象字面量： `var obj = {};`\n2. 构造函数： `var obj = new Object();`\n3. Object.create(): `var obj = Object.create(Object.prototype);`\n\n### ===运算符判断相等的流程是怎样的\n\n1. 如果两个值不是相同类型，它们不相等\n2. 如果两个值都是null或者都是undefined，它们相等\n3. 如果两个值都是布尔类型true或者都是false，它们相等\n4. 如果其中有一个是**NaN**，它们不相等\n5. 如果都是数值型并且数值相等，他们相等， -0等于0\n6. 如果他们都是字符串并且在相同位置包含相同的16位值，他它们相等；如果在长度或者内容上不等，它们不相等；两个字符串显示结果相同但是编码不同==和===都认为他们不相等\n7. 如果他们指向相同对象、数组、函数，它们相等；如果指向不同对象，他们不相等\n\n### ==运算符判断相等的流程是怎样的\n\n1. 如果两个值类型相同，按照===比较方法进行比较\n2. 如果类型不同，使用如下规则进行比较\n  1. 如果其中一个值是null，另一个是undefined，它们相等\n  2. 如果一个值是**数字**另一个是**字符串**，将**字符串转换为数字**进行比较\n  3. 如果有布尔类型，将**true转换为1，false转换为0**，然后用==规则继续比较\n  4. 如果一个值是对象，另一个是数字或字符串，将对象转换为原始值然后用==规则继续比较\n  5. **其他所有情况都认为不相等**\n\n### 对象到字符串的转换步骤\n\n1. 如果对象有toString()方法，javascript调用它。如果返回一个原始值（primitive value如：string number boolean）,将这个值转换为字符串作为结果\n2. 如果对象没有toString()方法或者返回值不是原始值，javascript寻找对象的valueOf()方法，如果存在就调用它，返回结果是原始值则转为字符串作为结果\n3. 否则，javascript不能从toString()或者valueOf()获得一个原始值，此时throws a TypeError\n\n\n### 对象到数字的转换步骤\n\n    1. 如果对象有valueOf()方法并且返回元素值，javascript将返回值转换为数字作为结果\n    2. 否则，如果对象有toString()并且返回原始值，javascript将返回结果转换为数字作为结果\n    3. 否则，throws a TypeError\n\n### <,>,<=,>=的比较规则\n\n所有比较运算符都支持任意类型，但是**比较只支持数字和字符串**，所以需要执行必要的转换然后进行比较，转换规则如下:\n1. 如果操作数是对象，转换为原始值：如果valueOf方法返回原始值，则使用这个值，否则使用toString方法的结果，如果转换失败则报错\n2. 经过必要的对象到原始值的转换后，如果两个操作数都是字符串，按照字母顺序进行比较（他们的16位unicode值的大小）\n3. 否则，如果有一个操作数不是字符串，**将两个操作数转换为数字**进行比较\n\n### +运算符工作流程\n1. 如果有操作数是对象，转换为原始值\n2. 此时如果有**一个操作数是字符串**，其他的操作数都转换为字符串并执行连接\n3. 否则：**所有操作数都转换为数字并执行加法**\n\n### 函数内部arguments变量有哪些特性,有哪些属性,如何将它转换为数组\n\n- arguments所有函数中都包含的一个局部变量，是一个类数组对象，对应函数调用时的实参。如果函数定义同名参数会在调用时覆盖默认对象\n- arguments[index]分别对应函数调用时的实参，并且通过arguments修改实参时会同时修改实参\n- arguments.length为实参的个数（Function.length表示形参长度）\n- arguments.callee为当前正在执行的函数本身，使用这个属性进行递归调用时需注意this的变化\n- arguments.caller为调用当前函数的函数（已被遗弃）\n- 转换为数组：<code>var args = Array.prototype.slice.call(arguments, 0);</code>\n\n### DOM事件模型是如何的,编写一个EventUtil工具类实现事件管理兼容\n\n- DOM事件包含捕获（capture）和冒泡（bubble）两个阶段：捕获阶段事件从window开始触发事件然后通过祖先节点一次传递到触发事件的DOM元素上；冒泡阶段事件从初始元素依次向祖先节点传递直到window\n- 标准事件监听elem.addEventListener(type, handler, capture)/elem.removeEventListener(type, handler, capture)：handler接收保存事件信息的event对象作为参数，event.target为触发事件的对象，handler调用上下文this为绑定监听器的对象，event.preventDefault()取消事件默认行为，event.stopPropagation()/event.stopImmediatePropagation()取消事件传递\n- 老版本IE事件监听elem.attachEvent('on'+type, handler)/elem.detachEvent('on'+type, handler)：handler不接收event作为参数，事件信息保存在window.event中，触发事件的对象为event.srcElement，handler执行上下文this为window使用闭包中调用handler.call(elem, event)可模仿标准模型，然后返回闭包，保证了监听器的移除。event.returnValue为false时取消事件默认行为，event.cancleBubble为true时取消时间传播\n- 通常利用事件冒泡机制托管事件处理程序提高程序性能。\n\n```\n/**\n * 跨浏览器事件处理工具。只支持冒泡。不支持捕获\n * @author  (qiu_deqing@126.com)\n */\n\nvar EventUtil = {\n    getEvent: function (event) {\n        return event || window.event;\n    },\n    getTarget: function (event) {\n        return event.target || event.srcElement;\n    },\n    // 返回注册成功的监听器，IE中需要使用返回值来移除监听器\n    on: function (elem, type, handler) {\n        if (elem.addEventListener) {\n            elem.addEventListener(type, handler, false);\n            return handler;\n        } else if (elem.attachEvent) {\n            var wrapper = function () {\n              var event = window.event;\n              event.target = event.srcElement;\n              handler.call(elem, event);\n            };\n            elem.attachEvent('on' + type, wrapper);\n            return wrapper;\n        }\n    },\n    off: function (elem, type, handler) {\n        if (elem.removeEventListener) {\n            elem.removeEventListener(type, handler, false);\n        } else if (elem.detachEvent) {\n            elem.detachEvent('on' + type, handler);\n        }\n    },\n    preventDefault: function (event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        } else if ('returnValue' in event) {\n            event.returnValue = false;\n        }\n    },\n    stopPropagation: function (event) {\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        } else if ('cancelBubble' in event) {\n            event.cancelBubble = true;\n        }\n    },\n    /**\n     * keypress事件跨浏览器获取输入字符\n     * 某些浏览器在一些特殊键上也触发keypress，此时返回null\n     **/\n     getChar: function (event) {\n        if (event.which == null) {\n            return String.fromCharCode(event.keyCode);  // IE\n        }\n        else if (event.which != 0 && event.charCode != 0) {\n            return String.fromCharCode(event.which);    // the rest\n        }\n        else {\n            return null;    // special key\n        }\n     }\n};\n```\n\n### 评价一下三种方法实现继承的优缺点,并改进\n\n```\nfunction Shape() {}\n\nfunction Rect() {}\n\n// 方法1\nRect.prototype = new Shape();\n\n// 方法2\nRect.prototype = Shape.prototype;\n\n// 方法3\nRect.prototype = Object.create(Shape.prototype);\n\nRect.prototype.area = function () {\n  // do something\n};\n```\n\n方法1：\n\n1. 优点：正确设置原型链实现继承\n2. 优点：父类实例属性得到继承，原型链查找效率提高，也能为一些属性提供合理的默认值\n3. 缺点：父类实例属性为引用类型时，不恰当地修改会导致所有子类被修改\n4. 缺点：创建父类实例作为子类原型时，可能无法确定构造函数需要的合理参数，这样提供的参数继承给子类没有实际意义，当子类需要这些参数时应该在构造函数中进行初始化和设置\n5. 总结：继承应该是继承方法而不是属性，为子类设置父类实例属性应该是通过在子类构造函数中调用父类构造函数进行初始化\n\n方法2：\n\n1. 优点：正确设置原型链实现继承\n2. 缺点：父类构造函数原型与子类相同。修改子类原型添加方法会修改父类\n\n方法3：\n\n1. 优点：正确设置原型链且避免方法1.2中的缺点\n2. 缺点：ES5方法需要注意兼容性\n\n改进：\n\n1. 所有三种方法应该在子类构造函数中调用父类构造函数实现实例属性初始化\n\n```\nfunction Rect() {\n    Shape.call(this);\n}\n```\n\n\n2. 用新创建的对象替代子类默认原型，设置``Rect.prototype.constructor = Rect;``保证一致性\n3. 第三种方法的polyfill：\n\n```\nfunction create(obj) {\n    if (Object.create) {\n        return Object.create(obj);\n    }\n\n    function f() {};\n    f.prototype = obj;\n    return new f();\n}\n```\n\n## $javascript编程部分\n\n### 请用原生js实现一个函数,给页面制定的任意一个元素添加一个透明遮罩(透明度可变,默认0.2),使这个区域点击无效,要求兼容IE8+及各主流浏览器,遮罩层效果如下图所示:\n![遮罩效果](http://7xsspr.com2.z0.glb.clouddn.com/element-mask.jpg)\n\n```\n<style>\n#target {\n    width: 200px;\n    height: 300px;\n    margin: 40px;\n    background-color: tomato;\n}\n</style>\n\n<div id=\"target\"></div>\n\n<script>\nfunction addMask(elem, opacity) {\n    opacity = opacity || 0.2;\n\n    var rect = elem.getBoundingClientRect();\n    var style = getComputedStyle(elem, null);\n\n    var mask = document.createElement('div');\n    mask.style.position = 'absolute';\n    var marginLeft = parseFloat(style.marginLeft);\n    mask.style.left = (elem.offsetLeft - marginLeft) + 'px';\n    var marginTop = parseFloat(style.marginTop);\n    mask.style.top = (elem.offsetTop - marginTop) + 'px';\n    mask.style.zIndex = 9999;\n    mask.style.opacity = '' + opacity;\n    mask.style.backgroundColor = '#000';\n\n    mask.style.width = (parseFloat(style.marginLeft) +\n        parseFloat(style.marginRight) + rect.width) + 'px';\n    mask.style.height = (parseFloat(style.marginTop) +\n        parseFloat(style.marginBottom) + rect.height) + 'px';\n\n    elem.parentNode.appendChild(mask);\n}\n\nvar target = document.getElementById('target');\naddMask(target);\n\ntarget.addEventListener('click', function () {\n    console.log('click');\n}, false);\n</script>\n```\n\n### 请用代码写出(今天是星期x)其中x表示当天是星期几,如果当天是星期一,输出应该是\"今天是星期一\"\n\n```\nvar days = ['日','一','二','三','四','五','六'];\nvar date = new Date();\n\nconsole.log('今天是星期' + days[date.getDay()]);\n```\n\n### 下面这段代码想要循环延时输出结果0 1 2 3 4,请问输出结果是否正确,如果不正确,请说明为什么,并修改循环内的代码使其输出正确结果\n\n```\nfor (var i = 0; i < 5; ++i) {\n  setTimeout(function () {\n    console.log(i + ' ');\n  }, 100);\n}\n```\n\n不能输出正确结果，因为循环中setTimeout接受的参数函数通过闭包访问变量i。javascript运行环境为单线程，setTimeout注册的函数需要等待线程空闲才能执行，此时for循环已经结束，i值为5.五个定时输出都是5\n修改方法：将setTimeout放在函数立即调用表达式中，将i值作为参数传递给包裹函数，创建新闭包\n\n```\nfor (var i = 0; i < 5; ++i) {\n  (function (i) {\n    setTimeout(function () {\n      console.log(i + ' ');\n    }, 100);\n  }(i));\n}\n```\n\n\n\n### 现有一个Page类,其原型对象上有许多以post开头的方法(如postMsg);另有一拦截函数chekc,只返回ture或false.请设计一个函数,该函数应批量改造原Page的postXXX方法,在保留其原有功能的同时,为每个postXXX方法增加拦截验证功能,当chekc返回true时继续执行原postXXX方法,返回false时不再执行原postXXX方法\n\n```\nfunction Page() {}\n\nPage.prototype = {\n  constructor: Page,\n\n  postA: function (a) {\n    console.log('a:' + a);\n  },\n  postB: function (b) {\n    console.log('b:' + b);\n  },\n  postC: function (c) {\n    console.log('c:' + c);\n  },\n  check: function () {\n    return Math.random() > 0.5;\n  }\n}\n\nfunction checkfy(obj) {\n  for (var key in obj) {\n    if (key.indexOf('post') === 0 && typeof obj[key] === 'function') {\n      (function (key) {\n        var fn = obj[key];\n        obj[key] = function () {\n          if (obj.check()) {\n            fn.apply(obj, arguments);\n          }\n        };\n      }(key));\n    }\n  }\n} // end checkfy()\n\ncheckfy(Page.prototype);\n\nvar obj = new Page();\n\nobj.postA('checkfy');\nobj.postB('checkfy');\nobj.postC('checkfy');\n```\n\n### 完成下面的tool-tip\n![xxx](http://7xsspr.com2.z0.glb.clouddn.com/tip-box.jpg)\n\n### 编写javascript深度克隆函数deepClone\n\n    function deepClone(obj) {\n        var _toString = Object.prototype.toString;\n\n        // null, undefined, non-object, function\n        if (!obj || typeof obj !== 'object') {\n            return obj;\n        }\n\n        // DOM Node\n        if (obj.nodeType && 'cloneNode' in obj) {\n            return obj.cloneNode(true);\n        }\n\n        // Date\n        if (_toString.call(obj) === '[object Date]') {\n            return new Date(obj.getTime());\n        }\n\n        // RegExp\n        if (_toString.call(obj) === '[object RegExp]') {\n            var flags = [];\n            if (obj.global) { flags.push('g'); }\n            if (obj.multiline) { flags.push('m'); }\n            if (obj.ignoreCase) { flags.push('i'); }\n\n            return new RegExp(obj.source, flags.join(''));\n        }\n\n        var result = Array.isArray(obj) ? [] :\n            obj.constructor ? new obj.constructor() : {};\n\n        for (var key in obj ) {\n            result[key] = deepClone(obj[key]);\n        }\n\n        return result;\n    }\n\n    function A() {\n        this.a = a;\n    }\n\n    var a = {\n        name: 'qiu',\n        birth: new Date(),\n        pattern: /qiu/gim,\n        container: document.body,\n        hobbys: ['book', new Date(), /aaa/gim, 111]\n    };\n\n    var c = new A();\n    var b = deepClone(c);\n    console.log(c.a === b.a);\n    console.log(c, b);\n\n### 补充代码,鼠标单击Button1后将Button1移动到Button2的后面\n    <!doctype html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>TEst</title>\n    </head>\n    <body>\n\n    <div>\n       <input type=\"button\" id =\"button1\" value=\"1\" />\n       <input type=\"button\" id =\"button2\" value=\"2\" />\n    </div>\n\n    <script type=\"text/javascript\">\n        var btn1 = document.getElementById('button1');\n        var btn2 = document.getElementById('button2');\n\n        addListener(btn1, 'click', function (event) {\n            btn1.parentNode.insertBefore(btn2, btn1);\n        });\n\n        function addListener(elem, type, handler) {\n            if (elem.addEventListener) {\n                elem.addEventListener(type, handler, false);\n                return handler;\n            } else if (elem.attachEvent) {\n                function wrapper() {\n                    var event = window.event;\n                    event.target = event.srcElement;\n                    handler.call(elem, event);\n                }\n                elem.attachEvent('on' + type, wrapper);\n                return wrapper;\n            }\n        }\n\n    </script>\n    </body>\n    </html>\n\n### 网页中实现一个计算当年还剩多少时间的倒数计时程序,要求网页上实时动态显示\"××年还剩××天××时××分××秒\"\n\n    <!doctype html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>TEst</title>\n    </head>\n    <body>\n\n        <span id=\"target\"></span>\n\n\n    <script type=\"text/javascript\">\n        // 为了简化。每月默认30天\n        function getTimeString() {\n            var start = new Date();\n            var end = new Date(start.getFullYear() + 1, 0, 1);\n            var elapse = Math.floor((end - start) / 1000);\n\n            var seconds = elapse % 60 ;\n            var minutes = Math.floor(elapse / 60) % 60;\n            var hours = Math.floor(elapse / (60 * 60)) % 24;\n            var days = Math.floor(elapse / (60 * 60 * 24)) % 30;\n            var months = Math.floor(elapse / (60 * 60 * 24 * 30)) % 12;\n            var years = Math.floor(elapse / (60 * 60 * 24 * 30 * 12));\n\n            return start.getFullYear() + '年还剩' + years + '年' + months + '月' + days + '日'\n                + hours + '小时' + minutes + '分' + seconds + '秒';\n        }\n\n        function domText(elem, text) {\n            if (text == undefined) {\n\n                if (elem.textContent) {\n                    return elem.textContent;\n                } else if (elem.innerText) {\n                    return elem.innerText;\n                }\n            } else {\n                if (elem.textContent) {\n                    elem.textContent = text;\n                } else if (elem.innerText) {\n                    elem.innerText = text;\n                } else {\n                    elem.innerHTML = text;\n                }\n            }\n        }\n\n        var target = document.getElementById('target');\n\n        setInterval(function () {\n            domText(target, getTimeString());\n        }, 1000)\n    </script>\n\n    </body>\n    </html>\n\n### 完成一个函数,接受数组作为参数,数组元素为整数或者数组,数组元素包含整数或数组,函数返回扁平化后的数组\n如：[1, [2, [ [3, 4], 5], 6]] => [1, 2, 3, 4, 5, 6]\n\n```\n    var data =  [1, [2, [ [3, 4], 5], 6]];\n\n    function flat(data, result) {\n        var i, d, len;\n        for (i = 0, len = data.length; i < len; ++i) {\n            d = data[i];\n            if (typeof d === 'number') {\n                result.push(d);\n            } else {\n                flat(d, result);\n            }\n        }\n    }\n\n    var result = [];\n    flat(data, result);\n\n    console.log(result);\n```\n\n### 如何判断一个对象是否为数组\n如果浏览器支持Array.isArray()可以直接判断否则需进行必要判断\n\n```\n/**\n * 判断一个对象是否是数组，参数不是对象或者不是数组，返回false\n *\n * @param {Object} arg 需要测试是否为数组的对象\n * @return {Boolean} 传入参数是数组返回true，否则返回false\n */\nfunction isArray(arg) {\n    if (typeof arg === 'object') {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n    return false;\n}\n```\n\n### 请评价以下事件监听器代码并给出改进意见\n\n```\nif (window.addEventListener) {\n  var addListener = function (el, type, listener, useCapture) {\n    el.addEventListener(type, listener, useCapture);\n  };\n}\nelse if (document.all) {\n  addListener = function (el, type, listener) {\n    el.attachEvent('on' + type, function () {\n      listener.apply(el);\n    });\n  };\n}\n```\n\n作用：浏览器功能检测实现跨浏览器DOM事件绑定\n\n优点：\n\n1. 测试代码只运行一次，根据浏览器确定绑定方法\n2. 通过``listener.apply(el)``解决IE下监听器this与标准不一致的地方\n3. 在浏览器不支持的情况下提供简单的功能，在标准浏览器中提供捕获功能\n\n缺点：\n\n1. document.all作为IE检测不可靠，应该使用if(el.attachEvent)\n2. addListener在不同浏览器下API不一样\n3. ``listener.apply``使this与标准一致但监听器无法移除\n4. 未解决IE下listener参数event。 target问题\n\n改进:\n\n```\nvar addListener;\n\nif (window.addEventListener) {\n  addListener = function (el, type, listener, useCapture) {\n    el.addEventListener(type, listener, useCapture);\n    return listener;\n  };\n}\nelse if (window.attachEvent) {\n  addListener = function (el, type, listener) {\n    // 标准化this，event，target\n    var wrapper = function () {\n      var event = window.event;\n      event.target = event.srcElement;\n      listener.call(el, event);\n    };\n\n    el.attachEvent('on' + type, wrapper);\n    return wrapper;\n    // 返回wrapper。调用者可以保存，以后remove\n  };\n}\n```\n\n### 如何判断一个对象是否为函数\n\n```\n/**\n * 判断对象是否为函数，如果当前运行环境对可调用对象（如正则表达式）\n * 的typeof返回'function'，采用通用方法，否则采用优化方法\n *\n * @param {Any} arg 需要检测是否为函数的对象\n * @return {boolean} 如果参数是函数，返回true，否则false\n */\nfunction isFunction(arg) {\n    if (arg) {\n        if (typeof (/./) !== 'function') {\n            return typeof arg === 'function';\n        } else {\n            return Object.prototype.toString.call(arg) === '[object Function]';\n        }\n    } // end if\n    return false;\n}\n```\n\n### 编写一个函数接受url中query string为参数,返回解析后的Object,query string使用application/x-www-form-urlencoded编码\n\n```\n/**\n * 解析query string转换为对象，一个key有多个值时生成数组\n *\n * @param {String} query 需要解析的query字符串，开头可以是?，\n * 按照application/x-www-form-urlencoded编码\n * @return {Object} 参数解析后的对象\n */\nfunction parseQuery(query) {\n    var result = {};\n\n    // 如果不是字符串返回空对象\n    if (typeof query !== 'string') {\n        return result;\n    }\n\n    // 去掉字符串开头可能带的?\n    if (query.charAt(0) === '?') {\n        query = query.substring(1);\n    }\n\n    var pairs = query.split('&');\n    var pair;\n    var key, value;\n    var i, len;\n\n    for (i = 0, len = pairs.length; i < len; ++i) {\n        pair = pairs[i].split('=');\n        // application/x-www-form-urlencoded编码会将' '转换为+\n        key = decodeURIComponent(pair[0]).replace(/\\+/g, ' ');\n        value = decodeURIComponent(pair[1]).replace(/\\+/g, ' ');\n\n        // 如果是新key，直接添加\n        if (!(key in result)) {\n            result[key] = value;\n        }\n        // 如果key已经出现一次以上，直接向数组添加value\n        else if (isArray(result[key])) {\n            result[key].push(value);\n        }\n        // key第二次出现，将结果改为数组\n        else {\n            var arr = [result[key]];\n            arr.push(value);\n            result[key] = arr;\n        } // end if-else\n    } // end for\n\n    return result;\n}\n\nfunction isArray(arg) {\n    if (arg && typeof arg === 'object') {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n    return false;\n}\n/**\nconsole.log(parseQuery('sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8'));\n */\n```\n\n### 解析一个完整的url,返回Object包含域与window.location相同\n\n```\n/**\n * 解析一个url并生成window.location对象中包含的域\n * location:\n * {\n *      href: '包含完整的url',\n *      origin: '包含协议到pathname之前的内容',\n *      protocol: 'url使用的协议，包含末尾的:',\n *      username: '用户名', // 暂时不支持\n *      password: '密码',  // 暂时不支持\n *      host: '完整主机名，包含:和端口',\n *      hostname: '主机名，不包含端口'\n *      port: '端口号',\n *      pathname: '服务器上访问资源的路径/开头',\n *      search: 'query string，?开头',\n *      hash: '#开头的fragment identifier'\n * }\n *\n * @param {string} url 需要解析的url\n * @return {Object} 包含url信息的对象\n */\nfunction parseUrl(url) {\n    var result = {};\n    var keys = ['href', 'origin', 'protocol', 'host',\n                'hostname', 'port', 'pathname', 'search', 'hash'];\n    var i, len;\n    var regexp = /(([^:]+:)\\/\\/(([^:\\/\\?#]+)(:\\d+)?))(\\/[^?#]*)?(\\?[^#]*)?(#.*)?/;\n\n    var match = regexp.exec(url);\n\n    if (match) {\n        for (i = keys.length - 1; i >= 0; --i) {\n            result[keys[i]] = match[i] ? match[i] : '';\n        }\n    }\n\n    return result;\n}\n```\n\n### 完成函数getViewportSize返回指定窗口的视口尺寸\n\n```\n/**\n* 查询指定窗口的视口尺寸，如果不指定窗口，查询当前窗口尺寸\n**/\nfunction getViewportSize(w) {\n    w = w || window;\n\n    // IE9及标准浏览器中可使用此标准方法\n    if ('innerHeight' in w) {\n        return {\n            width: w.innerWidth,\n            height: w.innerHeight\n        };\n    }\n\n    var d = w.document;\n    // IE 8及以下浏览器在标准模式下\n    if (document.compatMode === 'CSS1Compat') {\n        return {\n            width: d.documentElement.clientWidth,\n            height: d.documentElement.clientHeight\n        };\n    }\n\n    // IE8及以下浏览器在怪癖模式下\n    return {\n        width: d.body.clientWidth,\n        height: d.body.clientHeight\n    };\n}\n```\n\n### 完成函数getScrollOffset返回窗口滚动条偏移量\n\n    /**\n     * 获取指定window中滚动条的偏移量，如未指定则获取当前window\n     * 滚动条偏移量\n     *\n     * @param {window} w 需要获取滚动条偏移量的窗口\n     * @return {Object} obj.x为水平滚动条偏移量,obj.y为竖直滚动条偏移量\n     */\n    function getScrollOffset(w) {\n        w =  w || window;\n        // 如果是标准浏览器\n        if (w.pageXOffset != null) {\n            return {\n                x: w.pageXOffset,\n                y: w.pageYOffset\n            };\n        }\n\n        // 老版本IE，根据兼容性不同访问不同元素\n        var d = w.document;\n        if (d.compatMode === 'CSS1Compat') {\n            return {\n                x: d.documentElement.scrollLeft,\n                y: d.documentElement.scrollTop\n            }\n        }\n\n        return {\n            x: d.body.scrollLeft,\n            y: d.body.scrollTop\n        };\n    }\n\n\n### 现有一个字符串richText,是一段富文本,需要显示在页面上.有个要求,需要给其中只包含一个img元素的p标签增加一个叫pic的class.请编写代码实现.可以使用jQuery或KISSY.\n\n    function richText(text) {\n        var div = document.createElement('div');\n        div.innerHTML = text;\n        var p = div.getElementsByTagName('p');\n        var i, len;\n\n        for (i = 0, len = p.length; i < len; ++i) {\n            if (p[i].getElementsByTagName('img').length === 1) {\n                p[i].classList.add('pic');\n            }\n        }\n\n        return div.innerHTML;\n    }\n\n### 请实现一个Event类,继承自此类的对象都会拥有两个方法on,off,once和trigger\n\n\n    function Event() {\n        if (!(this instanceof Event)) {\n            return new Event();\n        }\n        this._callbacks = {};\n    }\n    Event.prototype.on = function (type, handler) {\n        this_callbacks = this._callbacks || {};\n        this._callbacks[type] = this.callbacks[type] || [];\n        this._callbacks[type].push(handler);\n\n        return this;\n    };\n\n    Event.prototype.off = function (type, handler) {\n        var list = this._callbacks[type];\n\n        if (list) {\n            for (var i = list.length; i >= 0; --i) {\n                if (list[i] === handler) {\n                    list.splice(i, 1);\n                }\n            }\n        }\n\n        return this;\n    };\n\n    Event.prototype.trigger = function (type, data) {\n        var list = this._callbacks[type];\n\n        if (list) {\n            for (var i = 0, len = list.length; i < len; ++i) {\n                list[i].call(this, data);\n            }\n        }\n    };\n\n    Event.prototype.once = function (type, handler) {\n        var self = this;\n\n        function wrapper() {\n            handler.apply(self, arguments);\n            self.off(type, wrapper);\n        }\n        this.on(type, wrapper);\n        return this;\n    };\n\n### 编写一个函数将列表子元素顺序反转\n\n```\n<ul id=\"target\">\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n</ul>\n\n<script>\n    var target = document.getElementById('target');\n    var i;\n    var frag = document.createDocumentFragment();\n\n    for (i = target.children.length - 1; i &gt;= 0; --i) {\n        frag.appendChild(target.children[i]);\n    }\n    target.appendChild(frag);\n</script>\n```\n\n### 以下函数的作用是?空白区域应该填写什么\n\n```\n// define\n(function (window) {\n    function fn(str) {\n        this.str = str;\n    }\n\n    fn.prototype.format = function () {\n        var arg = __1__;\n        return this.str.replace(__2__, function (a, b) {\n            return arg[b] || '';\n        });\n    };\n\n    window.fn = fn;\n})(window);\n\n// use\n(function () {\n    var t = new fn('<p><a href=\"{0}\">{1}</a><span>{2}</span></p>');\n    console.log(t.format('http://www.alibaba.com', 'Alibaba', 'Welcome'));\n})();\n```\n\ndefine部分定义一个简单的模板类，使用{}作为转义标记，中间的数字表示替换目标，format实参用来替换模板内标记\n横线处填：\n\n1. ``Array.prototype.slice.call(arguments, 0)``\n2. ``/\\{\\s*(\\d+)\\s*\\}/g``\n\n### 编写一个函数实现form的序列化(即将一个表单中的键值序列化为可提交的字符串)\n\n\n    <form id=\"target\">\n        <select name=\"age\">\n            <option value=\"aaa\">aaa</option>\n            <option value=\"bbb\" selected>bbb</option>\n        </select>\n        <select name=\"friends\" multiple>\n            <option value=\"qiu\" selected>qiu</option>\n            <option value=\"de\">de</option>\n            <option value=\"qing\" selected>qing</option>\n        </select>\n        <input name=\"name\" value=\"qiudeqing\">\n        <input type=\"password\" name=\"password\" value=\"11111\">\n        <input type=\"hidden\" name=\"salery\" value=\"3333\">\n        <textarea name=\"description\">description</textarea>\n        <input type=\"checkbox\" name=\"hobby\" checked value=\"football\">Football\n        <input type=\"checkbox\" name=\"hobby\" value=\"basketball\">Basketball\n        <input type=\"radio\" name=\"sex\" checked value=\"Female\">Female\n        <input type=\"radio\" name=\"sex\" value=\"Male\">Male\n    </form>\n\n\n    <script>\n\n    /**\n     * 将一个表单元素序列化为可提交的字符串\n     *\n     * @param {FormElement} form 需要序列化的表单元素\n     * @return {string} 表单序列化后的字符串\n     */\n    function serializeForm(form) {\n      if (!form || form.nodeName.toUpperCase() !== 'FORM') {\n        return;\n      }\n\n      var result = [];\n\n      var i, len;\n      var field, fieldName, fieldType;\n\n      for (i = 0, len = form.length; i < len; ++i) {\n        field = form.elements[i];\n        fieldName = field.name;\n        fieldType = field.type;\n\n        if (field.disabled || !fieldName) {\n          continue;\n        } // enf if\n\n        switch (fieldType) {\n          case 'text':\n          case 'password':\n          case 'hidden':\n          case 'textarea':\n            result.push(encodeURIComponent(fieldName) + '=' +\n                encodeURIComponent(field.value));\n            break;\n\n          case 'radio':\n          case 'checkbox':\n            if (field.checked) {\n              result.push(encodeURIComponent(fieldName) + '=' +\n                encodeURIComponent(field.value));\n            }\n            break;\n\n          case 'select-one':\n          case 'select-multiple':\n            for (var j = 0, jLen = field.options.length; j < jLen; ++j) {\n              if (field.options[j].selected) {\n                result.push(encodeURIComponent(fieldName) + '=' +\n                  encodeURIComponent(field.options[j].value || field.options[j].text));\n              }\n            } // end for\n            break;\n\n          case 'file':\n          case 'submit':\n            break; // 是否处理？\n\n          default:\n            break;\n        } // end switch\n      } // end for\n\n        return result.join('&');\n    }\n\n    var form = document.getElementById('target');\n    console.log(serializeForm(form));\n    </script>\n\n### 使用原生javascript给下面列表中的li节点绑定点击事件,点击时创建一个Object对象,兼容IE和标准浏览器\n\n```\n<ul id=\"nav\">\n    <li><a href=\"http://11111\">111</a></li>\n    <li><a href=\"http://2222\">222</a></li>\n    <li><a href=\"http://333\">333</a></li>\n    <li><a href=\"http://444\">444</a></li>\n</ul>\n\nObject:\n{\n    \"index\": 1,\n    \"name\": \"111\",\n    \"link\": \"http://1111\"\n}\n```\n\nscript:\n\n```\nvar EventUtil = {\n    getEvent: function (event) {\n        return event || window.event;\n    },\n    getTarget: function (event) {\n        return event.target || event.srcElement;\n    },\n    // 返回注册成功的监听器，IE中需要使用返回值来移除监听器\n    on: function (elem, type, handler) {\n        if (elem.addEventListener) {\n            elem.addEventListener(type, handler, false);\n            return handler;\n        } else if (elem.attachEvent) {\n            function wrapper(event) {\n                return handler.call(elem, event);\n            };\n            elem.attachEvent('on' + type, wrapper);\n            return wrapper;\n        }\n    },\n    off: function (elem, type, handler) {\n        if (elem.removeEventListener) {\n            elem.removeEventListener(type, handler, false);\n        } else if (elem.detachEvent) {\n            elem.detachEvent('on' + type, handler);\n        }\n    },\n    preventDefault: function (event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        } else if ('returnValue' in event) {\n            event.returnValue = false;\n        }\n    },\n    stopPropagation: function (event) {\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        } else if ('cancelBubble' in event) {\n            event.cancelBubble = true;\n        }\n    }\n};\nvar DOMUtil = {\n    text: function (elem) {\n        if ('textContent' in elem) {\n            return elem.textContent;\n        } else if ('innerText' in elem) {\n            return elem.innerText;\n        }\n    },\n    prop: function (elem, propName) {\n        return elem.getAttribute(propName);\n    }\n};\n\nvar nav = document.getElementById('nav');\n\nEventUtil.on(nav, 'click', function (event) {\n    var event = EventUtil.getEvent(event);\n    var target = EventUtil.getTarget(event);\n\n    var children = this.children;\n    var i, len;\n    var anchor;\n    var obj = {};\n\n    for (i = 0, len = children.length; i < len; ++i) {\n        if (children[i] === target) {\n            obj.index = i + 1;\n            anchor = target.getElementsByTagName('a')[0];\n            obj.name = DOMUtil.text(anchor);\n            obj.link = DOMUtil.prop(anchor, 'href');\n        }\n    }\n\n    alert('index: ' + obj.index + ' name: ' + obj.name +\n        ' link: ' + obj.link);\n});\n```\n\n### 有一个大数组,var a = ['1', '2', '3', ...];a的长度是100,内容填充随机整数的字符串.请先构造此数组a,然后设计一个算法将其内容去重\n\n```\n    /**\n    * 数组去重\n    **/\n    function normalize(arr) {\n        if (arr && Array.isArray(arr)) {\n            var i, len, map = {};\n            for (i = arr.length; i >= 0; --i) {\n                if (arr[i] in map) {\n                    arr.splice(i, 1);\n                } else {\n                    map[arr[i]] = true;\n                }\n            }\n        }\n        return arr;\n    }\n\n    /**\n    * 用100个随机整数对应的字符串填充数组。\n    **/\n    function fillArray(arr, start, end) {\n        start = start == undefined ? 1 : start;\n        end = end == undefined ?  100 : end;\n\n        if (end <= start) {\n            end = start + 100;\n        }\n\n        var width = end - start;\n        var i;\n        for (i = 100; i >= 1; --i) {\n            arr.push('' + (Math.floor(Math.random() * width) + start));\n        }\n        return arr;\n    }\n\n    var input = [];\n    fillArray(input, 1, 100);\n    input.sort(function (a, b) {\n        return a - b;\n    });\n    console.log(input);\n\n    normalize(input);\n    console.log(input);\n```\n---\n转载自: [https://github.com/qiu-deqing/FE-interview](https://github.com/qiu-deqing/FE-interview)\n","slug":"前端面试题","published":1,"updated":"2016-12-20T06:27:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwx5ihlt000ri7q3erwszz7c","content":"<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<p><strong>Table of Contents</strong>  <em>generated with <a href=\"http://doctoc.herokuapp.com/\" target=\"_blank\" rel=\"external\">DocToc</a></em><br><strong>前端面试基础题</strong><br><a id=\"more\"></a></p>\n<ul>\n<li><a href=\"#fe-interview\">FE-interview</a><ul>\n<li><a href=\"#$html，-http，web综合问题\">$HTML， HTTP，web综合问题</a><ul>\n<li><a href=\"#常见排序算法的时间复杂度空间复杂度\">常见排序算法的时间复杂度,空间复杂度</a></li>\n<li><a href=\"#前端需要注意哪些seo\">前端需要注意哪些SEO</a></li>\n<li><a href=\"#web开发中会话跟踪的方法有哪些\">web开发中会话跟踪的方法有哪些</a></li>\n<li><a href=\"#img的title和alt有什么区别\"><code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</a></li>\n<li><a href=\"#doctype是什么举例常见doctype及特点\">doctype是什么,举例常见doctype及特点</a></li>\n<li><a href=\"#html全局属性global-attribute有哪些\">HTML全局属性(global attribute)有哪些</a></li>\n<li><a href=\"#什么是web语义化有什么好处\">什么是web语义化,有什么好处</a></li>\n<li><a href=\"#http-method\">HTTP method</a></li>\n<li><a href=\"#从浏览器地址栏输入url到显示页面的步骤以http为例\">从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)</a></li>\n<li><a href=\"#http-request报文结构是怎样的\">HTTP request报文结构是怎样的</a></li>\n<li><a href=\"#http-response报文结构是怎样的\">HTTP response报文结构是怎样的</a></li>\n<li><a href=\"#如何进行网站性能优化\">如何进行网站性能优化</a></li>\n<li><a href=\"#什么是渐进增强\">什么是渐进增强</a></li>\n<li><a href=\"#http状态码及其含义\">HTTP状态码及其含义</a></li>\n</ul>\n</li>\n<li><a href=\"#$css部分\">$CSS部分</a><ul>\n<li><a href=\"#css选择器有哪些\">CSS选择器有哪些</a></li>\n<li><a href=\"#css-sprite是什么有什么优缺点\">css sprite是什么,有什么优缺点</a></li>\n<li><a href=\"#display-none与visibility-hidden的区别\"><code>display: none;</code>与<code>visibility: hidden;</code>的区别</a></li>\n<li><a href=\"#css-hack原理及常用hack\">css hack原理及常用hack</a></li>\n<li><a href=\"#specified-valuecomputed-valueused-value计算方法\">specified value,computed value,used value计算方法</a></li>\n<li><a href=\"#link与@import的区别\"><code>link</code>与<code>@import</code>的区别</a></li>\n<li><a href=\"#display-block和display-inline的区别\"><code>display: block;</code>和<code>display: inline;</code>的区别</a></li>\n<li><a href=\"#pnggifjpg的区别及如何选\">PNG,GIF,JPG的区别及如何选</a></li>\n<li><a href=\"#css有哪些继承属性\">CSS有哪些继承属性</a></li>\n<li><a href=\"#ie6浏览器有哪些常见的bug缺陷或者与标准不一致的地方如何解决\">IE6浏览器有哪些常见的bug,缺陷或者与标准不一致的地方,如何解决</a></li>\n<li><a href=\"#容器包含若干浮动元素时如何清理包含浮动\">容器包含若干浮动元素时如何清理(包含)浮动</a></li>\n<li><a href=\"#什么是fouc如何避免\">什么是FOUC?如何避免</a></li>\n<li><a href=\"#如何创建块级格式化上下文block-formatting-contextbfc有什么用\">如何创建块级格式化上下文(block formatting context),BFC有什么用</a></li>\n<li><a href=\"#displayfloatposition的关系\">display,float,position的关系</a></li>\n<li><a href=\"#外边距折叠collapsing-margins\">外边距折叠(collapsing margins)</a></li>\n<li><a href=\"#如何确定一个元素的包含块containing-block\">如何确定一个元素的包含块(containing block)</a></li>\n<li><a href=\"#stacking-context布局规则\">stacking context,布局规则</a></li>\n<li><a href=\"#如何水平居中一个元素\">如何水平居中一个元素</a></li>\n<li><a href=\"#如何竖直居中一个元素\">如何竖直居中一个元素</a></li>\n</ul>\n</li>\n<li><a href=\"#$javascript概念部分\">$javascript概念部分</a><ul>\n<li><a href=\"#dom元素e的egetattributepropname和epropname有什么区别和联系\">DOM元素e的e.getAttribute(propName)和e.propName有什么区别和联系</a></li>\n<li><a href=\"#offsetwidthoffsetheightclientwidthclientheight与scrollwidthscrollheight的区别\">offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别</a></li>\n<li><a href=\"#xmlhttprequest通用属性和方法\">XMLHttpRequest通用属性和方法</a></li>\n<li><a href=\"#focusblur与focusinfocusout的区别与联系\">focus/blur与focusin/focusout的区别与联系</a></li>\n<li><a href=\"#mouseovermouseout与mouseentermouseleave的区别与联系\">mouseover/mouseout与mouseenter/mouseleave的区别与联系</a></li>\n<li><a href=\"#sessionstoragelocalstoragecookie区别\">sessionStorage,localStorage,cookie区别</a></li>\n<li><a href=\"#javascript跨域通信\">javascript跨域通信</a></li>\n<li><a href=\"#javascript有哪几种数据类型\">javascript有哪几种数据类型</a></li>\n<li><a href=\"#什么闭包闭包有什么用\">什么闭包,闭包有什么用</a></li>\n<li><a href=\"#javascript有哪几种方法定义函数\">javascript有哪几种方法定义函数</a></li>\n<li><a href=\"#应用程序存储和离线web应用\">应用程序存储和离线web应用</a></li>\n<li><a href=\"#客户端存储localstorage和sessionstorage\">客户端存储localStorage和sessionStorage</a></li>\n<li><a href=\"#cookie及其操作\">cookie及其操作</a></li>\n<li><a href=\"#javascript有哪些方法定义对象\">javascript有哪些方法定义对象</a></li>\n<li><a href=\"#===运算符判断相等的流程是怎样的\">===运算符判断相等的流程是怎样的</a></li>\n<li><a href=\"#==运算符判断相等的流程是怎样的\">==运算符判断相等的流程是怎样的</a></li>\n<li><a href=\"#对象到字符串的转换步骤\">对象到字符串的转换步骤</a></li>\n<li><a href=\"#对象到数字的转换步骤\">对象到数字的转换步骤</a></li>\n<li><a href=\"#==的比较规则\">&lt;,&gt;,&lt;=,&gt;=的比较规则</a></li>\n<li><a href=\"#运算符工作流程\">+运算符工作流程</a></li>\n<li><a href=\"#函数内部arguments变量有哪些特性有哪些属性如何将它转换为数组\">函数内部arguments变量有哪些特性,有哪些属性,如何将它转换为数组</a></li>\n<li><a href=\"#dom事件模型是如何的编写一个eventutil工具类实现事件管理兼容\">DOM事件模型是如何的,编写一个EventUtil工具类实现事件管理兼容</a></li>\n<li><a href=\"#评价一下三种方法实现继承的优缺点并改进\">评价一下三种方法实现继承的优缺点,并改进</a></li>\n</ul>\n</li>\n<li><a href=\"#$javascript编程部分\">$javascript编程部分</a><ul>\n<li><a href=\"#请用原生js实现一个函数给页面制定的任意一个元素添加一个透明遮罩透明度可变默认02使这个区域点击无效要求兼容ie8及各主流浏览器遮罩层效果如下图所示\">请用原生js实现一个函数,给页面制定的任意一个元素添加一个透明遮罩(透明度可变,默认0.2),使这个区域点击无效,要求兼容IE8+及各主流浏览器,遮罩层效果如下图所示:</a></li>\n<li><a href=\"#请用代码写出今天是星期x其中x表示当天是星期几如果当天是星期一输出应该是今天是星期一\">请用代码写出(今天是星期x)其中x表示当天是星期几,如果当天是星期一,输出应该是”今天是星期一”</a></li>\n<li><a href=\"#下面这段代码想要循环延时输出结果0-1-2-3-4请问输出结果是否正确如果不正确请说明为什么并修改循环内的代码使其输出正确结果\">下面这段代码想要循环延时输出结果0 1 2 3 4,请问输出结果是否正确,如果不正确,请说明为什么,并修改循环内的代码使其输出正确结果</a></li>\n<li><a href=\"#现有一个page类其原型对象上有许多以post开头的方法如postmsg另有一拦截函数chekc只返回ture或false请设计一个函数该函数应批量改造原page的postxxx方法在保留其原有功能的同时为每个postxxx方法增加拦截验证功能当chekc返回true时继续执行原postxxx方法返回false时不再执行原postxxx方法\">现有一个Page类,其原型对象上有许多以post开头的方法(如postMsg);另有一拦截函数chekc,只返回ture或false.请设计一个函数,该函数应批量改造原Page的postXXX方法,在保留其原有功能的同时,为每个postXXX方法增加拦截验证功能,当chekc返回true时继续执行原postXXX方法,返回false时不再执行原postXXX方法</a></li>\n<li><a href=\"#完成下面的tool-tip\">完成下面的tool-tip</a></li>\n<li><a href=\"#编写javascript深度克隆函数deepclone\">编写javascript深度克隆函数deepClone</a></li>\n<li><a href=\"#补充代码鼠标单击button1后将button1移动到button2的后面\">补充代码,鼠标单击Button1后将Button1移动到Button2的后面</a></li>\n<li><a href=\"#网页中实现一个计算当年还剩多少时间的倒数计时程序要求网页上实时动态显示××年还剩××天××时××分××秒\">网页中实现一个计算当年还剩多少时间的倒数计时程序,要求网页上实时动态显示”××年还剩××天××时××分××秒”</a></li>\n<li><a href=\"#完成一个函数接受数组作为参数数组元素为整数或者数组数组元素包含整数或数组函数返回扁平化后的数组\">完成一个函数,接受数组作为参数,数组元素为整数或者数组,数组元素包含整数或数组,函数返回扁平化后的数组</a></li>\n<li><a href=\"#如何判断一个对象是否为数组\">如何判断一个对象是否为数组</a></li>\n<li><a href=\"#请评价以下事件监听器代码并给出改进意见\">请评价以下事件监听器代码并给出改进意见</a></li>\n<li><a href=\"#如何判断一个对象是否为函数\">如何判断一个对象是否为函数</a></li>\n<li><a href=\"#编写一个函数接受url中query-string为参数返回解析后的objectquery-string使用applicationx-www-form-urlencoded编码\">编写一个函数接受url中query string为参数,返回解析后的Object,query string使用application/x-www-form-urlencoded编码</a></li>\n<li><a href=\"#解析一个完整的url返回object包含域与windowlocation相同\">解析一个完整的url,返回Object包含域与window.location相同</a></li>\n<li><a href=\"#完成函数getviewportsize返回指定窗口的视口尺寸\">完成函数getViewportSize返回指定窗口的视口尺寸</a></li>\n<li><a href=\"#完成函数getscrolloffset返回窗口滚动条偏移量\">完成函数getScrollOffset返回窗口滚动条偏移量</a></li>\n<li><a href=\"#现有一个字符串richtext是一段富文本需要显示在页面上有个要求需要给其中只包含一个img元素的p标签增加一个叫pic的class请编写代码实现可以使用jquery或kissy\">现有一个字符串richText,是一段富文本,需要显示在页面上.有个要求,需要给其中只包含一个img元素的p标签增加一个叫pic的class.请编写代码实现.可以使用jQuery或KISSY.</a></li>\n<li><a href=\"#请实现一个event类继承自此类的对象都会拥有两个方法onoffonce和trigger\">请实现一个Event类,继承自此类的对象都会拥有两个方法on,off,once和trigger</a></li>\n<li><a href=\"#编写一个函数将列表子元素顺序反转\">编写一个函数将列表子元素顺序反转</a></li>\n<li><a href=\"#以下函数的作用是空白区域应该填写什么\">以下函数的作用是?空白区域应该填写什么</a></li>\n<li><a href=\"#编写一个函数实现form的序列化即将一个表单中的键值序列化为可提交的字符串\">编写一个函数实现form的序列化(即将一个表单中的键值序列化为可提交的字符串)</a></li>\n<li><a href=\"#使用原生javascript给下面列表中的li节点绑定点击事件点击时创建一个object对象兼容ie和标准浏览器\">使用原生javascript给下面列表中的li节点绑定点击事件,点击时创建一个Object对象,兼容IE和标准浏览器</a></li>\n<li><a href=\"#有一个大数组var-a-=-1-2-3-a的长度是100内容填充随机整数的字符串请先构造此数组a然后设计一个算法将其内容去重\">有一个大数组,var a = [‘1’, ‘2’, ‘3’, …];a的长度是100,内容填充随机整数的字符串.请先构造此数组a,然后设计一个算法将其内容去重</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<h1 id=\"FE-interview\"><a href=\"#FE-interview\" class=\"headerlink\" title=\"FE-interview\"></a>FE-interview</h1><p>个人收集的前端知识点、面试题和答案，参考答案仅代表个人观点，方便复习，目录如下，通过文档内搜索目录可快速定位章节</p>\n<h2 id=\"HTML，-HTTP，web综合问题\"><a href=\"#HTML，-HTTP，web综合问题\" class=\"headerlink\" title=\"$HTML， HTTP，web综合问题\"></a>$HTML， HTTP，web综合问题</h2><h3 id=\"常见排序算法的时间复杂度-空间复杂度\"><a href=\"#常见排序算法的时间复杂度-空间复杂度\" class=\"headerlink\" title=\"常见排序算法的时间复杂度,空间复杂度\"></a>常见排序算法的时间复杂度,空间复杂度</h3><p><img src=\"http://7xsspr.com2.z0.glb.clouddn.com/sort-compare.png\" alt=\"排序算法比较\"></p>\n<h3 id=\"前端需要注意哪些SEO\"><a href=\"#前端需要注意哪些SEO\" class=\"headerlink\" title=\"前端需要注意哪些SEO\"></a>前端需要注意哪些SEO</h3><ol>\n<li>合理的title、description、keywords：搜索对着三项的权重逐个减小，title值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面title要有所不同；description把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面description有所不同；keywords列举出重要关键词即可</li>\n<li>语义化的HTML代码，符合W3C规范：语义化代码让搜索引擎容易理解网页</li>\n<li>重要内容HTML代码放在最前：搜索引擎抓取HTML顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</li>\n<li>重要内容不要用js输出：爬虫不会执行js获取内容</li>\n<li>少用iframe：搜索引擎不会抓取iframe中的内容</li>\n<li>非装饰性图片必须加alt</li>\n<li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li>\n</ol>\n<h3 id=\"web开发中会话跟踪的方法有哪些\"><a href=\"#web开发中会话跟踪的方法有哪些\" class=\"headerlink\" title=\"web开发中会话跟踪的方法有哪些\"></a>web开发中会话跟踪的方法有哪些</h3><ol>\n<li>cookie</li>\n<li>session</li>\n<li>url重写</li>\n<li>隐藏input</li>\n<li>ip地址</li>\n</ol>\n<h3 id=\"lt-img-gt-的title和alt有什么区别\"><a href=\"#lt-img-gt-的title和alt有什么区别\" class=\"headerlink\" title=\"&lt;img&gt;的title和alt有什么区别\"></a><code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</h3><ol>\n<li><code>title</code>是<a href=\"http://www.w3.org/TR/html-markup/global-attributes.html#common.attrs.core\" target=\"_blank\" rel=\"external\">global attributes</a>之一，用于为元素提供附加的advisory information。通常当鼠标滑动到元素上的时候显示。</li>\n<li><code>alt</code>是<code>&lt;img&gt;</code>的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。</li>\n</ol>\n<h3 id=\"doctype是什么-举例常见doctype及特点\"><a href=\"#doctype是什么-举例常见doctype及特点\" class=\"headerlink\" title=\"doctype是什么,举例常见doctype及特点\"></a>doctype是什么,举例常见doctype及特点</h3><ol>\n<li><code>&lt;!doctype&gt;</code>声明必须处于HTML文档的头部，在<code>&lt;html&gt;</code>标签之前，HTML5中不区分大小写</li>\n<li><code>&lt;!doctype&gt;</code>声明不是一个HTML标签，是一个用于告诉浏览器当前HTMl版本的指令</li>\n<li>现代浏览器的html布局引擎通过检查doctype决定使用兼容模式还是标准模式对文档进行渲染，一些浏览器有一个接近标准模型。</li>\n<li>在HTML4.01中<code>&lt;!doctype&gt;</code>声明指向一个DTD，由于HTML4.01基于SGML，所以DTD指定了标记规则以保证浏览器正确渲染内容</li>\n<li>HTML5不基于SGML，所以不用指定DTD</li>\n</ol>\n<p>常见dotype：</p>\n<ol>\n<li><strong>HTML4.01 strict</strong>：不允许使用表现性、废弃元素（如font）以及frameset。声明：<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</code></li>\n<li><strong>HTML4.01 Transitional</strong>:允许使用表现性、废弃元素（如font），不允许使用frameset。声明：<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</code></li>\n<li><strong>HTML4.01 Frameset</strong>:允许表现性元素，废气元素以及frameset。声明：<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;</code></li>\n<li><strong>XHTML1.0 Strict</strong>:不使用允许表现性、废弃元素以及frameset。文档必须是结构良好的XML文档。声明：<code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</code></li>\n<li><strong>XHTML1.0 Transitional</strong>:允许使用表现性、废弃元素，不允许frameset，文档必须是结构良好的XMl文档。声明： <code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</code></li>\n<li><strong>XHTML 1.0 Frameset</strong>:允许使用表现性、废弃元素以及frameset，文档必须是结构良好的XML文档。声明：<code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;</code></li>\n<li><strong>HTML 5</strong>: <code>&lt;!doctype html&gt;</code></li>\n</ol>\n<h3 id=\"HTML全局属性-global-attribute-有哪些\"><a href=\"#HTML全局属性-global-attribute-有哪些\" class=\"headerlink\" title=\"HTML全局属性(global attribute)有哪些\"></a>HTML全局属性(global attribute)有哪些</h3><p>参考资料：<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\" target=\"_blank\" rel=\"external\">MDN: html global attribute</a>或者<a href=\"http://www.w3.org/TR/html-markup/global-attributes.html#common.attrs.core\" target=\"_blank\" rel=\"external\">W3C HTML global-attributes</a></p>\n<ul>\n<li><code>accesskey</code>:设置快捷键，提供快速访问元素如<a href=\"#\" accesskey=\"a\">aaa</a>在windows下的firefox中按<code>alt + shift + a</code>可激活元素</li>\n<li><code>class</code>:为元素设置类标识，多个类名用空格分开，CSS和javascript可通过class属性获取元素</li>\n<li><code>contenteditable</code>: 指定元素内容是否可编辑</li>\n<li><code>contextmenu</code>: 自定义鼠标右键弹出菜单内容</li>\n<li><code>data-*</code>: 为元素增加自定义属性</li>\n<li><code>dir</code>: 设置元素文本方向</li>\n<li><code>draggable</code>: 设置元素是否可拖拽</li>\n<li><code>dropzone</code>: 设置元素拖放类型： copy, move, link</li>\n<li><code>hidden</code>: 表示一个元素是否与文档。样式上会导致元素不显示，但是不能用这个属性实现样式效果</li>\n<li><code>id</code>: 元素id，文档内唯一</li>\n<li><code>lang</code>: 元素内容的的语言</li>\n<li><code>spellcheck</code>: 是否启动拼写和语法检查</li>\n<li><code>style</code>: 行内css样式</li>\n<li><code>tabindex</code>: 设置元素可以获得焦点，通过tab可以导航</li>\n<li><code>title</code>: 元素相关的建议信息</li>\n<li><code>translate</code>: 元素和子孙节点内容是否需要本地化</li>\n</ul>\n<h3 id=\"什么是web语义化-有什么好处\"><a href=\"#什么是web语义化-有什么好处\" class=\"headerlink\" title=\"什么是web语义化,有什么好处\"></a>什么是web语义化,有什么好处</h3><p>web语义化是指通过HTML标记表示页面包含的信息，包含了HTML标签的语义化和css命名的语义化。<br>HTML标签的语义化是指：通过使用包含语义的标签（如h1-h6）恰当地表示文档结构<br>css命名的语义化是指：为html标签添加有意义的class，id补充未表达的语义，如<a href=\"http://en.wikipedia.org/wiki/Microformats\" target=\"_blank\" rel=\"external\">Microformat</a>通过添加符合规则的class描述信息<br>为什么需要语义化：</p>\n<ul>\n<li>去掉样式后页面呈现清晰的结构</li>\n<li>盲人使用读屏器更好地阅读</li>\n<li>搜索引擎更好地理解页面，有利于收录</li>\n<li>便团队项目的可持续运作及维护</li>\n</ul>\n<h3 id=\"HTTP-method\"><a href=\"#HTTP-method\" class=\"headerlink\" title=\"HTTP method\"></a>HTTP method</h3><ol>\n<li>一台服务器要与HTTP1.1兼容，只要为资源实现<strong>GET</strong>和<strong>HEAD</strong>方法即可</li>\n<li><strong>GET</strong>是最常用的方法，通常用于<strong>请求服务器发送某个资源</strong>。</li>\n<li><strong>HEAD</strong>与GET类似，但<strong>服务器在响应中值返回首部，不返回实体的主体部分</strong></li>\n<li><strong>PUT</strong>让服务器<strong>用请求的主体部分来创建一个由所请求的URL命名的新文档，或者，如果那个URL已经存在的话，就用干这个主体替代它</strong></li>\n<li><strong>POST</strong>起初是用来向服务器输入数据的。实际上，通常会用它来支持HTML的表单。表单中填好的数据通常会被送给服务器，然后由服务器将其发送到要去的地方。</li>\n<li><strong>TRACE</strong>会在目的服务器端发起一个环回诊断，最后一站的服务器会弹回一个TRACE响应并在响应主体中携带它收到的原始请求报文。TRACE方法主要用于诊断，用于验证请求是否如愿穿过了请求/响应链。</li>\n<li><strong>OPTIONS</strong>方法请求web服务器告知其支持的各种功能。可以查询服务器支持哪些方法或者对某些特殊资源支持哪些方法。</li>\n<li><strong>DELETE</strong>请求服务器删除请求URL指定的资源</li>\n</ol>\n<h3 id=\"从浏览器地址栏输入url到显示页面的步骤-以HTTP为例\"><a href=\"#从浏览器地址栏输入url到显示页面的步骤-以HTTP为例\" class=\"headerlink\" title=\"从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)\"></a>从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)</h3><ol>\n<li>在浏览器地址栏输入URL</li>\n<li>浏览器查看<strong>缓存</strong>，如果请求资源在缓存中并且新鲜，跳转到转码步骤<ol>\n<li>如果资源未缓存，发起新请求</li>\n<li>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</li>\n<li>检验新鲜通常有两个HTTP头进行控制<code>Expires</code>和<code>Cache-Control</code>：<ul>\n<li>HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期</li>\n<li>HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>浏览器<strong>解析URL</strong>获取协议，主机，端口，path</li>\n<li>浏览器<strong>组装一个HTTP（GET）请求报文</strong></li>\n<li>浏览器<strong>获取主机ip地址</strong>，过程如下：<ol>\n<li>浏览器缓存</li>\n<li>本机缓存</li>\n<li>hosts文件</li>\n<li>路由器缓存</li>\n<li>ISP DNS缓存</li>\n<li>DNS递归查询（可能存在负载均衡导致每次IP不一样）</li>\n</ol>\n</li>\n<li><strong>打开一个socket与目标IP地址，端口建立TCP链接</strong>，三次握手如下：<ol>\n<li>客户端发送一个TCP的<strong>SYN=1，Seq=X</strong>的包到服务器端口</li>\n<li>服务器发回<strong>SYN=1， ACK=X+1， Seq=Y</strong>的响应包</li>\n<li>客户端发送<strong>ACK=Y+1， Seq=Z</strong></li>\n</ol>\n</li>\n<li>TCP链接建立后<strong>发送HTTP请求</strong></li>\n<li>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序</li>\n<li>服务器检查<strong>HTTP请求头是否包含缓存验证信息</strong>如果验证缓存新鲜，返回<strong>304</strong>等对应状态码</li>\n<li>处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作</li>\n<li>服务器将<strong>响应报文通过TCP连接发送回浏览器</strong></li>\n<li>浏览器接收HTTP响应，然后根据情况选择<strong>关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下</strong>：<ol>\n<li>主动方发送<strong>Fin=1， Ack=Z， Seq= X</strong>报文</li>\n<li>被动方发送<strong>ACK=X+1， Seq=Z</strong>报文</li>\n<li>被动方发送<strong>Fin=1， ACK=X， Seq=Y</strong>报文</li>\n<li>主动方发送<strong>ACK=Y， Seq=X</strong>报文</li>\n</ol>\n</li>\n<li>浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同</li>\n<li>如果资源可缓存，<strong>进行缓存</strong></li>\n<li>对响应进行<strong>解码</strong>（例如gzip压缩）</li>\n<li>根据资源类型决定如何处理（假设资源为HTML文档）</li>\n<li><strong>解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本</strong>，这些操作没有严格的先后顺序，以下分别解释</li>\n<li><strong>构建DOM树</strong>：<ol>\n<li><strong>Tokenizing</strong>：根据HTML规范将字符流解析为标记</li>\n<li><strong>Lexing</strong>：词法分析将标记转换为对象并定义属性和规则</li>\n<li><strong>DOM construction</strong>：根据HTML标记关系将对象组成DOM树</li>\n</ol>\n</li>\n<li>解析过程中遇到图片、样式表、js文件，<strong>启动下载</strong></li>\n<li>构建<strong>CSSOM树</strong>：<ol>\n<li><strong>Tokenizing</strong>：字符流转换为标记流</li>\n<li><strong>Node</strong>：根据标记创建节点</li>\n<li><strong>CSSOM</strong>：节点创建CSSOM树</li>\n</ol>\n</li>\n<li><strong><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction\" target=\"_blank\" rel=\"external\">根据DOM树和CSSOM树构建渲染树</a></strong>:<ol>\n<li>从DOM树的根节点遍历所有<strong>可见节点</strong>，不可见节点包括：1）<code>script</code>,<code>meta</code>这样本身不可见的标签。2)被css隐藏的节点，如<code>display: none</code></li>\n<li>对每一个可见节点，找到恰当的CSSOM规则并应用</li>\n<li>发布可视节点的内容和计算样式</li>\n</ol>\n</li>\n<li><strong>js解析如下</strong>：<ol>\n<li>浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时<strong>document.readystate为loading</strong></li>\n<li>HTML解析器遇到<strong>没有async和defer的script时</strong>，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。<strong>同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容</strong></li>\n<li>当解析器遇到设置了<strong>async</strong>属性的script时，开始下载脚本并继续解析文档。脚本会在它<strong>下载完成后尽快执行</strong>，但是<strong>解析器不会停下来等它下载</strong>。异步脚本<strong>禁止使用document.write()</strong>，它们可以访问自己script和之前的文档元素</li>\n<li>当文档完成解析，document.readState变成interactive</li>\n<li>所有<strong>defer</strong>脚本会<strong>按照在文档出现的顺序执行</strong>，延迟脚本<strong>能访问完整文档树</strong>，禁止使用document.write()</li>\n<li>浏览器<strong>在Document对象上触发DOMContentLoaded事件</strong></li>\n<li>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些<strong>内容完成载入并且所有异步脚本完成载入和执行</strong>，document.readState变为complete,window触发load事件</li>\n</ol>\n</li>\n<li><strong>显示页面</strong>（HTML解析过程中会逐步显示页面）</li>\n</ol>\n<h3 id=\"HTTP-request报文结构是怎样的\"><a href=\"#HTTP-request报文结构是怎样的\" class=\"headerlink\" title=\"HTTP request报文结构是怎样的\"></a>HTTP request报文结构是怎样的</h3><p><a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html\" target=\"_blank\" rel=\"external\">rfc2616</a>中进行了定义：</p>\n<ol>\n<li>首行是<strong>Request-Line</strong>包括：<strong>请求方法</strong>，<strong>请求URI</strong>，<strong>协议版本</strong>，<strong>CRLF</strong></li>\n<li>首行之后是若干行<strong>请求头</strong>，包括<strong>general-header</strong>，<strong>request-header</strong>或者<strong>entity-header</strong>，每个一行以CRLF结束</li>\n<li>请求头和消息实体之间有一个<strong>CRLF分隔</strong></li>\n<li>根据实际请求需要可能包含一个<strong>消息实体</strong><br>一个请求报文例子如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1</div><div class=\"line\">Host: www.w3.org</div><div class=\"line\">Connection: keep-alive</div><div class=\"line\">Cache-Control: max-age=0</div><div class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36</div><div class=\"line\">Referer: https://www.google.com.hk/</div><div class=\"line\">Accept-Encoding: gzip,deflate,sdch</div><div class=\"line\">Accept-Language: zh-CN,zh;q=0.8,en;q=0.6</div><div class=\"line\">Cookie: authorstyle=yes</div><div class=\"line\">If-None-Match: &quot;2cc8-3e3073913b100&quot;</div><div class=\"line\">If-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT</div><div class=\"line\"></div><div class=\"line\">name=qiu&amp;age=25</div></pre></td></tr></table></figure>\n<h3 id=\"HTTP-response报文结构是怎样的\"><a href=\"#HTTP-response报文结构是怎样的\" class=\"headerlink\" title=\"HTTP response报文结构是怎样的\"></a>HTTP response报文结构是怎样的</h3><p><a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html\" target=\"_blank\" rel=\"external\">rfc2616</a>中进行了定义：</p>\n<ol>\n<li>首行是状态行包括：<strong>HTTP版本，状态码，状态描述</strong>，后面跟一个CRLF</li>\n<li>首行之后是<strong>若干行响应头</strong>，包括：<strong>通用头部，响应头部，实体头部</strong></li>\n<li>响应头部和响应实体之间用<strong>一个CRLF空行</strong>分隔</li>\n<li>最后是一个可能的<strong>消息实体</strong><br>响应报文例子如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 200 OK</div><div class=\"line\">Date: Tue, 08 Jul 2014 05:28:43 GMT</div><div class=\"line\">Server: Apache/2</div><div class=\"line\">Last-Modified: Wed, 01 Sep 2004 13:24:52 GMT</div><div class=\"line\">ETag: &quot;40d7-3e3073913b100&quot;</div><div class=\"line\">Accept-Ranges: bytes</div><div class=\"line\">Content-Length: 16599</div><div class=\"line\">Cache-Control: max-age=21600</div><div class=\"line\">Expires: Tue, 08 Jul 2014 11:28:43 GMT</div><div class=\"line\">P3P: policyref=&quot;http://www.w3.org/2001/05/P3P/p3p.xml&quot;</div><div class=\"line\">Content-Type: text/html; charset=iso-8859-1</div><div class=\"line\"></div><div class=\"line\">&#123;&quot;name&quot;: &quot;qiu&quot;, &quot;age&quot;: 25&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"如何进行网站性能优化\"><a href=\"#如何进行网站性能优化\" class=\"headerlink\" title=\"如何进行网站性能优化\"></a>如何进行网站性能优化</h3><p><a href=\"https://developer.yahoo.com/performance/rules.html\" target=\"_blank\" rel=\"external\">雅虎Best Practices for Speeding Up Your Web Site</a>：</p>\n<ul>\n<li><p>content方面</p>\n<ol>\n<li>减少HTTP请求：合并文件、CSS精灵、inline Image</li>\n<li>减少DNS查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询</li>\n<li>避免重定向：多余的中间访问</li>\n<li>使Ajax可缓存</li>\n<li>非必须组件延迟加载</li>\n<li>未来所需组件预加载</li>\n<li>减少DOM元素数量</li>\n<li>将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量</li>\n<li>减少iframe数量</li>\n<li>不要404</li>\n</ol>\n</li>\n<li><p>Server方面</p>\n<ol>\n<li>使用CDN</li>\n<li>添加Expires或者Cache-Control响应头</li>\n<li>对组件使用Gzip压缩</li>\n<li>配置ETag</li>\n<li>Flush Buffer Early</li>\n<li>Ajax使用GET进行请求</li>\n<li>避免空src的img标签</li>\n</ol>\n</li>\n<li>Cookie方面<ol>\n<li>减小cookie大小</li>\n<li>引入资源的域名不要包含cookie</li>\n</ol>\n</li>\n<li>css方面<ol>\n<li>将样式表放到页面顶部</li>\n<li>不使用CSS表达式</li>\n<li>使用<link>不使用@import</li>\n<li>不使用IE的Filter</li>\n</ol>\n</li>\n<li>Javascript方面<ol>\n<li>将脚本放到页面底部</li>\n<li>将javascript和css从外部引入</li>\n<li>压缩javascript和css</li>\n<li>删除不需要的脚本</li>\n<li>减少DOM访问</li>\n<li>合理设计事件监听器</li>\n</ol>\n</li>\n<li>图片方面<ol>\n<li>优化图片：根据实际颜色需要选择色深、压缩</li>\n<li>优化css精灵</li>\n<li>不要在HTML中拉伸图片</li>\n<li>保证favicon.ico小并且可缓存</li>\n</ol>\n</li>\n<li>移动方面<ol>\n<li>保证组件小于25k</li>\n<li>Pack Components into a Multipart Document</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"什么是渐进增强\"><a href=\"#什么是渐进增强\" class=\"headerlink\" title=\"什么是渐进增强\"></a>什么是渐进增强</h3><p>渐进增强是指在web设计时强调可访问性、语义化HTML标签、外部样式表和脚本。保证所有人都能访问页面的基本内容和功能同时为高级浏览器和高带宽用户提供更好的用户体验。核心原则如下:</p>\n<ul>\n<li>所有浏览器都必须能访问基本内容</li>\n<li>所有浏览器都必须能使用基本功能</li>\n<li>所有内容都包含在语义化标签中</li>\n<li>通过外部CSS提供增强的布局</li>\n<li>通过非侵入式、外部javascript提供增强功能</li>\n<li>end-user web browser preferences are respected</li>\n</ul>\n<h3 id=\"HTTP状态码及其含义\"><a href=\"#HTTP状态码及其含义\" class=\"headerlink\" title=\"HTTP状态码及其含义\"></a>HTTP状态码及其含义</h3><p>参考<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\" target=\"_blank\" rel=\"external\">RFC 2616</a></p>\n<ul>\n<li>1XX：信息状态码<ul>\n<li><strong>100 Continue</strong>：客户端应当继续发送请求。这个临时相应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求万仇向客户端发送一个最终响应</li>\n<li><strong>101 Switching Protocols</strong>：服务器已经理解力客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到Upgrade消息头中定义的那些协议。</li>\n</ul>\n</li>\n<li>2XX：成功状态码<ul>\n<li><strong>200 OK</strong>：请求成功，请求所希望的响应头或数据体将随此响应返回</li>\n<li><strong>201 Created</strong>：</li>\n<li><strong>202 Accepted</strong>：</li>\n<li><strong>203 Non-Authoritative Information</strong>：</li>\n<li><strong>204 No Content</strong>：</li>\n<li><strong>205 Reset Content</strong>：</li>\n<li><strong>206 Partial Content</strong>：</li>\n</ul>\n</li>\n<li>3XX：重定向<ul>\n<li><strong>300 Multiple Choices</strong>：</li>\n<li><strong>301 Moved Permanently</strong>：</li>\n<li><strong>302 Found</strong>：</li>\n<li><strong>303 See Other</strong>：</li>\n<li><strong>304 Not Modified</strong>：</li>\n<li><strong>305 Use Proxy</strong>：</li>\n<li><strong>306 （unused）</strong>：</li>\n<li><strong>307 Temporary Redirect</strong>：</li>\n</ul>\n</li>\n<li>4XX：客户端错误<ul>\n<li><strong>400 Bad Request</strong>:</li>\n<li><strong>401 Unauthorized</strong>:</li>\n<li><strong>402 Payment Required</strong>:</li>\n<li><strong>403 Forbidden</strong>:</li>\n<li><strong>404 Not Found</strong>:</li>\n<li><strong>405 Method Not Allowed</strong>:</li>\n<li><strong>406 Not Acceptable</strong>:</li>\n<li><strong>407 Proxy Authentication Required</strong>:</li>\n<li><strong>408 Request Timeout</strong>:</li>\n<li><strong>409 Conflict</strong>:</li>\n<li><strong>410 Gone</strong>:</li>\n<li><strong>411 Length Required</strong>:</li>\n<li><strong>412 Precondition Failed</strong>:</li>\n<li><strong>413 Request Entity Too Large</strong>:</li>\n<li><strong>414 Request-URI Too Long</strong>:</li>\n<li><strong>415 Unsupported Media Type</strong>:</li>\n<li><strong>416 Requested Range Not Satisfiable</strong>:</li>\n<li><strong>417 Expectation Failed</strong>:</li>\n</ul>\n</li>\n<li>5XX: 服务器错误<ul>\n<li><strong>500 Internal Server Error</strong>:</li>\n<li><strong>501 Not Implemented</strong>:</li>\n<li><strong>502 Bad Gateway</strong>:</li>\n<li><strong>503 Service Unavailable</strong>:</li>\n<li><strong>504 Gateway Timeout</strong>:</li>\n<li><strong>505 HTTP Version Not Supported</strong>:</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"CSS部分\"><a href=\"#CSS部分\" class=\"headerlink\" title=\"$CSS部分\"></a>$CSS部分</h2><h3 id=\"CSS选择器有哪些\"><a href=\"#CSS选择器有哪些\" class=\"headerlink\" title=\"CSS选择器有哪些\"></a>CSS选择器有哪些</h3><ol>\n<li><strong>*通用选择器</strong>：选择所有元素，<strong>不参与计算优先级</strong>，兼容性IE6+</li>\n<li><strong>#X id选择器</strong>：选择id值为X的元素，兼容性：IE6+</li>\n<li><strong>.X 类选择器</strong>： 选择class包含X的元素，兼容性：IE6+</li>\n<li><strong>X Y后代选择器</strong>： 选择满足X选择器的后代节点中满足Y选择器的元素，兼容性：IE6+</li>\n<li><strong>X 元素选择器</strong>： 选择标所有签为X的元素，兼容性：IE6+</li>\n<li><strong>:link，：visited，：focus，：hover，：active链接状态</strong>： 选择特定状态的链接元素，顺序LoVe HAte，兼容性: IE4+</li>\n<li><strong>X + Y直接兄弟选择器</strong>：在<strong>X之后第一个兄弟节点</strong>中选择满足Y选择器的元素，兼容性： IE7+</li>\n<li><strong>X &gt; Y子选择器</strong>： 选择X的子元素中满足Y选择器的元素，兼容性： IE7+</li>\n<li><strong>X ~ Y兄弟</strong>： 选择<strong>X之后所有兄弟节点</strong>中满足Y选择器的元素，兼容性： IE7+</li>\n<li><strong>[attr]</strong>：选择所有设置了attr属性的元素，兼容性IE7+</li>\n<li><strong>[attr=value]</strong>：选择属性值刚好为value的元素</li>\n<li><strong>[attr~=value]</strong>：选择属性值为空白符分隔，其中一个的值刚好是value的元素</li>\n<li><strong>[attr|=value]</strong>：选择属性值刚好为value或者value-开头的元素</li>\n<li><strong>[attr^=value]</strong>：选择属性值以value开头的元素</li>\n<li><strong>[attr$=value]</strong>：选择属性值以value结尾的元素</li>\n<li><strong>[attr*=value]</strong>：选择属性值中包含value的元素</li>\n<li><strong>[:checked]</strong>：选择单选框，复选框，下拉框中选中状态下的元素，兼容性：IE9+</li>\n<li><strong>X:after, X::after</strong>：after伪元素，选择元素虚拟子元素（元素的最后一个子元素），CSS3中::表示伪元素。兼容性:after为IE8+，::after为IE9+</li>\n<li><strong>:hover</strong>：鼠标移入状态的元素，兼容性a标签IE4+， 所有元素IE7+</li>\n<li><strong>:not(selector)</strong>：选择不符合selector的元素。<strong>不参与计算优先级</strong>，兼容性：IE9+</li>\n<li><strong>::first-letter</strong>：伪元素，选择块元素第一行的第一个字母，兼容性IE5.5+</li>\n<li><strong>::first-line</strong>：伪元素，选择块元素的第一行，兼容性IE5.5+</li>\n<li><strong>:nth-child(an + b)</strong>：伪类，选择前面有an + b - 1个兄弟节点的元素，其中n<br>&gt;= 0， 兼容性IE9+</li>\n<li><strong>:nth-last-child(an + b)</strong>：伪类，选择后面有an + b - 1个兄弟节点的元素<br>其中n &gt;= 0，兼容性IE9+</li>\n<li><strong>X:nth-of-type(an+b)</strong>：伪类，X为选择器，<strong>解析得到元素标签</strong>，选择<strong>前面</strong>有an + b - 1个<strong>相同标签</strong>兄弟节点的元素。兼容性IE9+</li>\n<li><strong>X:nth-last-of-type(an+b)</strong>：伪类，X为选择器，解析得到元素标签，选择<strong>后面</strong>有an+b-1个相同<strong>标签</strong>兄弟节点的元素。兼容性IE9+</li>\n<li><strong>X:first-child</strong>：伪类，选择满足X选择器的元素，且这个元素是其父节点的第一个子元素。兼容性IE7+</li>\n<li><strong>X:last-child</strong>：伪类，选择满足X选择器的元素，且这个元素是其父节点的最后一个子元素。兼容性IE9+</li>\n<li><strong>X:only-child</strong>：伪类，选择满足X选择器的元素，且这个元素是其父元素的唯一子元素。兼容性IE9+</li>\n<li><strong>X:only-of-type</strong>：伪类，选择X选择的元素，<strong>解析得到元素标签</strong>，如果该元素没有相同类型的兄弟节点时选中它。兼容性IE9+</li>\n<li><strong>X:first-of-type</strong>：伪类，选择X选择的元素，<strong>解析得到元素标签</strong>，如果该元素<br>是此此类型元素的第一个兄弟。选中它。兼容性IE9+</li>\n</ol>\n<h3 id=\"css-sprite是什么-有什么优缺点\"><a href=\"#css-sprite是什么-有什么优缺点\" class=\"headerlink\" title=\"css sprite是什么,有什么优缺点\"></a>css sprite是什么,有什么优缺点</h3><p>概念：将多个小图片拼接到一个图片中。通过background-position和元素尺寸调节需要显示的背景图案。</p>\n<p>优点：</p>\n<ol>\n<li>减少HTTP请求数，极大地提高页面加载速度</li>\n<li>增加图片信息重复度，提高压缩比，减少图片大小</li>\n<li>更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>图片合并麻烦</li>\n<li>维护麻烦，修改一个图片可能需要从新布局整个图片，样式</li>\n</ol>\n<h3 id=\"display-none-与visibility-hidden-的区别\"><a href=\"#display-none-与visibility-hidden-的区别\" class=\"headerlink\" title=\"display: none;与visibility: hidden;的区别\"></a><code>display: none;</code>与<code>visibility: hidden;</code>的区别</h3><p>联系：它们都能让元素不可见</p>\n<p>区别：</p>\n<ol>\n<li>display:none;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；visibility: hidden;不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见</li>\n<li>display: none;是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示；visibility: hidden;是继承属性，子孙节点消失由于继承了hidden，通过设置visibility: visible;可以让子孙节点显式</li>\n<li>修改常规流中元素的display通常会造成文档重排。修改visibility属性只会造成本元素的重绘。</li>\n<li>读屏器不会读取display: none;元素内容；会读取visibility: hidden;元素内容</li>\n</ol>\n<h3 id=\"css-hack原理及常用hack\"><a href=\"#css-hack原理及常用hack\" class=\"headerlink\" title=\"css hack原理及常用hack\"></a>css hack原理及常用hack</h3><p>原理：利用<strong>不同浏览器对CSS的支持和解析结果不一样</strong>编写针对特定浏览器样式。常见的hack有1）属性hack。2）选择器hack。3）IE条件注释</p>\n<ul>\n<li>IE条件注释：适用于[IE5, IE9]常见格式如下</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--[if IE 6]&gt;</div><div class=\"line\">Special instructions for IE 6 here</div><div class=\"line\">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>选择器hack：不同浏览器对选择器的支持不一样</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">/***** Selector Hacks ******/</div><div class=\"line\"></div><div class=\"line\">/* IE6 and below */</div><div class=\"line\">* html #uno  &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE7 */</div><div class=\"line\">*:first-child+html #dos &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE7, FF, Saf, Opera  */</div><div class=\"line\">html&gt;body #tres &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE8, FF, Saf, Opera (Everything but IE 6,7) */</div><div class=\"line\">html&gt;/**/body #cuatro &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* Opera 9.27 and below, safari 2 */</div><div class=\"line\">html:first-child #cinco &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* Safari 2-3 */</div><div class=\"line\">html[xmlns*=&quot;&quot;] body:last-child #seis &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* safari 3+, chrome 1+, opera9+, ff 3.5+ */</div><div class=\"line\">body:nth-of-type(1) #siete &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* safari 3+, chrome 1+, opera9+, ff 3.5+ */</div><div class=\"line\">body:first-of-type #ocho &#123;  color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* saf3+, chrome1+ */</div><div class=\"line\">@media screen and (-webkit-min-device-pixel-ratio:0) &#123;</div><div class=\"line\"> #diez  &#123; color: red  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/* iPhone / mobile webkit */</div><div class=\"line\">@media screen and (max-device-width: 480px) &#123;</div><div class=\"line\"> #veintiseis &#123; color: red  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/* Safari 2 - 3.1 */</div><div class=\"line\">html[xmlns*=&quot;&quot;]:root #trece  &#123; color: red  &#125;</div><div class=\"line\"></div><div class=\"line\">/* Safari 2 - 3.1, Opera 9.25 */</div><div class=\"line\">*|html[xmlns*=&quot;&quot;] #catorce &#123; color: red  &#125;</div><div class=\"line\"></div><div class=\"line\">/* Everything but IE6-8 */</div><div class=\"line\">:root *&gt; #quince &#123; color: red  &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE7 */</div><div class=\"line\">*+html #dieciocho &#123;  color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* Firefox only. 1+ */</div><div class=\"line\">#veinticuatro,  x:-moz-any-link  &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* Firefox 3.0+ */</div><div class=\"line\">#veinticinco,  x:-moz-any-link, x:default  &#123; color: red  &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>属性hack：不同浏览器解析bug或方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* IE6 */</div><div class=\"line\">#once &#123; _color: blue &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE6, IE7 */</div><div class=\"line\">#doce &#123; *color: blue; /* or #color: blue */ &#125;</div><div class=\"line\"></div><div class=\"line\">/* Everything but IE6 */</div><div class=\"line\">#diecisiete &#123; color/**/: blue &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE6, IE7, IE8 */</div><div class=\"line\">#diecinueve &#123; color: blue\\9; &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE7, IE8 */</div><div class=\"line\">#veinte &#123; color/*\\**/: blue\\9; &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE6, IE7 -- acts as an !important */</div><div class=\"line\">#veintesiete &#123; color: blue !ie; &#125; /* string after ! can be anything */</div></pre></td></tr></table></figure>\n<h3 id=\"specified-value-computed-value-used-value计算方法\"><a href=\"#specified-value-computed-value-used-value计算方法\" class=\"headerlink\" title=\"specified value,computed value,used value计算方法\"></a>specified value,computed value,used value计算方法</h3><ul>\n<li><p>specified value: 计算方法如下：</p>\n<ol>\n<li>如果样式表设置了一个值，使用这个值</li>\n<li>如果没有设置值，这个属性是继承属性，从父元素继承</li>\n<li>如果没设置，并且不是继承属性，使用css规范指定的初始值</li>\n</ol>\n</li>\n<li><p>computed value: 以specified value根据规范定义的行为进行计算，通常将相对值计算为绝对值，例如em根据font-size进行计算。一些使用百分数并且需要布局来决定最终值的属性，如width，margin。百分数就直接作为computed value。line-height的无单位值也直接作为computed value。这些值将在计算used value时得到绝对值。<strong>computed value的主要作用是用于继承</strong></p>\n</li>\n<li><p>used value：属性计算后的最终值，对于大多数属性可以通过window.getComputedStyle获得，尺寸值单位为像素。以下属性依赖于布局，</p>\n<ul>\n<li>background-position</li>\n<li>bottom, left, right, top</li>\n<li>height, width</li>\n<li>margin-bottom, margin-left, margin-right, margin-top</li>\n<li>min-height, min-width</li>\n<li>padding-bottom, padding-left, padding-right, padding-top</li>\n<li>text-indent</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"link与-import的区别\"><a href=\"#link与-import的区别\" class=\"headerlink\" title=\"link与@import的区别\"></a><code>link</code>与<code>@import</code>的区别</h3><ol>\n<li><code>link</code>是HTML方式， <code>@import</code>是CSS方式</li>\n<li><code>link</code>最大限度支持并行下载，<code>@import</code>过多嵌套导致串行下载，出现<a href=\"http://www.bluerobot.com/web/css/fouc.asp/\" target=\"_blank\" rel=\"external\">FOUC</a></li>\n<li><code>link</code>可以通过<code>rel=&quot;alternate stylesheet&quot;</code>指定候选样式</li>\n<li>浏览器对<code>link</code>支持早于<code>@import</code>，可以使用<code>@import</code>对老浏览器隐藏样式</li>\n<li><code>@import</code>必须在样式规则之前，可以在css文件中引用其他文件</li>\n<li>总体来说：<strong><a href=\"http://www.stevesouders.com/blog/2009/04/09/dont-use-import/\" target=\"_blank\" rel=\"external\">link优于@import</a></strong></li>\n</ol>\n<h3 id=\"display-block-和display-inline-的区别\"><a href=\"#display-block-和display-inline-的区别\" class=\"headerlink\" title=\"display: block;和display: inline;的区别\"></a><code>display: block;</code>和<code>display: inline;</code>的区别</h3><p><code>block</code>元素特点：</p>\n<p>1.处于常规流中时，如果<code>width</code>没有设置，会自动填充满父容器<br>2.可以应用<code>margin/padding</code><br>3.在没有设置高度的情况下会扩展高度以包含常规流中的子元素<br>4.处于常规流中时布局时在前后元素位置之间（独占一个水平空间）<br>5.忽略<code>vertical-align</code></p>\n<p><code>inline</code>元素特点</p>\n<p>1.水平方向上根据<code>direction</code>依次布局<br>2.不会在元素前后进行换行<br>3.受<code>white-space</code>控制<br>4.<code>margin/padding</code>在竖直方向上无效，水平方向上有效<br>5.<code>width/height</code>属性对非替换行内元素无效，宽度由元素内容决定<br>6.非替换行内元素的行框高由<code>line-height</code>确定，替换行内元素的行框高由<code>height</code>,<code>margin</code>,<code>padding</code>,<code>border</code>决定<br>6.浮动或绝对定位时会转换为<code>block</code><br>7.<code>vertical-align</code>属性生效</p>\n<h3 id=\"PNG-GIF-JPG的区别及如何选\"><a href=\"#PNG-GIF-JPG的区别及如何选\" class=\"headerlink\" title=\"PNG,GIF,JPG的区别及如何选\"></a>PNG,GIF,JPG的区别及如何选</h3><p>参考资料： <a href=\"http://www.yuiblog.com/blog/2008/11/04/imageopt-2/\" target=\"_blank\" rel=\"external\">选择正确的图片格式</a><br><strong>GIF</strong>:</p>\n<ol>\n<li>8位像素，256色</li>\n<li>无损压缩</li>\n<li>支持简单动画</li>\n<li>支持boolean透明</li>\n<li>适合简单动画</li>\n</ol>\n<p><strong>JPEG</strong>：</p>\n<ol>\n<li>颜色限于256</li>\n<li>有损压缩</li>\n<li>可控制压缩质量</li>\n<li>不支持透明</li>\n<li>适合照片</li>\n</ol>\n<p><strong>PNG</strong>：</p>\n<ol>\n<li>有PNG8和truecolor PNG</li>\n<li>PNG8类似GIF颜色上限为256，文件小，支持alpha透明度，无动画</li>\n<li>适合图标、背景、按钮</li>\n</ol>\n<h3 id=\"CSS有哪些继承属性\"><a href=\"#CSS有哪些继承属性\" class=\"headerlink\" title=\"CSS有哪些继承属性\"></a>CSS有哪些继承属性</h3><ul>\n<li>关于文字排版的属性如：<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font\" target=\"_blank\" rel=\"external\">font</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/word-break\" target=\"_blank\" rel=\"external\">word-break</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing\" target=\"_blank\" rel=\"external\">letter-spacing</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-align\" target=\"_blank\" rel=\"external\">text-align</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering\" target=\"_blank\" rel=\"external\">text-rendering</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/word-spacing\" target=\"_blank\" rel=\"external\">word-spacing</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/white-space\" target=\"_blank\" rel=\"external\">white-space</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent\" target=\"_blank\" rel=\"external\">text-indent</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform\" target=\"_blank\" rel=\"external\">text-transform</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow\" target=\"_blank\" rel=\"external\">text-shadow</a></li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\" target=\"_blank\" rel=\"external\">line-height</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color\" target=\"_blank\" rel=\"external\">color</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/visibility\" target=\"_blank\" rel=\"external\">visibility</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\" target=\"_blank\" rel=\"external\">cursor</a></li>\n</ul>\n<h3 id=\"IE6浏览器有哪些常见的bug-缺陷或者与标准不一致的地方-如何解决\"><a href=\"#IE6浏览器有哪些常见的bug-缺陷或者与标准不一致的地方-如何解决\" class=\"headerlink\" title=\"IE6浏览器有哪些常见的bug,缺陷或者与标准不一致的地方,如何解决\"></a>IE6浏览器有哪些常见的bug,缺陷或者与标准不一致的地方,如何解决</h3><ul>\n<li>IE6不支持min-height，解决办法使用css hack：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.target &#123;</div><div class=\"line\">    min-height: 100px;</div><div class=\"line\">    height: auto !important;</div><div class=\"line\">    height: 100px;   // IE6下内容高度超过会自动扩展高度</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>ol</code>内<code>li</code>的序号全为1，不递增。解决方法：为li设置样式<code>display: list-item;</code></p>\n</li>\n<li><p>未定位父元素<code>overflow: auto;</code>，包含<code>position: relative;</code>子元素，子元素高于父元素时会溢出。解决办法：1）子元素去掉<code>position: relative;</code>; 2）不能为子元素去掉定位时，父元素<code>position: relative;</code></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</div><div class=\"line\">.outer &#123;</div><div class=\"line\">    width: 215px;</div><div class=\"line\">    height: 100px;</div><div class=\"line\">    border: 1px solid red;</div><div class=\"line\">    overflow: auto;</div><div class=\"line\">    position: relative;  /* 修复bug */</div><div class=\"line\">&#125;</div><div class=\"line\">.inner &#123;</div><div class=\"line\">    width: 100px;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">    background-color: purple;</div><div class=\"line\">    position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;outer&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>IE6只支持<code>a</code>标签的<code>:hover</code>伪类，解决方法：使用js为元素监听mouseenter，mouseleave事件，添加类实现效果：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</div><div class=\"line\">.p:hover,</div><div class=\"line\">.hover &#123;</div><div class=\"line\">    background: purple;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;p class=&quot;p&quot; id=&quot;target&quot;&gt;aaaa bbbbb&lt;span&gt;DDDDDDDDDDDd&lt;/span&gt; aaaa lkjlkjdf j&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">function addClass(elem, cls) &#123;</div><div class=\"line\">    if (elem.className) &#123;</div><div class=\"line\">        elem.className += &apos; &apos; + cls;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        elem.className = cls;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">function removeClass(elem, cls) &#123;</div><div class=\"line\">    var className = &apos; &apos; + elem.className + &apos; &apos;;</div><div class=\"line\">    var reg = new RegExp(&apos; +&apos; + cls + &apos; +&apos;, &apos;g&apos;);</div><div class=\"line\">    elem.className = className.replace(reg, &apos; &apos;).replace(/^ +| +$/, &apos;&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var target = document.getElementById(&apos;target&apos;);</div><div class=\"line\">if (target.attachEvent) &#123;</div><div class=\"line\">    target.attachEvent(&apos;onmouseenter&apos;, function () &#123;</div><div class=\"line\">        addClass(target, &apos;hover&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    target.attachEvent(&apos;onmouseleave&apos;, function () &#123;</div><div class=\"line\">        removeClass(target, &apos;hover&apos;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>IE5-8不支持<code>opacity</code>，解决办法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.opacity &#123;</div><div class=\"line\">    opacity: 0.4</div><div class=\"line\">    filter: alpha(opacity=60); /* for IE5-7 */</div><div class=\"line\">    -ms-filter: &quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=60)&quot;; /* for IE 8*/</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>IE6在设置<code>height</code>小于<code>font-size</code>时高度值为<code>font-size</code>，解决办法：<code>font-size: 0;</code></li>\n<li>IE6不支持PNG透明背景，解决办法: <strong>IE6下使用gif图片</strong></li>\n<li>IE6-7不支持<code>display: inline-block</code>解决办法：设置inline并触发hasLayout</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">display: inline-block;</div><div class=\"line\">*display: inline;</div><div class=\"line\">*zoom: 1;</div></pre></td></tr></table></figure>\n<ul>\n<li>IE6下浮动元素在浮动方向上与父元素边界接触元素的外边距会加倍。解决办法：<br>1）使用padding控制间距。<br>2）浮动元素<code>display: inline;</code>这样解决问题且无任何副作用：css标准规定浮动元素display:inline会自动调整为block</li>\n<li>通过为块级元素设置宽度和左右margin为auto时，IE6不能实现水平居中，解决方法：为父元素设置<code>text-align: center;</code></li>\n</ul>\n<h3 id=\"容器包含若干浮动元素时如何清理-包含-浮动\"><a href=\"#容器包含若干浮动元素时如何清理-包含-浮动\" class=\"headerlink\" title=\"容器包含若干浮动元素时如何清理(包含)浮动\"></a>容器包含若干浮动元素时如何清理(包含)浮动</h3><ol>\n<li>容器元素闭合标签前添加额外元素并设置<code>clear: both</code></li>\n<li>父元素触发块级格式化上下文(见块级可视化上下文部分)</li>\n<li>设置容器元素伪元素进行清理<a href=\"http://nicolasgallagher.com/micro-clearfix-hack/\" target=\"_blank\" rel=\"external\">推荐的清理浮动方法</a></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* 在标准浏览器下使用</div><div class=\"line\">* 1 content内容为空格用于修复opera下文档中出现</div><div class=\"line\">*   contenteditable属性时在清理浮动元素上下的空白</div><div class=\"line\">* 2 使用display使用table而不是block：可以防止容器和</div><div class=\"line\">*   子元素top-margin折叠,这样能使清理效果与BFC，IE6/7</div><div class=\"line\">*   zoom: 1;一致</div><div class=\"line\">**/</div><div class=\"line\"></div><div class=\"line\">.clearfix:before,</div><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">    content: &quot; &quot;; /* 1 */</div><div class=\"line\">    display: table; /* 2 */</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">    clear: both;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">* IE 6/7下使用</div><div class=\"line\">* 通过触发hasLayout实现包含浮动</div><div class=\"line\">**/</div><div class=\"line\">.clearfix &#123;</div><div class=\"line\">    *zoom: 1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"什么是FOUC-如何避免\"><a href=\"#什么是FOUC-如何避免\" class=\"headerlink\" title=\"什么是FOUC?如何避免\"></a>什么是FOUC?如何避免</h3><p>Flash Of Unstyled Content：用户定义样式表加载之前浏览器使用默认样式显示文档，用户样式加载渲染之后再从新显示文档，造成页面闪烁。<strong>解决方法</strong>：把样式表放到文档的<code>head</code></p>\n<h3 id=\"如何创建块级格式化上下文-block-formatting-context-BFC有什么用\"><a href=\"#如何创建块级格式化上下文-block-formatting-context-BFC有什么用\" class=\"headerlink\" title=\"如何创建块级格式化上下文(block formatting context),BFC有什么用\"></a>如何创建块级格式化上下文(block formatting context),BFC有什么用</h3><p>创建规则：</p>\n<ol>\n<li>根元素</li>\n<li>浮动元素（<code>float</code>不是<code>none</code>）</li>\n<li>绝对定位元素（<code>position</code>取值为<code>absolute</code>或<code>fixed</code>）</li>\n<li><code>display</code>取值为<code>inline-block</code>,<code>table-cell</code>, <code>table-caption</code>,<code>flex</code>, <code>inline-flex</code>之一的元素</li>\n<li><code>overflow</code>不是<code>visible</code>的元素</li>\n</ol>\n<p>作用：</p>\n<ol>\n<li>可以包含浮动元素</li>\n<li>不被浮动元素覆盖</li>\n<li>阻止父子元素的margin折叠</li>\n</ol>\n<h3 id=\"display-float-position的关系\"><a href=\"#display-float-position的关系\" class=\"headerlink\" title=\"display,float,position的关系\"></a>display,float,position的关系</h3><ol>\n<li>如果<code>display</code>为none，那么position和float都不起作用，这种情况下元素不产生框</li>\n<li>否则，如果position值为absolute或者fixed，框就是绝对定位的，float的计算值为none，display根据下面的表格进行调整。</li>\n<li>否则，如果float不是none，框是浮动的，display根据下表进行调整</li>\n<li>否则，如果元素是根元素，display根据下表进行调整</li>\n<li>其他情况下display的值为指定值<br>总结起来：<strong>绝对定位、浮动、根元素都需要调整<code>display</code></strong><br><img src=\"http://7xsspr.com2.z0.glb.clouddn.com/display-adjust.png\" alt=\"display转换规则\"></li>\n</ol>\n<h3 id=\"外边距折叠-collapsing-margins\"><a href=\"#外边距折叠-collapsing-margins\" class=\"headerlink\" title=\"外边距折叠(collapsing margins)\"></a>外边距折叠(collapsing margins)</h3><p>毗邻的两个或多个<code>margin</code>会合并成一个margin，叫做外边距折叠。规则如下：</p>\n<ol>\n<li>两个或多个毗邻的普通流中的块元素垂直方向上的margin会折叠</li>\n<li>浮动元素/inline-block元素/绝对定位元素的margin不会和垂直方向上的其他元素的margin折叠</li>\n<li>创建了块级格式化上下文的元素，不会和它的子元素发生margin折叠</li>\n<li>元素自身的margin-bottom和margin-top相邻时也会折叠</li>\n</ol>\n<h3 id=\"如何确定一个元素的包含块-containing-block\"><a href=\"#如何确定一个元素的包含块-containing-block\" class=\"headerlink\" title=\"如何确定一个元素的包含块(containing block)\"></a>如何确定一个元素的包含块(containing block)</h3><ol>\n<li>根元素的包含块叫做初始包含块，在连续媒体中他的尺寸与viewport相同并且anchored at the canvas origin；对于paged media，它的尺寸等于page area。初始包含块的direction属性与根元素相同。</li>\n<li><code>position</code>为<code>relative</code>或者<code>static</code>的元素，它的包含块由最近的块级（<code>display</code>为<code>block</code>,<code>list-item</code>, <code>table</code>）祖先元素的<strong>内容框</strong>组成</li>\n<li>如果元素<code>position</code>为<code>fixed</code>。对于连续媒体，它的包含块为viewport；对于paged media，包含块为page area</li>\n<li><p>如果元素<code>position</code>为<code>absolute</code>，它的包含块由祖先元素中最近一个<code>position</code>为<code>relative</code>,<code>absolute</code>或者<code>fixed</code>的元素产生，规则如下：</p>\n<ul>\n<li>如果祖先元素为行内元素，the containing block is the bounding box around the <strong>padding boxes</strong> of the first and the last inline boxes generated for that element.</li>\n<li><p>其他情况下包含块由祖先节点的<strong>padding edge</strong>组成</p>\n<p>如果找不到定位的祖先元素，包含块为<strong>初始包含块</strong></p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"stacking-context-布局规则\"><a href=\"#stacking-context-布局规则\" class=\"headerlink\" title=\"stacking context,布局规则\"></a>stacking context,布局规则</h3><p>z轴上的默认层叠顺序如下（从下到上）：</p>\n<ol>\n<li>根元素的边界和背景</li>\n<li>常规流中的元素按照html中顺序</li>\n<li>浮动块</li>\n<li>positioned元素按照html中出现顺序</li>\n</ol>\n<p>如何创建stacking context：</p>\n<ol>\n<li>根元素</li>\n<li>z-index不为auto的定位元素</li>\n<li>a flex item with a z-index value other than ‘auto’</li>\n<li>opacity小于1的元素</li>\n<li>在移动端webkit和chrome22+，z-index为auto，position: fixed也将创建新的stacking context</li>\n</ol>\n<h3 id=\"如何水平居中一个元素\"><a href=\"#如何水平居中一个元素\" class=\"headerlink\" title=\"如何水平居中一个元素\"></a>如何水平居中一个元素</h3><ul>\n<li>如果需要居中的元素为<strong>常规流中inline元素</strong>，为父元素设置<code>text-align: center;</code>即可实现</li>\n<li>如果需要居中的元素为<strong>常规流中block元素</strong>，1）为元素设置宽度，2）设置左右margin为auto。3）IE6下需在父元素上设置<code>text-align: center;</code>,再给子元素恢复需要的值</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div class=&quot;content&quot;&gt;</div><div class=\"line\">    aaaaaa aaaaaa a a a a a a a a</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body &#123;</div><div class=\"line\">        background: #DDD;</div><div class=\"line\">        text-align: center; /* 3 */</div><div class=\"line\">    &#125;</div><div class=\"line\">    .content &#123;</div><div class=\"line\">        width: 500px;      /* 1 */</div><div class=\"line\">        text-align: left;  /* 3 */</div><div class=\"line\">        margin: 0 auto;    /* 2 */</div><div class=\"line\"></div><div class=\"line\">        background: purple;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>如果需要居中的元素为<strong>浮动元素</strong>，1）为元素设置宽度，2）<code>position: relative;</code>，3）浮动方向偏移量（left或者right）设置为50%，4）浮动方向上的margin设置为元素宽度一半乘以-1</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div class=&quot;content&quot;&gt;</div><div class=\"line\">    aaaaaa aaaaaa a a a a a a a a</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body &#123;</div><div class=\"line\">        background: #DDD;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .content &#123;</div><div class=\"line\">        width: 500px;         /* 1 */</div><div class=\"line\">        float: left;</div><div class=\"line\"></div><div class=\"line\">        position: relative;   /* 2 */</div><div class=\"line\">        left: 50%;            /* 3 */</div><div class=\"line\">        margin-left: -250px;  /* 4 */</div><div class=\"line\"></div><div class=\"line\">        background-color: purple;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>如果需要居中的元素为<strong>绝对定位元素</strong>，1）为元素设置宽度，2）偏移量设置为50%，3）偏移方向外边距设置为元素宽度一半乘以-1</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div class=&quot;content&quot;&gt;</div><div class=\"line\">    aaaaaa aaaaaa a a a a a a a a</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body &#123;</div><div class=\"line\">        background: #DDD;</div><div class=\"line\">        position: relative;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .content &#123;</div><div class=\"line\">        width: 800px;</div><div class=\"line\"></div><div class=\"line\">        position: absolute;</div><div class=\"line\">        left: 50%;</div><div class=\"line\">        margin-left: -400px;</div><div class=\"line\"></div><div class=\"line\">        background-color: purple;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>如果需要居中的元素为<strong>绝对定位元素</strong>，1）为元素设置宽度，2）设置左右偏移量都为0,3）设置左右外边距都为auto</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div class=&quot;content&quot;&gt;</div><div class=\"line\">    aaaaaa aaaaaa a a a a a a a a</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body &#123;</div><div class=\"line\">        background: #DDD;</div><div class=\"line\">        position: relative;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .content &#123;</div><div class=\"line\">        width: 800px;</div><div class=\"line\"></div><div class=\"line\">        position: absolute;</div><div class=\"line\">        margin: 0 auto;</div><div class=\"line\">        left: 0;</div><div class=\"line\">        right: 0;</div><div class=\"line\"></div><div class=\"line\">        background-color: purple;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"如何竖直居中一个元素\"><a href=\"#如何竖直居中一个元素\" class=\"headerlink\" title=\"如何竖直居中一个元素\"></a>如何竖直居中一个元素</h3><p>参考资料：<a href=\"http://www.vanseodesign.com/css/vertical-centering/\" target=\"_blank\" rel=\"external\">6 Methods For Vertical Centering With CSS</a>。 <a href=\"http://blog.csdn.net/freshlover/article/details/11579669\" target=\"_blank\" rel=\"external\">盘点8种CSS实现垂直居中</a></p>\n<ul>\n<li>需要居中元素为<strong>单行文本</strong>，为包含文本的元素设置大于<code>font-size</code>的<code>line-height</code>：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p class=&quot;text&quot;&gt;center text&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.text &#123;</div><div class=\"line\">    line-height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"javascript概念部分\"><a href=\"#javascript概念部分\" class=\"headerlink\" title=\"$javascript概念部分\"></a>$javascript概念部分</h2><h3 id=\"DOM元素e的e-getAttribute-propName-和e-propName有什么区别和联系\"><a href=\"#DOM元素e的e-getAttribute-propName-和e-propName有什么区别和联系\" class=\"headerlink\" title=\"DOM元素e的e.getAttribute(propName)和e.propName有什么区别和联系\"></a>DOM元素e的e.getAttribute(propName)和e.propName有什么区别和联系</h3><ul>\n<li>e.getAttribute()，是标准DOM操作文档元素属性的方法，具有通用性可在任意文档上使用，返回元素在源文件中<strong>设置的属性</strong></li>\n<li>e.propName通常是在HTML文档中访问特定元素的<strong>特性</strong>，浏览器解析元素后生成对应对象（如a标签生成HTMLAnchorElement），这些对象的特性会根据特定规则结合属性设置得到，对于没有对应特性的属性，只能使用getAttribute进行访问</li>\n<li>e.getAttribute()返回值是源文件中设置的值，类型是字符串或者null（有的实现返回””）</li>\n<li>e.propName返回值可能是字符串、布尔值、对象、undefined等</li>\n<li>大部分attribute与property是一一对应关系，修改其中一个会影响另一个，如id，title等属性</li>\n<li>一些布尔属性<code>&lt;input hidden/&gt;</code>的检测设置需要hasAttribute和removeAttribute来完成，或者设置对应property</li>\n<li>像<code>&lt;a href=&quot;../index.html&quot;&gt;link&lt;/a&gt;</code>中href属性，转换成property的时候需要通过转换得到完整URL</li>\n<li>一些attribute和property不是一一对应如：form控件中<code>&lt;input value=&quot;hello&quot;/&gt;</code>对应的是defaultValue，修改或设置value property修改的是控件当前值，setAttribute修改value属性不会改变value property</li>\n</ul>\n<h3 id=\"offsetWidth-offsetHeight-clientWidth-clientHeight与scrollWidth-scrollHeight的区别\"><a href=\"#offsetWidth-offsetHeight-clientWidth-clientHeight与scrollWidth-scrollHeight的区别\" class=\"headerlink\" title=\"offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别\"></a>offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别</h3><ul>\n<li>offsetWidth/offsetHeight返回值包含<strong>content + padding + border</strong>，效果与e.getBoundingClientRect()相同</li>\n<li>clientWidth/clientHeight返回值只包含<strong>content + padding</strong>，如果有滚动条，也<strong>不包含滚动条</strong></li>\n<li>scrollWidth/scrollHeight返回值包含<strong>content + padding + 溢出内容的尺寸</strong></li>\n</ul>\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ie/hh781509(v=vs.85\" target=\"_blank\" rel=\"external\">Measuring Element Dimension and Location with CSSOM in Windows Internet Explorer 9</a>.aspx)</p>\n<p><img src=\"http://7xsspr.com2.z0.glb.clouddn.com/element-size.png\" alt=\"元素尺寸\"></p>\n<h3 id=\"XMLHttpRequest通用属性和方法\"><a href=\"#XMLHttpRequest通用属性和方法\" class=\"headerlink\" title=\"XMLHttpRequest通用属性和方法\"></a>XMLHttpRequest通用属性和方法</h3><ol>\n<li><code>readyState</code>:表示请求状态的整数，取值：<ul>\n<li>UNSENT（0）：对象已创建</li>\n<li>OPENED（1）：open()成功调用，在这个状态下，可以为xhr设置请求头，或者使用send()发送请求</li>\n<li>HEADERS_RECEIVED(2)：所有重定向已经自动完成访问，并且最终响应的HTTP头已经收到</li>\n<li>LOADING(3)：响应体正在接收</li>\n<li>DONE(4)：数据传输完成或者传输产生错误</li>\n</ul>\n</li>\n<li><code>onreadystatechange</code>：readyState改变时调用的函数</li>\n<li><code>status</code>：服务器返回的HTTP状态码（如，200， 404）</li>\n<li><code>statusText</code>:服务器返回的HTTP状态信息（如，OK，No Content）</li>\n<li><code>responseText</code>:作为字符串形式的来自服务器的完整响应</li>\n<li><code>responseXML</code>: Document对象，表示服务器的响应解析成的XML文档</li>\n<li><code>abort()</code>:取消异步HTTP请求</li>\n<li><code>getAllResponseHeaders()</code>: 返回一个字符串，包含响应中服务器发送的全部HTTP报头。每个报头都是一个用冒号分隔开的名/值对，并且使用一个回车/换行来分隔报头行</li>\n<li><code>getResponseHeader(headerName)</code>:返回headName对应的报头值</li>\n<li><code>open(method, url, asynchronous [, user, password])</code>:初始化准备发送到服务器上的请求。method是HTTP方法，不区分大小写；url是请求发送的相对或绝对URL；asynchronous表示请求是否异步；user和password提供身份验证</li>\n<li><code>setRequestHeader(name, value)</code>:设置HTTP报头</li>\n<li><code>send(body)</code>:对服务器请求进行初始化。参数body包含请求的主体部分，对于POST请求为键值对字符串；对于GET请求，为null</li>\n</ol>\n<h3 id=\"focus-blur与focusin-focusout的区别与联系\"><a href=\"#focus-blur与focusin-focusout的区别与联系\" class=\"headerlink\" title=\"focus/blur与focusin/focusout的区别与联系\"></a>focus/blur与focusin/focusout的区别与联系</h3><ol>\n<li>focus/blur不冒泡，focusin/focusout冒泡</li>\n<li>focus/blur兼容性好，focusin/focusout在除FireFox外的浏览器下都保持良好兼容性，如需使用事件托管，可考虑在FireFox下使用事件捕获elem.addEventListener(‘focus’, handler, true)</li>\n<li>可获得焦点的元素：<ol>\n<li>window</li>\n<li>链接被点击或键盘操作</li>\n<li>表单空间被点击或键盘操作</li>\n<li>设置<code>tabindex</code>属性的元素被点击或键盘操作</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"mouseover-mouseout与mouseenter-mouseleave的区别与联系\"><a href=\"#mouseover-mouseout与mouseenter-mouseleave的区别与联系\" class=\"headerlink\" title=\"mouseover/mouseout与mouseenter/mouseleave的区别与联系\"></a>mouseover/mouseout与mouseenter/mouseleave的区别与联系</h3><ol>\n<li>mouseover/mouseout是标准事件，<strong>所有浏览器都支持</strong>；mouseenter/mouseleave是IE5.5引入的特有事件后来被DOM3标准采纳，现代标准浏览器也支持</li>\n<li>mouseover/mouseout是<strong>冒泡</strong>事件；mouseenter/mouseleave<strong>不冒泡</strong>。需要为<strong>多个元素监听鼠标移入/出事件时，推荐mouseover/mouseout托管，提高性能</strong></li>\n<li>标准事件模型中event.target表示发生移入/出的元素,<strong>vent.relatedTarget</strong>对应移出/如元素；在老IE中event.srcElement表示发生移入/出的元素，<strong>event.toElement</strong>表示移出的目标元素，<strong>event.fromElement</strong>表示移入时的来源元素</li>\n</ol>\n<p>例子：鼠标从div#target元素移出时进行处理，判断逻辑如下：</p>\n<pre><code>&lt;div id=&quot;target&quot;&gt;&lt;span&gt;test&lt;/span&gt;&lt;/div&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar target = document.getElementById(&apos;target&apos;);\nif (target.addEventListener) {\n  target.addEventListener(&apos;mouseout&apos;, mouseoutHandler, false);\n} else if (target.attachEvent) {\n  target.attachEvent(&apos;onmouseout&apos;, mouseoutHandler);\n}\n\nfunction mouseoutHandler(e) {\n  e = e || window.event;\n  var target = e.target || e.srcElement;\n\n  // 判断移出鼠标的元素是否为目标元素\n  if (target.id !== &apos;target&apos;) {\n    return;\n  }\n\n  // 判断鼠标是移出元素还是移到子元素\n  var relatedTarget = event.relatedTarget || e.toElement;\n  while (relatedTarget !== target\n    &amp;&amp; relatedTarget.nodeName.toUpperCase() !== &apos;BODY&apos;) {\n    relatedTarget = relatedTarget.parentNode;\n  }\n\n  // 如果相等，说明鼠标在元素内部移动\n  if (relatedTarget === target) {\n    return;\n  }\n\n  // 执行需要操作\n  //alert(&apos;鼠标移出&apos;);\n\n}\n&lt;/script&gt;\n</code></pre><h3 id=\"sessionStorage-localStorage-cookie区别\"><a href=\"#sessionStorage-localStorage-cookie区别\" class=\"headerlink\" title=\"sessionStorage,localStorage,cookie区别\"></a>sessionStorage,localStorage,cookie区别</h3><ol>\n<li>都会在浏览器端保存，有大小限制，同源限制</li>\n<li>cookie会在请求时发送到服务器，作为会话标识，服务器可修改cookie；web storage不会发送到服务器</li>\n<li>cookie有path概念，子路径可以访问父路径cookie，父路径不能访问子路径cookie</li>\n<li>有效期：cookie在设置的有效期内有效，默认为浏览器关闭；sessionStorage在窗口关闭前有效，localStorage长期有效，直到用户删除</li>\n<li>共享：sessionStorage不能共享，localStorage在同源文档之间共享，cookie在同源且符合path规则的文档之间共享</li>\n<li>localStorage的修改会促发其他文档窗口的update事件</li>\n<li>cookie有secure属性要求HTTPS传输</li>\n<li>浏览器不能保存超过300个cookie，单个服务器不能超过20个，每个cookie不能超过4k。web storage大小支持能达到5M</li>\n</ol>\n<h3 id=\"javascript跨域通信\"><a href=\"#javascript跨域通信\" class=\"headerlink\" title=\"javascript跨域通信\"></a>javascript跨域通信</h3><p>同源：两个文档同源需满足</p>\n<ol>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口相同</li>\n</ol>\n<p>跨域通信：js进行DOM操作、通信时如果目标与当前窗口不满足同源条件，浏览器为了安全会阻止跨域操作。跨域通信通常有以下方法</p>\n<ul>\n<li>如果是log之类的简单<strong>单项通信</strong>，新建<code>&lt;img&gt;</code>,<code>&lt;script&gt;</code>,<code>&lt;link&gt;</code>,<code>&lt;iframe&gt;</code>元素，通过src，href属性设置为目标url。实现跨域请求</li>\n<li>如果请求<strong>json数据</strong>，使用<code>&lt;script&gt;</code>进行jsonp请求</li>\n<li>现代浏览器中<strong>多窗口通信</strong>使用HTML5规范的targetWindow.postMessage(data, origin);其中data是需要发送的对象，origin是目标窗口的origin。window.addEventListener(‘message’, handler, false);handler的event.data是postMessage发送来的数据，event.origin是发送窗口的origin，event.source是发送消息的窗口引用</li>\n<li>内部服务器代理请求跨域url，然后返回数据</li>\n<li>跨域请求数据，现代浏览器可使用HTML5规范的CORS功能，只要目标服务器返回HTTP头部<strong><code>Access-Control-Allow-Origin: *</code></strong>即可像普通ajax一样访问跨域资源</li>\n</ul>\n<h3 id=\"javascript有哪几种数据类型\"><a href=\"#javascript有哪几种数据类型\" class=\"headerlink\" title=\"javascript有哪几种数据类型\"></a>javascript有哪几种数据类型</h3><p>六种基本数据类型</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>string</li>\n<li>boolean</li>\n<li>number</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Symbol\" target=\"_blank\" rel=\"external\">symbol</a>(ES6)</li>\n</ul>\n<p>一种引用类型</p>\n<ul>\n<li>Object</li>\n</ul>\n<h3 id=\"什么闭包-闭包有什么用\"><a href=\"#什么闭包-闭包有什么用\" class=\"headerlink\" title=\"什么闭包,闭包有什么用\"></a>什么闭包,闭包有什么用</h3><p><strong>闭包是在某个作用域内定义的函数，它可以访问这个作用域内的所有变量</strong>。闭包作用域链通常包括三个部分：</p>\n<ol>\n<li>函数本身作用域。</li>\n<li>闭包定义时的作用域。</li>\n<li>全局作用域。</li>\n</ol>\n<p>闭包常见用途：</p>\n<ol>\n<li>创建特权方法用于访问控制</li>\n<li>事件处理程序及回调</li>\n</ol>\n<h3 id=\"javascript有哪几种方法定义函数\"><a href=\"#javascript有哪几种方法定义函数\" class=\"headerlink\" title=\"javascript有哪几种方法定义函数\"></a>javascript有哪几种方法定义函数</h3><ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\" target=\"_blank\" rel=\"external\">函数声明表达式</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\" target=\"_blank\" rel=\"external\">function操作符</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" target=\"_blank\" rel=\"external\">Function 构造函数</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions\" target=\"_blank\" rel=\"external\">ES6:arrow function</a></li>\n</ol>\n<p>重要参考资料：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\" target=\"_blank\" rel=\"external\">MDN:Functions_and_function_scope</a></p>\n<h3 id=\"应用程序存储和离线web应用\"><a href=\"#应用程序存储和离线web应用\" class=\"headerlink\" title=\"应用程序存储和离线web应用\"></a>应用程序存储和离线web应用</h3><p>HTML5新增应用程序缓存，允许web应用将应用程序自身保存到用户浏览器中，用户离线状态也能访问。<br>1.为html元素设置manifest属性:<code>&lt;html manifest=&quot;myapp.appcache&quot;&gt;</code>，其中后缀名只是一个约定，真正识别方式是通过<code>text/cache-manifest</code>作为MIME类型。所以需要配置服务器保证设置正确<br>2.manifest文件首行为<code>CACHE MANIFEST</code>，其余就是要缓存的URL列表，每个一行，相对路径都相对于manifest文件的url。注释以#开头<br>3.url分为三种类型：<code>CACHE</code>:为默认类型。<code>NETWORK</code>：表示资源从不缓存。 <code>FALLBACK</code>:每行包含两个url，第二个URL是指需要加载和存储在缓存中的资源， 第一个URL是一个前缀。任何匹配该前缀的URL都不会缓存，如果从网络中载入这样的URL失败的话，就会用第二个URL指定的缓存资源来替代。以下是一个文件例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">CACHE MANIFEST</div><div class=\"line\"></div><div class=\"line\">CACHE:</div><div class=\"line\">myapp.html</div><div class=\"line\">myapp.css</div><div class=\"line\">myapp.js</div><div class=\"line\"></div><div class=\"line\">FALLBACK:</div><div class=\"line\">videos/ offline_help.html</div><div class=\"line\"></div><div class=\"line\">NETWORK:</div><div class=\"line\">cgi/</div></pre></td></tr></table></figure>\n<h3 id=\"客户端存储localStorage和sessionStorage\"><a href=\"#客户端存储localStorage和sessionStorage\" class=\"headerlink\" title=\"客户端存储localStorage和sessionStorage\"></a>客户端存储localStorage和sessionStorage</h3><ul>\n<li>localStorage有效期为永久，sessionStorage有效期为顶层窗口关闭前</li>\n<li>同源文档可以读取并修改localStorage数据，sessionStorage只允许同一个窗口下的文档访问，如通过iframe引入的同源文档。</li>\n<li>Storage对象通常被当做普通javascript对象使用：<strong>通过设置属性来存取字符串值</strong>，也可以通过<strong>setItem(key, value)设置</strong>，<strong>getItem(key)读取</strong>，<strong>removeItem(key)删除</strong>，<strong>clear()删除所有数据</strong>，<strong>length表示已存储的数据项数目</strong>，<strong>key(index)返回对应索引的key</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">localStorage.setItem(&apos;x&apos;, 1); // storge x-&gt;1</div><div class=\"line\">localStorage.getItem(&apos;x); // return value of x</div><div class=\"line\"></div><div class=\"line\">// 枚举所有存储的键值对</div><div class=\"line\">for (var i = 0, len = localStorage.length; i &lt; len; ++i ) &#123;</div><div class=\"line\">    var name = localStorage.key(i);</div><div class=\"line\">    var value = localStorage.getItem(name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">localStorage.removeItem(&apos;x&apos;); // remove x</div><div class=\"line\">localStorage.clear();  // remove all data</div></pre></td></tr></table></figure>\n<h3 id=\"cookie及其操作\"><a href=\"#cookie及其操作\" class=\"headerlink\" title=\"cookie及其操作\"></a>cookie及其操作</h3><ul>\n<li>cookie是web浏览器存储的少量数据，最早设计为服务器端使用，作为HTTP协议的扩展实现。cookie数据会自动在浏览器和服务器之间传输。</li>\n<li>通过读写cookie检测是否支持</li>\n<li>cookie属性有<strong>名</strong>，<strong>值</strong>，<strong>max-age</strong>，<strong>path</strong>, <strong>domain</strong>，<strong>secure</strong>；</li>\n<li>cookie默认有效期为浏览器会话，一旦用户关闭浏览器，数据就丢失，通过设置<strong>max-age=seconds</strong>属性告诉浏览器cookie有效期</li>\n<li>cookie作用域通过<strong>文档源</strong>和<strong>文档路径</strong>来确定，通过<strong>path</strong>和<strong>domain</strong>进行配置，web页面同目录或子目录文档都可访问</li>\n<li>通过cookie保存数据的方法为：为document.cookie设置一个符合目标的字符串如下</li>\n<li>读取document.cookie获得’; ‘分隔的字符串，key=value,解析得到结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.cookie = &apos;name=qiu; max-age=9999; path=/; domain=domain; secure&apos;;</div><div class=\"line\"></div><div class=\"line\">document.cookie = &apos;name=aaa; path=/; domain=domain; secure&apos;;</div><div class=\"line\">// 要改变cookie的值，需要使用相同的名字、路径和域，新的值</div><div class=\"line\">// 来设置cookie，同样的方法可以用来改变有效期</div><div class=\"line\"></div><div class=\"line\">// 设置max-age为0可以删除指定cookie</div><div class=\"line\"></div><div class=\"line\">//读取cookie，访问document.cookie返回键值对组成的字符串，</div><div class=\"line\">//不同键值对之间用&apos;; &apos;分隔。通过解析获得需要的值</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/qiu-deqing/google/blob/master/module/js/cookieUtil.js\" target=\"_blank\" rel=\"external\">cookieUtil.js</a>：自己写的cookie操作工具</p>\n<h3 id=\"javascript有哪些方法定义对象\"><a href=\"#javascript有哪些方法定义对象\" class=\"headerlink\" title=\"javascript有哪些方法定义对象\"></a>javascript有哪些方法定义对象</h3><ol>\n<li>对象字面量： <code>var obj = {};</code></li>\n<li>构造函数： <code>var obj = new Object();</code></li>\n<li>Object.create(): <code>var obj = Object.create(Object.prototype);</code></li>\n</ol>\n<h3 id=\"运算符判断相等的流程是怎样的\"><a href=\"#运算符判断相等的流程是怎样的\" class=\"headerlink\" title=\"===运算符判断相等的流程是怎样的\"></a>===运算符判断相等的流程是怎样的</h3><ol>\n<li>如果两个值不是相同类型，它们不相等</li>\n<li>如果两个值都是null或者都是undefined，它们相等</li>\n<li>如果两个值都是布尔类型true或者都是false，它们相等</li>\n<li>如果其中有一个是<strong>NaN</strong>，它们不相等</li>\n<li>如果都是数值型并且数值相等，他们相等， -0等于0</li>\n<li>如果他们都是字符串并且在相同位置包含相同的16位值，他它们相等；如果在长度或者内容上不等，它们不相等；两个字符串显示结果相同但是编码不同==和===都认为他们不相等</li>\n<li>如果他们指向相同对象、数组、函数，它们相等；如果指向不同对象，他们不相等</li>\n</ol>\n<h3 id=\"运算符判断相等的流程是怎样的-1\"><a href=\"#运算符判断相等的流程是怎样的-1\" class=\"headerlink\" title=\"==运算符判断相等的流程是怎样的\"></a>==运算符判断相等的流程是怎样的</h3><ol>\n<li>如果两个值类型相同，按照===比较方法进行比较</li>\n<li>如果类型不同，使用如下规则进行比较<ol>\n<li>如果其中一个值是null，另一个是undefined，它们相等</li>\n<li>如果一个值是<strong>数字</strong>另一个是<strong>字符串</strong>，将<strong>字符串转换为数字</strong>进行比较</li>\n<li>如果有布尔类型，将<strong>true转换为1，false转换为0</strong>，然后用==规则继续比较</li>\n<li>如果一个值是对象，另一个是数字或字符串，将对象转换为原始值然后用==规则继续比较</li>\n<li><strong>其他所有情况都认为不相等</strong></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"对象到字符串的转换步骤\"><a href=\"#对象到字符串的转换步骤\" class=\"headerlink\" title=\"对象到字符串的转换步骤\"></a>对象到字符串的转换步骤</h3><ol>\n<li>如果对象有toString()方法，javascript调用它。如果返回一个原始值（primitive value如：string number boolean）,将这个值转换为字符串作为结果</li>\n<li>如果对象没有toString()方法或者返回值不是原始值，javascript寻找对象的valueOf()方法，如果存在就调用它，返回结果是原始值则转为字符串作为结果</li>\n<li>否则，javascript不能从toString()或者valueOf()获得一个原始值，此时throws a TypeError</li>\n</ol>\n<h3 id=\"对象到数字的转换步骤\"><a href=\"#对象到数字的转换步骤\" class=\"headerlink\" title=\"对象到数字的转换步骤\"></a>对象到数字的转换步骤</h3><pre><code>1. 如果对象有valueOf()方法并且返回元素值，javascript将返回值转换为数字作为结果\n2. 否则，如果对象有toString()并且返回原始值，javascript将返回结果转换为数字作为结果\n3. 否则，throws a TypeError\n</code></pre><h3 id=\"lt-gt-lt-gt-的比较规则\"><a href=\"#lt-gt-lt-gt-的比较规则\" class=\"headerlink\" title=\"&lt;,&gt;,&lt;=,&gt;=的比较规则\"></a>&lt;,&gt;,&lt;=,&gt;=的比较规则</h3><p>所有比较运算符都支持任意类型，但是<strong>比较只支持数字和字符串</strong>，所以需要执行必要的转换然后进行比较，转换规则如下:</p>\n<ol>\n<li>如果操作数是对象，转换为原始值：如果valueOf方法返回原始值，则使用这个值，否则使用toString方法的结果，如果转换失败则报错</li>\n<li>经过必要的对象到原始值的转换后，如果两个操作数都是字符串，按照字母顺序进行比较（他们的16位unicode值的大小）</li>\n<li>否则，如果有一个操作数不是字符串，<strong>将两个操作数转换为数字</strong>进行比较</li>\n</ol>\n<h3 id=\"运算符工作流程\"><a href=\"#运算符工作流程\" class=\"headerlink\" title=\"+运算符工作流程\"></a>+运算符工作流程</h3><ol>\n<li>如果有操作数是对象，转换为原始值</li>\n<li>此时如果有<strong>一个操作数是字符串</strong>，其他的操作数都转换为字符串并执行连接</li>\n<li>否则：<strong>所有操作数都转换为数字并执行加法</strong></li>\n</ol>\n<h3 id=\"函数内部arguments变量有哪些特性-有哪些属性-如何将它转换为数组\"><a href=\"#函数内部arguments变量有哪些特性-有哪些属性-如何将它转换为数组\" class=\"headerlink\" title=\"函数内部arguments变量有哪些特性,有哪些属性,如何将它转换为数组\"></a>函数内部arguments变量有哪些特性,有哪些属性,如何将它转换为数组</h3><ul>\n<li>arguments所有函数中都包含的一个局部变量，是一个类数组对象，对应函数调用时的实参。如果函数定义同名参数会在调用时覆盖默认对象</li>\n<li>arguments[index]分别对应函数调用时的实参，并且通过arguments修改实参时会同时修改实参</li>\n<li>arguments.length为实参的个数（Function.length表示形参长度）</li>\n<li>arguments.callee为当前正在执行的函数本身，使用这个属性进行递归调用时需注意this的变化</li>\n<li>arguments.caller为调用当前函数的函数（已被遗弃）</li>\n<li>转换为数组：<code>var args = Array.prototype.slice.call(arguments, 0);</code></li>\n</ul>\n<h3 id=\"DOM事件模型是如何的-编写一个EventUtil工具类实现事件管理兼容\"><a href=\"#DOM事件模型是如何的-编写一个EventUtil工具类实现事件管理兼容\" class=\"headerlink\" title=\"DOM事件模型是如何的,编写一个EventUtil工具类实现事件管理兼容\"></a>DOM事件模型是如何的,编写一个EventUtil工具类实现事件管理兼容</h3><ul>\n<li>DOM事件包含捕获（capture）和冒泡（bubble）两个阶段：捕获阶段事件从window开始触发事件然后通过祖先节点一次传递到触发事件的DOM元素上；冒泡阶段事件从初始元素依次向祖先节点传递直到window</li>\n<li>标准事件监听elem.addEventListener(type, handler, capture)/elem.removeEventListener(type, handler, capture)：handler接收保存事件信息的event对象作为参数，event.target为触发事件的对象，handler调用上下文this为绑定监听器的对象，event.preventDefault()取消事件默认行为，event.stopPropagation()/event.stopImmediatePropagation()取消事件传递</li>\n<li>老版本IE事件监听elem.attachEvent(‘on’+type, handler)/elem.detachEvent(‘on’+type, handler)：handler不接收event作为参数，事件信息保存在window.event中，触发事件的对象为event.srcElement，handler执行上下文this为window使用闭包中调用handler.call(elem, event)可模仿标准模型，然后返回闭包，保证了监听器的移除。event.returnValue为false时取消事件默认行为，event.cancleBubble为true时取消时间传播</li>\n<li>通常利用事件冒泡机制托管事件处理程序提高程序性能。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 跨浏览器事件处理工具。只支持冒泡。不支持捕获</div><div class=\"line\"> * @author  (qiu_deqing@126.com)</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">var EventUtil = &#123;</div><div class=\"line\">    getEvent: function (event) &#123;</div><div class=\"line\">        return event || window.event;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getTarget: function (event) &#123;</div><div class=\"line\">        return event.target || event.srcElement;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // 返回注册成功的监听器，IE中需要使用返回值来移除监听器</div><div class=\"line\">    on: function (elem, type, handler) &#123;</div><div class=\"line\">        if (elem.addEventListener) &#123;</div><div class=\"line\">            elem.addEventListener(type, handler, false);</div><div class=\"line\">            return handler;</div><div class=\"line\">        &#125; else if (elem.attachEvent) &#123;</div><div class=\"line\">            var wrapper = function () &#123;</div><div class=\"line\">              var event = window.event;</div><div class=\"line\">              event.target = event.srcElement;</div><div class=\"line\">              handler.call(elem, event);</div><div class=\"line\">            &#125;;</div><div class=\"line\">            elem.attachEvent(&apos;on&apos; + type, wrapper);</div><div class=\"line\">            return wrapper;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    off: function (elem, type, handler) &#123;</div><div class=\"line\">        if (elem.removeEventListener) &#123;</div><div class=\"line\">            elem.removeEventListener(type, handler, false);</div><div class=\"line\">        &#125; else if (elem.detachEvent) &#123;</div><div class=\"line\">            elem.detachEvent(&apos;on&apos; + type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    preventDefault: function (event) &#123;</div><div class=\"line\">        if (event.preventDefault) &#123;</div><div class=\"line\">            event.preventDefault();</div><div class=\"line\">        &#125; else if (&apos;returnValue&apos; in event) &#123;</div><div class=\"line\">            event.returnValue = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    stopPropagation: function (event) &#123;</div><div class=\"line\">        if (event.stopPropagation) &#123;</div><div class=\"line\">            event.stopPropagation();</div><div class=\"line\">        &#125; else if (&apos;cancelBubble&apos; in event) &#123;</div><div class=\"line\">            event.cancelBubble = true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    /**</div><div class=\"line\">     * keypress事件跨浏览器获取输入字符</div><div class=\"line\">     * 某些浏览器在一些特殊键上也触发keypress，此时返回null</div><div class=\"line\">     **/</div><div class=\"line\">     getChar: function (event) &#123;</div><div class=\"line\">        if (event.which == null) &#123;</div><div class=\"line\">            return String.fromCharCode(event.keyCode);  // IE</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if (event.which != 0 &amp;&amp; event.charCode != 0) &#123;</div><div class=\"line\">            return String.fromCharCode(event.which);    // the rest</div><div class=\"line\">        &#125;</div><div class=\"line\">        else &#123;</div><div class=\"line\">            return null;    // special key</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"评价一下三种方法实现继承的优缺点-并改进\"><a href=\"#评价一下三种方法实现继承的优缺点-并改进\" class=\"headerlink\" title=\"评价一下三种方法实现继承的优缺点,并改进\"></a>评价一下三种方法实现继承的优缺点,并改进</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Shape() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">function Rect() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">// 方法1</div><div class=\"line\">Rect.prototype = new Shape();</div><div class=\"line\"></div><div class=\"line\">// 方法2</div><div class=\"line\">Rect.prototype = Shape.prototype;</div><div class=\"line\"></div><div class=\"line\">// 方法3</div><div class=\"line\">Rect.prototype = Object.create(Shape.prototype);</div><div class=\"line\"></div><div class=\"line\">Rect.prototype.area = function () &#123;</div><div class=\"line\">  // do something</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>方法1：</p>\n<ol>\n<li>优点：正确设置原型链实现继承</li>\n<li>优点：父类实例属性得到继承，原型链查找效率提高，也能为一些属性提供合理的默认值</li>\n<li>缺点：父类实例属性为引用类型时，不恰当地修改会导致所有子类被修改</li>\n<li>缺点：创建父类实例作为子类原型时，可能无法确定构造函数需要的合理参数，这样提供的参数继承给子类没有实际意义，当子类需要这些参数时应该在构造函数中进行初始化和设置</li>\n<li>总结：继承应该是继承方法而不是属性，为子类设置父类实例属性应该是通过在子类构造函数中调用父类构造函数进行初始化</li>\n</ol>\n<p>方法2：</p>\n<ol>\n<li>优点：正确设置原型链实现继承</li>\n<li>缺点：父类构造函数原型与子类相同。修改子类原型添加方法会修改父类</li>\n</ol>\n<p>方法3：</p>\n<ol>\n<li>优点：正确设置原型链且避免方法1.2中的缺点</li>\n<li>缺点：ES5方法需要注意兼容性</li>\n</ol>\n<p>改进：</p>\n<ol>\n<li>所有三种方法应该在子类构造函数中调用父类构造函数实现实例属性初始化</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Rect() &#123;</div><div class=\"line\">    Shape.call(this);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>用新创建的对象替代子类默认原型，设置<code>Rect.prototype.constructor = Rect;</code>保证一致性</li>\n<li>第三种方法的polyfill：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function create(obj) &#123;</div><div class=\"line\">    if (Object.create) &#123;</div><div class=\"line\">        return Object.create(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function f() &#123;&#125;;</div><div class=\"line\">    f.prototype = obj;</div><div class=\"line\">    return new f();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"javascript编程部分\"><a href=\"#javascript编程部分\" class=\"headerlink\" title=\"$javascript编程部分\"></a>$javascript编程部分</h2><h3 id=\"请用原生js实现一个函数-给页面制定的任意一个元素添加一个透明遮罩-透明度可变-默认0-2-使这个区域点击无效-要求兼容IE8-及各主流浏览器-遮罩层效果如下图所示\"><a href=\"#请用原生js实现一个函数-给页面制定的任意一个元素添加一个透明遮罩-透明度可变-默认0-2-使这个区域点击无效-要求兼容IE8-及各主流浏览器-遮罩层效果如下图所示\" class=\"headerlink\" title=\"请用原生js实现一个函数,给页面制定的任意一个元素添加一个透明遮罩(透明度可变,默认0.2),使这个区域点击无效,要求兼容IE8+及各主流浏览器,遮罩层效果如下图所示:\"></a>请用原生js实现一个函数,给页面制定的任意一个元素添加一个透明遮罩(透明度可变,默认0.2),使这个区域点击无效,要求兼容IE8+及各主流浏览器,遮罩层效果如下图所示:</h3><p><img src=\"http://7xsspr.com2.z0.glb.clouddn.com/element-mask.jpg\" alt=\"遮罩效果\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style&gt;</div><div class=\"line\">#target &#123;</div><div class=\"line\">    width: 200px;</div><div class=\"line\">    height: 300px;</div><div class=\"line\">    margin: 40px;</div><div class=\"line\">    background-color: tomato;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&quot;target&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">function addMask(elem, opacity) &#123;</div><div class=\"line\">    opacity = opacity || 0.2;</div><div class=\"line\"></div><div class=\"line\">    var rect = elem.getBoundingClientRect();</div><div class=\"line\">    var style = getComputedStyle(elem, null);</div><div class=\"line\"></div><div class=\"line\">    var mask = document.createElement(&apos;div&apos;);</div><div class=\"line\">    mask.style.position = &apos;absolute&apos;;</div><div class=\"line\">    var marginLeft = parseFloat(style.marginLeft);</div><div class=\"line\">    mask.style.left = (elem.offsetLeft - marginLeft) + &apos;px&apos;;</div><div class=\"line\">    var marginTop = parseFloat(style.marginTop);</div><div class=\"line\">    mask.style.top = (elem.offsetTop - marginTop) + &apos;px&apos;;</div><div class=\"line\">    mask.style.zIndex = 9999;</div><div class=\"line\">    mask.style.opacity = &apos;&apos; + opacity;</div><div class=\"line\">    mask.style.backgroundColor = &apos;#000&apos;;</div><div class=\"line\"></div><div class=\"line\">    mask.style.width = (parseFloat(style.marginLeft) +</div><div class=\"line\">        parseFloat(style.marginRight) + rect.width) + &apos;px&apos;;</div><div class=\"line\">    mask.style.height = (parseFloat(style.marginTop) +</div><div class=\"line\">        parseFloat(style.marginBottom) + rect.height) + &apos;px&apos;;</div><div class=\"line\"></div><div class=\"line\">    elem.parentNode.appendChild(mask);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var target = document.getElementById(&apos;target&apos;);</div><div class=\"line\">addMask(target);</div><div class=\"line\"></div><div class=\"line\">target.addEventListener(&apos;click&apos;, function () &#123;</div><div class=\"line\">    console.log(&apos;click&apos;);</div><div class=\"line\">&#125;, false);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"请用代码写出-今天是星期x-其中x表示当天是星期几-如果当天是星期一-输出应该是”今天是星期一”\"><a href=\"#请用代码写出-今天是星期x-其中x表示当天是星期几-如果当天是星期一-输出应该是”今天是星期一”\" class=\"headerlink\" title=\"请用代码写出(今天是星期x)其中x表示当天是星期几,如果当天是星期一,输出应该是”今天是星期一”\"></a>请用代码写出(今天是星期x)其中x表示当天是星期几,如果当天是星期一,输出应该是”今天是星期一”</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var days = [&apos;日&apos;,&apos;一&apos;,&apos;二&apos;,&apos;三&apos;,&apos;四&apos;,&apos;五&apos;,&apos;六&apos;];</div><div class=\"line\">var date = new Date();</div><div class=\"line\"></div><div class=\"line\">console.log(&apos;今天是星期&apos; + days[date.getDay()]);</div></pre></td></tr></table></figure>\n<h3 id=\"下面这段代码想要循环延时输出结果0-1-2-3-4-请问输出结果是否正确-如果不正确-请说明为什么-并修改循环内的代码使其输出正确结果\"><a href=\"#下面这段代码想要循环延时输出结果0-1-2-3-4-请问输出结果是否正确-如果不正确-请说明为什么-并修改循环内的代码使其输出正确结果\" class=\"headerlink\" title=\"下面这段代码想要循环延时输出结果0 1 2 3 4,请问输出结果是否正确,如果不正确,请说明为什么,并修改循环内的代码使其输出正确结果\"></a>下面这段代码想要循环延时输出结果0 1 2 3 4,请问输出结果是否正确,如果不正确,请说明为什么,并修改循环内的代码使其输出正确结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var i = 0; i &lt; 5; ++i) &#123;</div><div class=\"line\">  setTimeout(function () &#123;</div><div class=\"line\">    console.log(i + &apos; &apos;);</div><div class=\"line\">  &#125;, 100);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不能输出正确结果，因为循环中setTimeout接受的参数函数通过闭包访问变量i。javascript运行环境为单线程，setTimeout注册的函数需要等待线程空闲才能执行，此时for循环已经结束，i值为5.五个定时输出都是5<br>修改方法：将setTimeout放在函数立即调用表达式中，将i值作为参数传递给包裹函数，创建新闭包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var i = 0; i &lt; 5; ++i) &#123;</div><div class=\"line\">  (function (i) &#123;</div><div class=\"line\">    setTimeout(function () &#123;</div><div class=\"line\">      console.log(i + &apos; &apos;);</div><div class=\"line\">    &#125;, 100);</div><div class=\"line\">  &#125;(i));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"现有一个Page类-其原型对象上有许多以post开头的方法-如postMsg-另有一拦截函数chekc-只返回ture或false-请设计一个函数-该函数应批量改造原Page的postXXX方法-在保留其原有功能的同时-为每个postXXX方法增加拦截验证功能-当chekc返回true时继续执行原postXXX方法-返回false时不再执行原postXXX方法\"><a href=\"#现有一个Page类-其原型对象上有许多以post开头的方法-如postMsg-另有一拦截函数chekc-只返回ture或false-请设计一个函数-该函数应批量改造原Page的postXXX方法-在保留其原有功能的同时-为每个postXXX方法增加拦截验证功能-当chekc返回true时继续执行原postXXX方法-返回false时不再执行原postXXX方法\" class=\"headerlink\" title=\"现有一个Page类,其原型对象上有许多以post开头的方法(如postMsg);另有一拦截函数chekc,只返回ture或false.请设计一个函数,该函数应批量改造原Page的postXXX方法,在保留其原有功能的同时,为每个postXXX方法增加拦截验证功能,当chekc返回true时继续执行原postXXX方法,返回false时不再执行原postXXX方法\"></a>现有一个Page类,其原型对象上有许多以post开头的方法(如postMsg);另有一拦截函数chekc,只返回ture或false.请设计一个函数,该函数应批量改造原Page的postXXX方法,在保留其原有功能的同时,为每个postXXX方法增加拦截验证功能,当chekc返回true时继续执行原postXXX方法,返回false时不再执行原postXXX方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Page() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">Page.prototype = &#123;</div><div class=\"line\">  constructor: Page,</div><div class=\"line\"></div><div class=\"line\">  postA: function (a) &#123;</div><div class=\"line\">    console.log(&apos;a:&apos; + a);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postB: function (b) &#123;</div><div class=\"line\">    console.log(&apos;b:&apos; + b);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postC: function (c) &#123;</div><div class=\"line\">    console.log(&apos;c:&apos; + c);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  check: function () &#123;</div><div class=\"line\">    return Math.random() &gt; 0.5;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function checkfy(obj) &#123;</div><div class=\"line\">  for (var key in obj) &#123;</div><div class=\"line\">    if (key.indexOf(&apos;post&apos;) === 0 &amp;&amp; typeof obj[key] === &apos;function&apos;) &#123;</div><div class=\"line\">      (function (key) &#123;</div><div class=\"line\">        var fn = obj[key];</div><div class=\"line\">        obj[key] = function () &#123;</div><div class=\"line\">          if (obj.check()) &#123;</div><div class=\"line\">            fn.apply(obj, arguments);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">      &#125;(key));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; // end checkfy()</div><div class=\"line\"></div><div class=\"line\">checkfy(Page.prototype);</div><div class=\"line\"></div><div class=\"line\">var obj = new Page();</div><div class=\"line\"></div><div class=\"line\">obj.postA(&apos;checkfy&apos;);</div><div class=\"line\">obj.postB(&apos;checkfy&apos;);</div><div class=\"line\">obj.postC(&apos;checkfy&apos;);</div></pre></td></tr></table></figure>\n<h3 id=\"完成下面的tool-tip\"><a href=\"#完成下面的tool-tip\" class=\"headerlink\" title=\"完成下面的tool-tip\"></a>完成下面的tool-tip</h3><p><img src=\"http://7xsspr.com2.z0.glb.clouddn.com/tip-box.jpg\" alt=\"xxx\"></p>\n<h3 id=\"编写javascript深度克隆函数deepClone\"><a href=\"#编写javascript深度克隆函数deepClone\" class=\"headerlink\" title=\"编写javascript深度克隆函数deepClone\"></a>编写javascript深度克隆函数deepClone</h3><pre><code>function deepClone(obj) {\n    var _toString = Object.prototype.toString;\n\n    // null, undefined, non-object, function\n    if (!obj || typeof obj !== &apos;object&apos;) {\n        return obj;\n    }\n\n    // DOM Node\n    if (obj.nodeType &amp;&amp; &apos;cloneNode&apos; in obj) {\n        return obj.cloneNode(true);\n    }\n\n    // Date\n    if (_toString.call(obj) === &apos;[object Date]&apos;) {\n        return new Date(obj.getTime());\n    }\n\n    // RegExp\n    if (_toString.call(obj) === &apos;[object RegExp]&apos;) {\n        var flags = [];\n        if (obj.global) { flags.push(&apos;g&apos;); }\n        if (obj.multiline) { flags.push(&apos;m&apos;); }\n        if (obj.ignoreCase) { flags.push(&apos;i&apos;); }\n\n        return new RegExp(obj.source, flags.join(&apos;&apos;));\n    }\n\n    var result = Array.isArray(obj) ? [] :\n        obj.constructor ? new obj.constructor() : {};\n\n    for (var key in obj ) {\n        result[key] = deepClone(obj[key]);\n    }\n\n    return result;\n}\n\nfunction A() {\n    this.a = a;\n}\n\nvar a = {\n    name: &apos;qiu&apos;,\n    birth: new Date(),\n    pattern: /qiu/gim,\n    container: document.body,\n    hobbys: [&apos;book&apos;, new Date(), /aaa/gim, 111]\n};\n\nvar c = new A();\nvar b = deepClone(c);\nconsole.log(c.a === b.a);\nconsole.log(c, b);\n</code></pre><h3 id=\"补充代码-鼠标单击Button1后将Button1移动到Button2的后面\"><a href=\"#补充代码-鼠标单击Button1后将Button1移动到Button2的后面\" class=\"headerlink\" title=\"补充代码,鼠标单击Button1后将Button1移动到Button2的后面\"></a>补充代码,鼠标单击Button1后将Button1移动到Button2的后面</h3><pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;TEst&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div&gt;\n   &lt;input type=&quot;button&quot; id =&quot;button1&quot; value=&quot;1&quot; /&gt;\n   &lt;input type=&quot;button&quot; id =&quot;button2&quot; value=&quot;2&quot; /&gt;\n&lt;/div&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n    var btn1 = document.getElementById(&apos;button1&apos;);\n    var btn2 = document.getElementById(&apos;button2&apos;);\n\n    addListener(btn1, &apos;click&apos;, function (event) {\n        btn1.parentNode.insertBefore(btn2, btn1);\n    });\n\n    function addListener(elem, type, handler) {\n        if (elem.addEventListener) {\n            elem.addEventListener(type, handler, false);\n            return handler;\n        } else if (elem.attachEvent) {\n            function wrapper() {\n                var event = window.event;\n                event.target = event.srcElement;\n                handler.call(elem, event);\n            }\n            elem.attachEvent(&apos;on&apos; + type, wrapper);\n            return wrapper;\n        }\n    }\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"网页中实现一个计算当年还剩多少时间的倒数计时程序-要求网页上实时动态显示”××年还剩××天××时××分××秒”\"><a href=\"#网页中实现一个计算当年还剩多少时间的倒数计时程序-要求网页上实时动态显示”××年还剩××天××时××分××秒”\" class=\"headerlink\" title=\"网页中实现一个计算当年还剩多少时间的倒数计时程序,要求网页上实时动态显示”××年还剩××天××时××分××秒”\"></a>网页中实现一个计算当年还剩多少时间的倒数计时程序,要求网页上实时动态显示”××年还剩××天××时××分××秒”</h3><pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;TEst&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;span id=&quot;target&quot;&gt;&lt;/span&gt;\n\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n    // 为了简化。每月默认30天\n    function getTimeString() {\n        var start = new Date();\n        var end = new Date(start.getFullYear() + 1, 0, 1);\n        var elapse = Math.floor((end - start) / 1000);\n\n        var seconds = elapse % 60 ;\n        var minutes = Math.floor(elapse / 60) % 60;\n        var hours = Math.floor(elapse / (60 * 60)) % 24;\n        var days = Math.floor(elapse / (60 * 60 * 24)) % 30;\n        var months = Math.floor(elapse / (60 * 60 * 24 * 30)) % 12;\n        var years = Math.floor(elapse / (60 * 60 * 24 * 30 * 12));\n\n        return start.getFullYear() + &apos;年还剩&apos; + years + &apos;年&apos; + months + &apos;月&apos; + days + &apos;日&apos;\n            + hours + &apos;小时&apos; + minutes + &apos;分&apos; + seconds + &apos;秒&apos;;\n    }\n\n    function domText(elem, text) {\n        if (text == undefined) {\n\n            if (elem.textContent) {\n                return elem.textContent;\n            } else if (elem.innerText) {\n                return elem.innerText;\n            }\n        } else {\n            if (elem.textContent) {\n                elem.textContent = text;\n            } else if (elem.innerText) {\n                elem.innerText = text;\n            } else {\n                elem.innerHTML = text;\n            }\n        }\n    }\n\n    var target = document.getElementById(&apos;target&apos;);\n\n    setInterval(function () {\n        domText(target, getTimeString());\n    }, 1000)\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"完成一个函数-接受数组作为参数-数组元素为整数或者数组-数组元素包含整数或数组-函数返回扁平化后的数组\"><a href=\"#完成一个函数-接受数组作为参数-数组元素为整数或者数组-数组元素包含整数或数组-函数返回扁平化后的数组\" class=\"headerlink\" title=\"完成一个函数,接受数组作为参数,数组元素为整数或者数组,数组元素包含整数或数组,函数返回扁平化后的数组\"></a>完成一个函数,接受数组作为参数,数组元素为整数或者数组,数组元素包含整数或数组,函数返回扁平化后的数组</h3><p>如：[1, [2, [ [3, 4], 5], 6]] =&gt; [1, 2, 3, 4, 5, 6]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var data =  [1, [2, [ [3, 4], 5], 6]];</div><div class=\"line\"></div><div class=\"line\">function flat(data, result) &#123;</div><div class=\"line\">    var i, d, len;</div><div class=\"line\">    for (i = 0, len = data.length; i &lt; len; ++i) &#123;</div><div class=\"line\">        d = data[i];</div><div class=\"line\">        if (typeof d === &apos;number&apos;) &#123;</div><div class=\"line\">            result.push(d);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            flat(d, result);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var result = [];</div><div class=\"line\">flat(data, result);</div><div class=\"line\"></div><div class=\"line\">console.log(result);</div></pre></td></tr></table></figure>\n<h3 id=\"如何判断一个对象是否为数组\"><a href=\"#如何判断一个对象是否为数组\" class=\"headerlink\" title=\"如何判断一个对象是否为数组\"></a>如何判断一个对象是否为数组</h3><p>如果浏览器支持Array.isArray()可以直接判断否则需进行必要判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 判断一个对象是否是数组，参数不是对象或者不是数组，返回false</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;Object&#125; arg 需要测试是否为数组的对象</div><div class=\"line\"> * @return &#123;Boolean&#125; 传入参数是数组返回true，否则返回false</div><div class=\"line\"> */</div><div class=\"line\">function isArray(arg) &#123;</div><div class=\"line\">    if (typeof arg === &apos;object&apos;) &#123;</div><div class=\"line\">        return Object.prototype.toString.call(arg) === &apos;[object Array]&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"请评价以下事件监听器代码并给出改进意见\"><a href=\"#请评价以下事件监听器代码并给出改进意见\" class=\"headerlink\" title=\"请评价以下事件监听器代码并给出改进意见\"></a>请评价以下事件监听器代码并给出改进意见</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (window.addEventListener) &#123;</div><div class=\"line\">  var addListener = function (el, type, listener, useCapture) &#123;</div><div class=\"line\">    el.addEventListener(type, listener, useCapture);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">else if (document.all) &#123;</div><div class=\"line\">  addListener = function (el, type, listener) &#123;</div><div class=\"line\">    el.attachEvent(&apos;on&apos; + type, function () &#123;</div><div class=\"line\">      listener.apply(el);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>作用：浏览器功能检测实现跨浏览器DOM事件绑定</p>\n<p>优点：</p>\n<ol>\n<li>测试代码只运行一次，根据浏览器确定绑定方法</li>\n<li>通过<code>listener.apply(el)</code>解决IE下监听器this与标准不一致的地方</li>\n<li>在浏览器不支持的情况下提供简单的功能，在标准浏览器中提供捕获功能</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>document.all作为IE检测不可靠，应该使用if(el.attachEvent)</li>\n<li>addListener在不同浏览器下API不一样</li>\n<li><code>listener.apply</code>使this与标准一致但监听器无法移除</li>\n<li>未解决IE下listener参数event。 target问题</li>\n</ol>\n<p>改进:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">var addListener;</div><div class=\"line\"></div><div class=\"line\">if (window.addEventListener) &#123;</div><div class=\"line\">  addListener = function (el, type, listener, useCapture) &#123;</div><div class=\"line\">    el.addEventListener(type, listener, useCapture);</div><div class=\"line\">    return listener;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">else if (window.attachEvent) &#123;</div><div class=\"line\">  addListener = function (el, type, listener) &#123;</div><div class=\"line\">    // 标准化this，event，target</div><div class=\"line\">    var wrapper = function () &#123;</div><div class=\"line\">      var event = window.event;</div><div class=\"line\">      event.target = event.srcElement;</div><div class=\"line\">      listener.call(el, event);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    el.attachEvent(&apos;on&apos; + type, wrapper);</div><div class=\"line\">    return wrapper;</div><div class=\"line\">    // 返回wrapper。调用者可以保存，以后remove</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"如何判断一个对象是否为函数\"><a href=\"#如何判断一个对象是否为函数\" class=\"headerlink\" title=\"如何判断一个对象是否为函数\"></a>如何判断一个对象是否为函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 判断对象是否为函数，如果当前运行环境对可调用对象（如正则表达式）</div><div class=\"line\"> * 的typeof返回&apos;function&apos;，采用通用方法，否则采用优化方法</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;Any&#125; arg 需要检测是否为函数的对象</div><div class=\"line\"> * @return &#123;boolean&#125; 如果参数是函数，返回true，否则false</div><div class=\"line\"> */</div><div class=\"line\">function isFunction(arg) &#123;</div><div class=\"line\">    if (arg) &#123;</div><div class=\"line\">        if (typeof (/./) !== &apos;function&apos;) &#123;</div><div class=\"line\">            return typeof arg === &apos;function&apos;;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return Object.prototype.toString.call(arg) === &apos;[object Function]&apos;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; // end if</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"编写一个函数接受url中query-string为参数-返回解析后的Object-query-string使用application-x-www-form-urlencoded编码\"><a href=\"#编写一个函数接受url中query-string为参数-返回解析后的Object-query-string使用application-x-www-form-urlencoded编码\" class=\"headerlink\" title=\"编写一个函数接受url中query string为参数,返回解析后的Object,query string使用application/x-www-form-urlencoded编码\"></a>编写一个函数接受url中query string为参数,返回解析后的Object,query string使用application/x-www-form-urlencoded编码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 解析query string转换为对象，一个key有多个值时生成数组</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;String&#125; query 需要解析的query字符串，开头可以是?，</div><div class=\"line\"> * 按照application/x-www-form-urlencoded编码</div><div class=\"line\"> * @return &#123;Object&#125; 参数解析后的对象</div><div class=\"line\"> */</div><div class=\"line\">function parseQuery(query) &#123;</div><div class=\"line\">    var result = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    // 如果不是字符串返回空对象</div><div class=\"line\">    if (typeof query !== &apos;string&apos;) &#123;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // 去掉字符串开头可能带的?</div><div class=\"line\">    if (query.charAt(0) === &apos;?&apos;) &#123;</div><div class=\"line\">        query = query.substring(1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var pairs = query.split(&apos;&amp;&apos;);</div><div class=\"line\">    var pair;</div><div class=\"line\">    var key, value;</div><div class=\"line\">    var i, len;</div><div class=\"line\"></div><div class=\"line\">    for (i = 0, len = pairs.length; i &lt; len; ++i) &#123;</div><div class=\"line\">        pair = pairs[i].split(&apos;=&apos;);</div><div class=\"line\">        // application/x-www-form-urlencoded编码会将&apos; &apos;转换为+</div><div class=\"line\">        key = decodeURIComponent(pair[0]).replace(/\\+/g, &apos; &apos;);</div><div class=\"line\">        value = decodeURIComponent(pair[1]).replace(/\\+/g, &apos; &apos;);</div><div class=\"line\"></div><div class=\"line\">        // 如果是新key，直接添加</div><div class=\"line\">        if (!(key in result)) &#123;</div><div class=\"line\">            result[key] = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">        // 如果key已经出现一次以上，直接向数组添加value</div><div class=\"line\">        else if (isArray(result[key])) &#123;</div><div class=\"line\">            result[key].push(value);</div><div class=\"line\">        &#125;</div><div class=\"line\">        // key第二次出现，将结果改为数组</div><div class=\"line\">        else &#123;</div><div class=\"line\">            var arr = [result[key]];</div><div class=\"line\">            arr.push(value);</div><div class=\"line\">            result[key] = arr;</div><div class=\"line\">        &#125; // end if-else</div><div class=\"line\">    &#125; // end for</div><div class=\"line\"></div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function isArray(arg) &#123;</div><div class=\"line\">    if (arg &amp;&amp; typeof arg === &apos;object&apos;) &#123;</div><div class=\"line\">        return Object.prototype.toString.call(arg) === &apos;[object Array]&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div><div class=\"line\">/**</div><div class=\"line\">console.log(parseQuery(&apos;sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8&apos;));</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<h3 id=\"解析一个完整的url-返回Object包含域与window-location相同\"><a href=\"#解析一个完整的url-返回Object包含域与window-location相同\" class=\"headerlink\" title=\"解析一个完整的url,返回Object包含域与window.location相同\"></a>解析一个完整的url,返回Object包含域与window.location相同</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 解析一个url并生成window.location对象中包含的域</div><div class=\"line\"> * location:</div><div class=\"line\"> * &#123;</div><div class=\"line\"> *      href: &apos;包含完整的url&apos;,</div><div class=\"line\"> *      origin: &apos;包含协议到pathname之前的内容&apos;,</div><div class=\"line\"> *      protocol: &apos;url使用的协议，包含末尾的:&apos;,</div><div class=\"line\"> *      username: &apos;用户名&apos;, // 暂时不支持</div><div class=\"line\"> *      password: &apos;密码&apos;,  // 暂时不支持</div><div class=\"line\"> *      host: &apos;完整主机名，包含:和端口&apos;,</div><div class=\"line\"> *      hostname: &apos;主机名，不包含端口&apos;</div><div class=\"line\"> *      port: &apos;端口号&apos;,</div><div class=\"line\"> *      pathname: &apos;服务器上访问资源的路径/开头&apos;,</div><div class=\"line\"> *      search: &apos;query string，?开头&apos;,</div><div class=\"line\"> *      hash: &apos;#开头的fragment identifier&apos;</div><div class=\"line\"> * &#125;</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;string&#125; url 需要解析的url</div><div class=\"line\"> * @return &#123;Object&#125; 包含url信息的对象</div><div class=\"line\"> */</div><div class=\"line\">function parseUrl(url) &#123;</div><div class=\"line\">    var result = &#123;&#125;;</div><div class=\"line\">    var keys = [&apos;href&apos;, &apos;origin&apos;, &apos;protocol&apos;, &apos;host&apos;,</div><div class=\"line\">                &apos;hostname&apos;, &apos;port&apos;, &apos;pathname&apos;, &apos;search&apos;, &apos;hash&apos;];</div><div class=\"line\">    var i, len;</div><div class=\"line\">    var regexp = /(([^:]+:)\\/\\/(([^:\\/\\?#]+)(:\\d+)?))(\\/[^?#]*)?(\\?[^#]*)?(#.*)?/;</div><div class=\"line\"></div><div class=\"line\">    var match = regexp.exec(url);</div><div class=\"line\"></div><div class=\"line\">    if (match) &#123;</div><div class=\"line\">        for (i = keys.length - 1; i &gt;= 0; --i) &#123;</div><div class=\"line\">            result[keys[i]] = match[i] ? match[i] : &apos;&apos;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"完成函数getViewportSize返回指定窗口的视口尺寸\"><a href=\"#完成函数getViewportSize返回指定窗口的视口尺寸\" class=\"headerlink\" title=\"完成函数getViewportSize返回指定窗口的视口尺寸\"></a>完成函数getViewportSize返回指定窗口的视口尺寸</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* 查询指定窗口的视口尺寸，如果不指定窗口，查询当前窗口尺寸</div><div class=\"line\">**/</div><div class=\"line\">function getViewportSize(w) &#123;</div><div class=\"line\">    w = w || window;</div><div class=\"line\"></div><div class=\"line\">    // IE9及标准浏览器中可使用此标准方法</div><div class=\"line\">    if (&apos;innerHeight&apos; in w) &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            width: w.innerWidth,</div><div class=\"line\">            height: w.innerHeight</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var d = w.document;</div><div class=\"line\">    // IE 8及以下浏览器在标准模式下</div><div class=\"line\">    if (document.compatMode === &apos;CSS1Compat&apos;) &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            width: d.documentElement.clientWidth,</div><div class=\"line\">            height: d.documentElement.clientHeight</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // IE8及以下浏览器在怪癖模式下</div><div class=\"line\">    return &#123;</div><div class=\"line\">        width: d.body.clientWidth,</div><div class=\"line\">        height: d.body.clientHeight</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"完成函数getScrollOffset返回窗口滚动条偏移量\"><a href=\"#完成函数getScrollOffset返回窗口滚动条偏移量\" class=\"headerlink\" title=\"完成函数getScrollOffset返回窗口滚动条偏移量\"></a>完成函数getScrollOffset返回窗口滚动条偏移量</h3><pre><code>/**\n * 获取指定window中滚动条的偏移量，如未指定则获取当前window\n * 滚动条偏移量\n *\n * @param {window} w 需要获取滚动条偏移量的窗口\n * @return {Object} obj.x为水平滚动条偏移量,obj.y为竖直滚动条偏移量\n */\nfunction getScrollOffset(w) {\n    w =  w || window;\n    // 如果是标准浏览器\n    if (w.pageXOffset != null) {\n        return {\n            x: w.pageXOffset,\n            y: w.pageYOffset\n        };\n    }\n\n    // 老版本IE，根据兼容性不同访问不同元素\n    var d = w.document;\n    if (d.compatMode === &apos;CSS1Compat&apos;) {\n        return {\n            x: d.documentElement.scrollLeft,\n            y: d.documentElement.scrollTop\n        }\n    }\n\n    return {\n        x: d.body.scrollLeft,\n        y: d.body.scrollTop\n    };\n}\n</code></pre><h3 id=\"现有一个字符串richText-是一段富文本-需要显示在页面上-有个要求-需要给其中只包含一个img元素的p标签增加一个叫pic的class-请编写代码实现-可以使用jQuery或KISSY\"><a href=\"#现有一个字符串richText-是一段富文本-需要显示在页面上-有个要求-需要给其中只包含一个img元素的p标签增加一个叫pic的class-请编写代码实现-可以使用jQuery或KISSY\" class=\"headerlink\" title=\"现有一个字符串richText,是一段富文本,需要显示在页面上.有个要求,需要给其中只包含一个img元素的p标签增加一个叫pic的class.请编写代码实现.可以使用jQuery或KISSY.\"></a>现有一个字符串richText,是一段富文本,需要显示在页面上.有个要求,需要给其中只包含一个img元素的p标签增加一个叫pic的class.请编写代码实现.可以使用jQuery或KISSY.</h3><pre><code>function richText(text) {\n    var div = document.createElement(&apos;div&apos;);\n    div.innerHTML = text;\n    var p = div.getElementsByTagName(&apos;p&apos;);\n    var i, len;\n\n    for (i = 0, len = p.length; i &lt; len; ++i) {\n        if (p[i].getElementsByTagName(&apos;img&apos;).length === 1) {\n            p[i].classList.add(&apos;pic&apos;);\n        }\n    }\n\n    return div.innerHTML;\n}\n</code></pre><h3 id=\"请实现一个Event类-继承自此类的对象都会拥有两个方法on-off-once和trigger\"><a href=\"#请实现一个Event类-继承自此类的对象都会拥有两个方法on-off-once和trigger\" class=\"headerlink\" title=\"请实现一个Event类,继承自此类的对象都会拥有两个方法on,off,once和trigger\"></a>请实现一个Event类,继承自此类的对象都会拥有两个方法on,off,once和trigger</h3><pre><code>function Event() {\n    if (!(this instanceof Event)) {\n        return new Event();\n    }\n    this._callbacks = {};\n}\nEvent.prototype.on = function (type, handler) {\n    this_callbacks = this._callbacks || {};\n    this._callbacks[type] = this.callbacks[type] || [];\n    this._callbacks[type].push(handler);\n\n    return this;\n};\n\nEvent.prototype.off = function (type, handler) {\n    var list = this._callbacks[type];\n\n    if (list) {\n        for (var i = list.length; i &gt;= 0; --i) {\n            if (list[i] === handler) {\n                list.splice(i, 1);\n            }\n        }\n    }\n\n    return this;\n};\n\nEvent.prototype.trigger = function (type, data) {\n    var list = this._callbacks[type];\n\n    if (list) {\n        for (var i = 0, len = list.length; i &lt; len; ++i) {\n            list[i].call(this, data);\n        }\n    }\n};\n\nEvent.prototype.once = function (type, handler) {\n    var self = this;\n\n    function wrapper() {\n        handler.apply(self, arguments);\n        self.off(type, wrapper);\n    }\n    this.on(type, wrapper);\n    return this;\n};\n</code></pre><h3 id=\"编写一个函数将列表子元素顺序反转\"><a href=\"#编写一个函数将列表子元素顺序反转\" class=\"headerlink\" title=\"编写一个函数将列表子元素顺序反转\"></a>编写一个函数将列表子元素顺序反转</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul id=&quot;target&quot;&gt;</div><div class=\"line\">    &lt;li&gt;1&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;2&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;3&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;4&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    var target = document.getElementById(&apos;target&apos;);</div><div class=\"line\">    var i;</div><div class=\"line\">    var frag = document.createDocumentFragment();</div><div class=\"line\"></div><div class=\"line\">    for (i = target.children.length - 1; i &amp;gt;= 0; --i) &#123;</div><div class=\"line\">        frag.appendChild(target.children[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    target.appendChild(frag);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"以下函数的作用是-空白区域应该填写什么\"><a href=\"#以下函数的作用是-空白区域应该填写什么\" class=\"headerlink\" title=\"以下函数的作用是?空白区域应该填写什么\"></a>以下函数的作用是?空白区域应该填写什么</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// define</div><div class=\"line\">(function (window) &#123;</div><div class=\"line\">    function fn(str) &#123;</div><div class=\"line\">        this.str = str;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    fn.prototype.format = function () &#123;</div><div class=\"line\">        var arg = __1__;</div><div class=\"line\">        return this.str.replace(__2__, function (a, b) &#123;</div><div class=\"line\">            return arg[b] || &apos;&apos;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    window.fn = fn;</div><div class=\"line\">&#125;)(window);</div><div class=\"line\"></div><div class=\"line\">// use</div><div class=\"line\">(function () &#123;</div><div class=\"line\">    var t = new fn(&apos;&lt;p&gt;&lt;a href=&quot;&#123;0&#125;&quot;&gt;&#123;1&#125;&lt;/a&gt;&lt;span&gt;&#123;2&#125;&lt;/span&gt;&lt;/p&gt;&apos;);</div><div class=\"line\">    console.log(t.format(&apos;http://www.alibaba.com&apos;, &apos;Alibaba&apos;, &apos;Welcome&apos;));</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>define部分定义一个简单的模板类，使用{}作为转义标记，中间的数字表示替换目标，format实参用来替换模板内标记<br>横线处填：</p>\n<ol>\n<li><code>Array.prototype.slice.call(arguments, 0)</code></li>\n<li><code>/\\{\\s*(\\d+)\\s*\\}/g</code></li>\n</ol>\n<h3 id=\"编写一个函数实现form的序列化-即将一个表单中的键值序列化为可提交的字符串\"><a href=\"#编写一个函数实现form的序列化-即将一个表单中的键值序列化为可提交的字符串\" class=\"headerlink\" title=\"编写一个函数实现form的序列化(即将一个表单中的键值序列化为可提交的字符串)\"></a>编写一个函数实现form的序列化(即将一个表单中的键值序列化为可提交的字符串)</h3><pre><code>&lt;form id=&quot;target&quot;&gt;\n    &lt;select name=&quot;age&quot;&gt;\n        &lt;option value=&quot;aaa&quot;&gt;aaa&lt;/option&gt;\n        &lt;option value=&quot;bbb&quot; selected&gt;bbb&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;select name=&quot;friends&quot; multiple&gt;\n        &lt;option value=&quot;qiu&quot; selected&gt;qiu&lt;/option&gt;\n        &lt;option value=&quot;de&quot;&gt;de&lt;/option&gt;\n        &lt;option value=&quot;qing&quot; selected&gt;qing&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;input name=&quot;name&quot; value=&quot;qiudeqing&quot;&gt;\n    &lt;input type=&quot;password&quot; name=&quot;password&quot; value=&quot;11111&quot;&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;salery&quot; value=&quot;3333&quot;&gt;\n    &lt;textarea name=&quot;description&quot;&gt;description&lt;/textarea&gt;\n    &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; checked value=&quot;football&quot;&gt;Football\n    &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;basketball&quot;&gt;Basketball\n    &lt;input type=&quot;radio&quot; name=&quot;sex&quot; checked value=&quot;Female&quot;&gt;Female\n    &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;Male&quot;&gt;Male\n&lt;/form&gt;\n\n\n&lt;script&gt;\n\n/**\n * 将一个表单元素序列化为可提交的字符串\n *\n * @param {FormElement} form 需要序列化的表单元素\n * @return {string} 表单序列化后的字符串\n */\nfunction serializeForm(form) {\n  if (!form || form.nodeName.toUpperCase() !== &apos;FORM&apos;) {\n    return;\n  }\n\n  var result = [];\n\n  var i, len;\n  var field, fieldName, fieldType;\n\n  for (i = 0, len = form.length; i &lt; len; ++i) {\n    field = form.elements[i];\n    fieldName = field.name;\n    fieldType = field.type;\n\n    if (field.disabled || !fieldName) {\n      continue;\n    } // enf if\n\n    switch (fieldType) {\n      case &apos;text&apos;:\n      case &apos;password&apos;:\n      case &apos;hidden&apos;:\n      case &apos;textarea&apos;:\n        result.push(encodeURIComponent(fieldName) + &apos;=&apos; +\n            encodeURIComponent(field.value));\n        break;\n\n      case &apos;radio&apos;:\n      case &apos;checkbox&apos;:\n        if (field.checked) {\n          result.push(encodeURIComponent(fieldName) + &apos;=&apos; +\n            encodeURIComponent(field.value));\n        }\n        break;\n\n      case &apos;select-one&apos;:\n      case &apos;select-multiple&apos;:\n        for (var j = 0, jLen = field.options.length; j &lt; jLen; ++j) {\n          if (field.options[j].selected) {\n            result.push(encodeURIComponent(fieldName) + &apos;=&apos; +\n              encodeURIComponent(field.options[j].value || field.options[j].text));\n          }\n        } // end for\n        break;\n\n      case &apos;file&apos;:\n      case &apos;submit&apos;:\n        break; // 是否处理？\n\n      default:\n        break;\n    } // end switch\n  } // end for\n\n    return result.join(&apos;&amp;&apos;);\n}\n\nvar form = document.getElementById(&apos;target&apos;);\nconsole.log(serializeForm(form));\n&lt;/script&gt;\n</code></pre><h3 id=\"使用原生javascript给下面列表中的li节点绑定点击事件-点击时创建一个Object对象-兼容IE和标准浏览器\"><a href=\"#使用原生javascript给下面列表中的li节点绑定点击事件-点击时创建一个Object对象-兼容IE和标准浏览器\" class=\"headerlink\" title=\"使用原生javascript给下面列表中的li节点绑定点击事件,点击时创建一个Object对象,兼容IE和标准浏览器\"></a>使用原生javascript给下面列表中的li节点绑定点击事件,点击时创建一个Object对象,兼容IE和标准浏览器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul id=&quot;nav&quot;&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=&quot;http://11111&quot;&gt;111&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=&quot;http://2222&quot;&gt;222&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=&quot;http://333&quot;&gt;333&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=&quot;http://444&quot;&gt;444&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">Object:</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;index&quot;: 1,</div><div class=\"line\">    &quot;name&quot;: &quot;111&quot;,</div><div class=\"line\">    &quot;link&quot;: &quot;http://1111&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>script:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\">var EventUtil = &#123;</div><div class=\"line\">    getEvent: function (event) &#123;</div><div class=\"line\">        return event || window.event;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getTarget: function (event) &#123;</div><div class=\"line\">        return event.target || event.srcElement;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // 返回注册成功的监听器，IE中需要使用返回值来移除监听器</div><div class=\"line\">    on: function (elem, type, handler) &#123;</div><div class=\"line\">        if (elem.addEventListener) &#123;</div><div class=\"line\">            elem.addEventListener(type, handler, false);</div><div class=\"line\">            return handler;</div><div class=\"line\">        &#125; else if (elem.attachEvent) &#123;</div><div class=\"line\">            function wrapper(event) &#123;</div><div class=\"line\">                return handler.call(elem, event);</div><div class=\"line\">            &#125;;</div><div class=\"line\">            elem.attachEvent(&apos;on&apos; + type, wrapper);</div><div class=\"line\">            return wrapper;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    off: function (elem, type, handler) &#123;</div><div class=\"line\">        if (elem.removeEventListener) &#123;</div><div class=\"line\">            elem.removeEventListener(type, handler, false);</div><div class=\"line\">        &#125; else if (elem.detachEvent) &#123;</div><div class=\"line\">            elem.detachEvent(&apos;on&apos; + type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    preventDefault: function (event) &#123;</div><div class=\"line\">        if (event.preventDefault) &#123;</div><div class=\"line\">            event.preventDefault();</div><div class=\"line\">        &#125; else if (&apos;returnValue&apos; in event) &#123;</div><div class=\"line\">            event.returnValue = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    stopPropagation: function (event) &#123;</div><div class=\"line\">        if (event.stopPropagation) &#123;</div><div class=\"line\">            event.stopPropagation();</div><div class=\"line\">        &#125; else if (&apos;cancelBubble&apos; in event) &#123;</div><div class=\"line\">            event.cancelBubble = true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">var DOMUtil = &#123;</div><div class=\"line\">    text: function (elem) &#123;</div><div class=\"line\">        if (&apos;textContent&apos; in elem) &#123;</div><div class=\"line\">            return elem.textContent;</div><div class=\"line\">        &#125; else if (&apos;innerText&apos; in elem) &#123;</div><div class=\"line\">            return elem.innerText;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    prop: function (elem, propName) &#123;</div><div class=\"line\">        return elem.getAttribute(propName);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var nav = document.getElementById(&apos;nav&apos;);</div><div class=\"line\"></div><div class=\"line\">EventUtil.on(nav, &apos;click&apos;, function (event) &#123;</div><div class=\"line\">    var event = EventUtil.getEvent(event);</div><div class=\"line\">    var target = EventUtil.getTarget(event);</div><div class=\"line\"></div><div class=\"line\">    var children = this.children;</div><div class=\"line\">    var i, len;</div><div class=\"line\">    var anchor;</div><div class=\"line\">    var obj = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    for (i = 0, len = children.length; i &lt; len; ++i) &#123;</div><div class=\"line\">        if (children[i] === target) &#123;</div><div class=\"line\">            obj.index = i + 1;</div><div class=\"line\">            anchor = target.getElementsByTagName(&apos;a&apos;)[0];</div><div class=\"line\">            obj.name = DOMUtil.text(anchor);</div><div class=\"line\">            obj.link = DOMUtil.prop(anchor, &apos;href&apos;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    alert(&apos;index: &apos; + obj.index + &apos; name: &apos; + obj.name +</div><div class=\"line\">        &apos; link: &apos; + obj.link);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"有一个大数组-var-a-‘1’-‘2’-‘3’-…-a的长度是100-内容填充随机整数的字符串-请先构造此数组a-然后设计一个算法将其内容去重\"><a href=\"#有一个大数组-var-a-‘1’-‘2’-‘3’-…-a的长度是100-内容填充随机整数的字符串-请先构造此数组a-然后设计一个算法将其内容去重\" class=\"headerlink\" title=\"有一个大数组,var a = [‘1’, ‘2’, ‘3’, …];a的长度是100,内容填充随机整数的字符串.请先构造此数组a,然后设计一个算法将其内容去重\"></a>有一个大数组,var a = [‘1’, ‘2’, ‘3’, …];a的长度是100,内容填充随机整数的字符串.请先构造此数组a,然后设计一个算法将其内容去重</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* 数组去重</div><div class=\"line\">**/</div><div class=\"line\">function normalize(arr) &#123;</div><div class=\"line\">    if (arr &amp;&amp; Array.isArray(arr)) &#123;</div><div class=\"line\">        var i, len, map = &#123;&#125;;</div><div class=\"line\">        for (i = arr.length; i &gt;= 0; --i) &#123;</div><div class=\"line\">            if (arr[i] in map) &#123;</div><div class=\"line\">                arr.splice(i, 1);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                map[arr[i]] = true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return arr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">* 用100个随机整数对应的字符串填充数组。</div><div class=\"line\">**/</div><div class=\"line\">function fillArray(arr, start, end) &#123;</div><div class=\"line\">    start = start == undefined ? 1 : start;</div><div class=\"line\">    end = end == undefined ?  100 : end;</div><div class=\"line\"></div><div class=\"line\">    if (end &lt;= start) &#123;</div><div class=\"line\">        end = start + 100;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var width = end - start;</div><div class=\"line\">    var i;</div><div class=\"line\">    for (i = 100; i &gt;= 1; --i) &#123;</div><div class=\"line\">        arr.push(&apos;&apos; + (Math.floor(Math.random() * width) + start));</div><div class=\"line\">    &#125;</div><div class=\"line\">    return arr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var input = [];</div><div class=\"line\">fillArray(input, 1, 100);</div><div class=\"line\">input.sort(function (a, b) &#123;</div><div class=\"line\">    return a - b;</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(input);</div><div class=\"line\"></div><div class=\"line\">normalize(input);</div><div class=\"line\">console.log(input);</div></pre></td></tr></table></figure>\n<hr>\n<p>转载自: <a href=\"https://github.com/qiu-deqing/FE-interview\" target=\"_blank\" rel=\"external\">https://github.com/qiu-deqing/FE-interview</a></p>\n","excerpt":"<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<p><strong>Table of Contents</strong>  <em>generated with <a href=\"http://doctoc.herokuapp.com/\">DocToc</a></em><br><strong>前端面试基础题</strong><br>","more":"</p>\n<ul>\n<li><a href=\"#fe-interview\">FE-interview</a><ul>\n<li><a href=\"#$html，-http，web综合问题\">$HTML， HTTP，web综合问题</a><ul>\n<li><a href=\"#常见排序算法的时间复杂度空间复杂度\">常见排序算法的时间复杂度,空间复杂度</a></li>\n<li><a href=\"#前端需要注意哪些seo\">前端需要注意哪些SEO</a></li>\n<li><a href=\"#web开发中会话跟踪的方法有哪些\">web开发中会话跟踪的方法有哪些</a></li>\n<li><a href=\"#img的title和alt有什么区别\"><code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</a></li>\n<li><a href=\"#doctype是什么举例常见doctype及特点\">doctype是什么,举例常见doctype及特点</a></li>\n<li><a href=\"#html全局属性global-attribute有哪些\">HTML全局属性(global attribute)有哪些</a></li>\n<li><a href=\"#什么是web语义化有什么好处\">什么是web语义化,有什么好处</a></li>\n<li><a href=\"#http-method\">HTTP method</a></li>\n<li><a href=\"#从浏览器地址栏输入url到显示页面的步骤以http为例\">从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)</a></li>\n<li><a href=\"#http-request报文结构是怎样的\">HTTP request报文结构是怎样的</a></li>\n<li><a href=\"#http-response报文结构是怎样的\">HTTP response报文结构是怎样的</a></li>\n<li><a href=\"#如何进行网站性能优化\">如何进行网站性能优化</a></li>\n<li><a href=\"#什么是渐进增强\">什么是渐进增强</a></li>\n<li><a href=\"#http状态码及其含义\">HTTP状态码及其含义</a></li>\n</ul>\n</li>\n<li><a href=\"#$css部分\">$CSS部分</a><ul>\n<li><a href=\"#css选择器有哪些\">CSS选择器有哪些</a></li>\n<li><a href=\"#css-sprite是什么有什么优缺点\">css sprite是什么,有什么优缺点</a></li>\n<li><a href=\"#display-none与visibility-hidden的区别\"><code>display: none;</code>与<code>visibility: hidden;</code>的区别</a></li>\n<li><a href=\"#css-hack原理及常用hack\">css hack原理及常用hack</a></li>\n<li><a href=\"#specified-valuecomputed-valueused-value计算方法\">specified value,computed value,used value计算方法</a></li>\n<li><a href=\"#link与@import的区别\"><code>link</code>与<code>@import</code>的区别</a></li>\n<li><a href=\"#display-block和display-inline的区别\"><code>display: block;</code>和<code>display: inline;</code>的区别</a></li>\n<li><a href=\"#pnggifjpg的区别及如何选\">PNG,GIF,JPG的区别及如何选</a></li>\n<li><a href=\"#css有哪些继承属性\">CSS有哪些继承属性</a></li>\n<li><a href=\"#ie6浏览器有哪些常见的bug缺陷或者与标准不一致的地方如何解决\">IE6浏览器有哪些常见的bug,缺陷或者与标准不一致的地方,如何解决</a></li>\n<li><a href=\"#容器包含若干浮动元素时如何清理包含浮动\">容器包含若干浮动元素时如何清理(包含)浮动</a></li>\n<li><a href=\"#什么是fouc如何避免\">什么是FOUC?如何避免</a></li>\n<li><a href=\"#如何创建块级格式化上下文block-formatting-contextbfc有什么用\">如何创建块级格式化上下文(block formatting context),BFC有什么用</a></li>\n<li><a href=\"#displayfloatposition的关系\">display,float,position的关系</a></li>\n<li><a href=\"#外边距折叠collapsing-margins\">外边距折叠(collapsing margins)</a></li>\n<li><a href=\"#如何确定一个元素的包含块containing-block\">如何确定一个元素的包含块(containing block)</a></li>\n<li><a href=\"#stacking-context布局规则\">stacking context,布局规则</a></li>\n<li><a href=\"#如何水平居中一个元素\">如何水平居中一个元素</a></li>\n<li><a href=\"#如何竖直居中一个元素\">如何竖直居中一个元素</a></li>\n</ul>\n</li>\n<li><a href=\"#$javascript概念部分\">$javascript概念部分</a><ul>\n<li><a href=\"#dom元素e的egetattributepropname和epropname有什么区别和联系\">DOM元素e的e.getAttribute(propName)和e.propName有什么区别和联系</a></li>\n<li><a href=\"#offsetwidthoffsetheightclientwidthclientheight与scrollwidthscrollheight的区别\">offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别</a></li>\n<li><a href=\"#xmlhttprequest通用属性和方法\">XMLHttpRequest通用属性和方法</a></li>\n<li><a href=\"#focusblur与focusinfocusout的区别与联系\">focus/blur与focusin/focusout的区别与联系</a></li>\n<li><a href=\"#mouseovermouseout与mouseentermouseleave的区别与联系\">mouseover/mouseout与mouseenter/mouseleave的区别与联系</a></li>\n<li><a href=\"#sessionstoragelocalstoragecookie区别\">sessionStorage,localStorage,cookie区别</a></li>\n<li><a href=\"#javascript跨域通信\">javascript跨域通信</a></li>\n<li><a href=\"#javascript有哪几种数据类型\">javascript有哪几种数据类型</a></li>\n<li><a href=\"#什么闭包闭包有什么用\">什么闭包,闭包有什么用</a></li>\n<li><a href=\"#javascript有哪几种方法定义函数\">javascript有哪几种方法定义函数</a></li>\n<li><a href=\"#应用程序存储和离线web应用\">应用程序存储和离线web应用</a></li>\n<li><a href=\"#客户端存储localstorage和sessionstorage\">客户端存储localStorage和sessionStorage</a></li>\n<li><a href=\"#cookie及其操作\">cookie及其操作</a></li>\n<li><a href=\"#javascript有哪些方法定义对象\">javascript有哪些方法定义对象</a></li>\n<li><a href=\"#===运算符判断相等的流程是怎样的\">===运算符判断相等的流程是怎样的</a></li>\n<li><a href=\"#==运算符判断相等的流程是怎样的\">==运算符判断相等的流程是怎样的</a></li>\n<li><a href=\"#对象到字符串的转换步骤\">对象到字符串的转换步骤</a></li>\n<li><a href=\"#对象到数字的转换步骤\">对象到数字的转换步骤</a></li>\n<li><a href=\"#==的比较规则\">&lt;,&gt;,&lt;=,&gt;=的比较规则</a></li>\n<li><a href=\"#运算符工作流程\">+运算符工作流程</a></li>\n<li><a href=\"#函数内部arguments变量有哪些特性有哪些属性如何将它转换为数组\">函数内部arguments变量有哪些特性,有哪些属性,如何将它转换为数组</a></li>\n<li><a href=\"#dom事件模型是如何的编写一个eventutil工具类实现事件管理兼容\">DOM事件模型是如何的,编写一个EventUtil工具类实现事件管理兼容</a></li>\n<li><a href=\"#评价一下三种方法实现继承的优缺点并改进\">评价一下三种方法实现继承的优缺点,并改进</a></li>\n</ul>\n</li>\n<li><a href=\"#$javascript编程部分\">$javascript编程部分</a><ul>\n<li><a href=\"#请用原生js实现一个函数给页面制定的任意一个元素添加一个透明遮罩透明度可变默认02使这个区域点击无效要求兼容ie8及各主流浏览器遮罩层效果如下图所示\">请用原生js实现一个函数,给页面制定的任意一个元素添加一个透明遮罩(透明度可变,默认0.2),使这个区域点击无效,要求兼容IE8+及各主流浏览器,遮罩层效果如下图所示:</a></li>\n<li><a href=\"#请用代码写出今天是星期x其中x表示当天是星期几如果当天是星期一输出应该是今天是星期一\">请用代码写出(今天是星期x)其中x表示当天是星期几,如果当天是星期一,输出应该是”今天是星期一”</a></li>\n<li><a href=\"#下面这段代码想要循环延时输出结果0-1-2-3-4请问输出结果是否正确如果不正确请说明为什么并修改循环内的代码使其输出正确结果\">下面这段代码想要循环延时输出结果0 1 2 3 4,请问输出结果是否正确,如果不正确,请说明为什么,并修改循环内的代码使其输出正确结果</a></li>\n<li><a href=\"#现有一个page类其原型对象上有许多以post开头的方法如postmsg另有一拦截函数chekc只返回ture或false请设计一个函数该函数应批量改造原page的postxxx方法在保留其原有功能的同时为每个postxxx方法增加拦截验证功能当chekc返回true时继续执行原postxxx方法返回false时不再执行原postxxx方法\">现有一个Page类,其原型对象上有许多以post开头的方法(如postMsg);另有一拦截函数chekc,只返回ture或false.请设计一个函数,该函数应批量改造原Page的postXXX方法,在保留其原有功能的同时,为每个postXXX方法增加拦截验证功能,当chekc返回true时继续执行原postXXX方法,返回false时不再执行原postXXX方法</a></li>\n<li><a href=\"#完成下面的tool-tip\">完成下面的tool-tip</a></li>\n<li><a href=\"#编写javascript深度克隆函数deepclone\">编写javascript深度克隆函数deepClone</a></li>\n<li><a href=\"#补充代码鼠标单击button1后将button1移动到button2的后面\">补充代码,鼠标单击Button1后将Button1移动到Button2的后面</a></li>\n<li><a href=\"#网页中实现一个计算当年还剩多少时间的倒数计时程序要求网页上实时动态显示××年还剩××天××时××分××秒\">网页中实现一个计算当年还剩多少时间的倒数计时程序,要求网页上实时动态显示”××年还剩××天××时××分××秒”</a></li>\n<li><a href=\"#完成一个函数接受数组作为参数数组元素为整数或者数组数组元素包含整数或数组函数返回扁平化后的数组\">完成一个函数,接受数组作为参数,数组元素为整数或者数组,数组元素包含整数或数组,函数返回扁平化后的数组</a></li>\n<li><a href=\"#如何判断一个对象是否为数组\">如何判断一个对象是否为数组</a></li>\n<li><a href=\"#请评价以下事件监听器代码并给出改进意见\">请评价以下事件监听器代码并给出改进意见</a></li>\n<li><a href=\"#如何判断一个对象是否为函数\">如何判断一个对象是否为函数</a></li>\n<li><a href=\"#编写一个函数接受url中query-string为参数返回解析后的objectquery-string使用applicationx-www-form-urlencoded编码\">编写一个函数接受url中query string为参数,返回解析后的Object,query string使用application/x-www-form-urlencoded编码</a></li>\n<li><a href=\"#解析一个完整的url返回object包含域与windowlocation相同\">解析一个完整的url,返回Object包含域与window.location相同</a></li>\n<li><a href=\"#完成函数getviewportsize返回指定窗口的视口尺寸\">完成函数getViewportSize返回指定窗口的视口尺寸</a></li>\n<li><a href=\"#完成函数getscrolloffset返回窗口滚动条偏移量\">完成函数getScrollOffset返回窗口滚动条偏移量</a></li>\n<li><a href=\"#现有一个字符串richtext是一段富文本需要显示在页面上有个要求需要给其中只包含一个img元素的p标签增加一个叫pic的class请编写代码实现可以使用jquery或kissy\">现有一个字符串richText,是一段富文本,需要显示在页面上.有个要求,需要给其中只包含一个img元素的p标签增加一个叫pic的class.请编写代码实现.可以使用jQuery或KISSY.</a></li>\n<li><a href=\"#请实现一个event类继承自此类的对象都会拥有两个方法onoffonce和trigger\">请实现一个Event类,继承自此类的对象都会拥有两个方法on,off,once和trigger</a></li>\n<li><a href=\"#编写一个函数将列表子元素顺序反转\">编写一个函数将列表子元素顺序反转</a></li>\n<li><a href=\"#以下函数的作用是空白区域应该填写什么\">以下函数的作用是?空白区域应该填写什么</a></li>\n<li><a href=\"#编写一个函数实现form的序列化即将一个表单中的键值序列化为可提交的字符串\">编写一个函数实现form的序列化(即将一个表单中的键值序列化为可提交的字符串)</a></li>\n<li><a href=\"#使用原生javascript给下面列表中的li节点绑定点击事件点击时创建一个object对象兼容ie和标准浏览器\">使用原生javascript给下面列表中的li节点绑定点击事件,点击时创建一个Object对象,兼容IE和标准浏览器</a></li>\n<li><a href=\"#有一个大数组var-a-=-1-2-3-a的长度是100内容填充随机整数的字符串请先构造此数组a然后设计一个算法将其内容去重\">有一个大数组,var a = [‘1’, ‘2’, ‘3’, …];a的长度是100,内容填充随机整数的字符串.请先构造此数组a,然后设计一个算法将其内容去重</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<h1 id=\"FE-interview\"><a href=\"#FE-interview\" class=\"headerlink\" title=\"FE-interview\"></a>FE-interview</h1><p>个人收集的前端知识点、面试题和答案，参考答案仅代表个人观点，方便复习，目录如下，通过文档内搜索目录可快速定位章节</p>\n<h2 id=\"HTML，-HTTP，web综合问题\"><a href=\"#HTML，-HTTP，web综合问题\" class=\"headerlink\" title=\"$HTML， HTTP，web综合问题\"></a>$HTML， HTTP，web综合问题</h2><h3 id=\"常见排序算法的时间复杂度-空间复杂度\"><a href=\"#常见排序算法的时间复杂度-空间复杂度\" class=\"headerlink\" title=\"常见排序算法的时间复杂度,空间复杂度\"></a>常见排序算法的时间复杂度,空间复杂度</h3><p><img src=\"http://7xsspr.com2.z0.glb.clouddn.com/sort-compare.png\" alt=\"排序算法比较\"></p>\n<h3 id=\"前端需要注意哪些SEO\"><a href=\"#前端需要注意哪些SEO\" class=\"headerlink\" title=\"前端需要注意哪些SEO\"></a>前端需要注意哪些SEO</h3><ol>\n<li>合理的title、description、keywords：搜索对着三项的权重逐个减小，title值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面title要有所不同；description把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面description有所不同；keywords列举出重要关键词即可</li>\n<li>语义化的HTML代码，符合W3C规范：语义化代码让搜索引擎容易理解网页</li>\n<li>重要内容HTML代码放在最前：搜索引擎抓取HTML顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</li>\n<li>重要内容不要用js输出：爬虫不会执行js获取内容</li>\n<li>少用iframe：搜索引擎不会抓取iframe中的内容</li>\n<li>非装饰性图片必须加alt</li>\n<li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li>\n</ol>\n<h3 id=\"web开发中会话跟踪的方法有哪些\"><a href=\"#web开发中会话跟踪的方法有哪些\" class=\"headerlink\" title=\"web开发中会话跟踪的方法有哪些\"></a>web开发中会话跟踪的方法有哪些</h3><ol>\n<li>cookie</li>\n<li>session</li>\n<li>url重写</li>\n<li>隐藏input</li>\n<li>ip地址</li>\n</ol>\n<h3 id=\"lt-img-gt-的title和alt有什么区别\"><a href=\"#lt-img-gt-的title和alt有什么区别\" class=\"headerlink\" title=\"&lt;img&gt;的title和alt有什么区别\"></a><code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</h3><ol>\n<li><code>title</code>是<a href=\"http://www.w3.org/TR/html-markup/global-attributes.html#common.attrs.core\">global attributes</a>之一，用于为元素提供附加的advisory information。通常当鼠标滑动到元素上的时候显示。</li>\n<li><code>alt</code>是<code>&lt;img&gt;</code>的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。</li>\n</ol>\n<h3 id=\"doctype是什么-举例常见doctype及特点\"><a href=\"#doctype是什么-举例常见doctype及特点\" class=\"headerlink\" title=\"doctype是什么,举例常见doctype及特点\"></a>doctype是什么,举例常见doctype及特点</h3><ol>\n<li><code>&lt;!doctype&gt;</code>声明必须处于HTML文档的头部，在<code>&lt;html&gt;</code>标签之前，HTML5中不区分大小写</li>\n<li><code>&lt;!doctype&gt;</code>声明不是一个HTML标签，是一个用于告诉浏览器当前HTMl版本的指令</li>\n<li>现代浏览器的html布局引擎通过检查doctype决定使用兼容模式还是标准模式对文档进行渲染，一些浏览器有一个接近标准模型。</li>\n<li>在HTML4.01中<code>&lt;!doctype&gt;</code>声明指向一个DTD，由于HTML4.01基于SGML，所以DTD指定了标记规则以保证浏览器正确渲染内容</li>\n<li>HTML5不基于SGML，所以不用指定DTD</li>\n</ol>\n<p>常见dotype：</p>\n<ol>\n<li><strong>HTML4.01 strict</strong>：不允许使用表现性、废弃元素（如font）以及frameset。声明：<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</code></li>\n<li><strong>HTML4.01 Transitional</strong>:允许使用表现性、废弃元素（如font），不允许使用frameset。声明：<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</code></li>\n<li><strong>HTML4.01 Frameset</strong>:允许表现性元素，废气元素以及frameset。声明：<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;</code></li>\n<li><strong>XHTML1.0 Strict</strong>:不使用允许表现性、废弃元素以及frameset。文档必须是结构良好的XML文档。声明：<code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</code></li>\n<li><strong>XHTML1.0 Transitional</strong>:允许使用表现性、废弃元素，不允许frameset，文档必须是结构良好的XMl文档。声明： <code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</code></li>\n<li><strong>XHTML 1.0 Frameset</strong>:允许使用表现性、废弃元素以及frameset，文档必须是结构良好的XML文档。声明：<code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;</code></li>\n<li><strong>HTML 5</strong>: <code>&lt;!doctype html&gt;</code></li>\n</ol>\n<h3 id=\"HTML全局属性-global-attribute-有哪些\"><a href=\"#HTML全局属性-global-attribute-有哪些\" class=\"headerlink\" title=\"HTML全局属性(global attribute)有哪些\"></a>HTML全局属性(global attribute)有哪些</h3><p>参考资料：<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\">MDN: html global attribute</a>或者<a href=\"http://www.w3.org/TR/html-markup/global-attributes.html#common.attrs.core\">W3C HTML global-attributes</a></p>\n<ul>\n<li><code>accesskey</code>:设置快捷键，提供快速访问元素如<a href=\"#\" accesskey=\"a\">aaa</a>在windows下的firefox中按<code>alt + shift + a</code>可激活元素</li>\n<li><code>class</code>:为元素设置类标识，多个类名用空格分开，CSS和javascript可通过class属性获取元素</li>\n<li><code>contenteditable</code>: 指定元素内容是否可编辑</li>\n<li><code>contextmenu</code>: 自定义鼠标右键弹出菜单内容</li>\n<li><code>data-*</code>: 为元素增加自定义属性</li>\n<li><code>dir</code>: 设置元素文本方向</li>\n<li><code>draggable</code>: 设置元素是否可拖拽</li>\n<li><code>dropzone</code>: 设置元素拖放类型： copy, move, link</li>\n<li><code>hidden</code>: 表示一个元素是否与文档。样式上会导致元素不显示，但是不能用这个属性实现样式效果</li>\n<li><code>id</code>: 元素id，文档内唯一</li>\n<li><code>lang</code>: 元素内容的的语言</li>\n<li><code>spellcheck</code>: 是否启动拼写和语法检查</li>\n<li><code>style</code>: 行内css样式</li>\n<li><code>tabindex</code>: 设置元素可以获得焦点，通过tab可以导航</li>\n<li><code>title</code>: 元素相关的建议信息</li>\n<li><code>translate</code>: 元素和子孙节点内容是否需要本地化</li>\n</ul>\n<h3 id=\"什么是web语义化-有什么好处\"><a href=\"#什么是web语义化-有什么好处\" class=\"headerlink\" title=\"什么是web语义化,有什么好处\"></a>什么是web语义化,有什么好处</h3><p>web语义化是指通过HTML标记表示页面包含的信息，包含了HTML标签的语义化和css命名的语义化。<br>HTML标签的语义化是指：通过使用包含语义的标签（如h1-h6）恰当地表示文档结构<br>css命名的语义化是指：为html标签添加有意义的class，id补充未表达的语义，如<a href=\"http://en.wikipedia.org/wiki/Microformats\">Microformat</a>通过添加符合规则的class描述信息<br>为什么需要语义化：</p>\n<ul>\n<li>去掉样式后页面呈现清晰的结构</li>\n<li>盲人使用读屏器更好地阅读</li>\n<li>搜索引擎更好地理解页面，有利于收录</li>\n<li>便团队项目的可持续运作及维护</li>\n</ul>\n<h3 id=\"HTTP-method\"><a href=\"#HTTP-method\" class=\"headerlink\" title=\"HTTP method\"></a>HTTP method</h3><ol>\n<li>一台服务器要与HTTP1.1兼容，只要为资源实现<strong>GET</strong>和<strong>HEAD</strong>方法即可</li>\n<li><strong>GET</strong>是最常用的方法，通常用于<strong>请求服务器发送某个资源</strong>。</li>\n<li><strong>HEAD</strong>与GET类似，但<strong>服务器在响应中值返回首部，不返回实体的主体部分</strong></li>\n<li><strong>PUT</strong>让服务器<strong>用请求的主体部分来创建一个由所请求的URL命名的新文档，或者，如果那个URL已经存在的话，就用干这个主体替代它</strong></li>\n<li><strong>POST</strong>起初是用来向服务器输入数据的。实际上，通常会用它来支持HTML的表单。表单中填好的数据通常会被送给服务器，然后由服务器将其发送到要去的地方。</li>\n<li><strong>TRACE</strong>会在目的服务器端发起一个环回诊断，最后一站的服务器会弹回一个TRACE响应并在响应主体中携带它收到的原始请求报文。TRACE方法主要用于诊断，用于验证请求是否如愿穿过了请求/响应链。</li>\n<li><strong>OPTIONS</strong>方法请求web服务器告知其支持的各种功能。可以查询服务器支持哪些方法或者对某些特殊资源支持哪些方法。</li>\n<li><strong>DELETE</strong>请求服务器删除请求URL指定的资源</li>\n</ol>\n<h3 id=\"从浏览器地址栏输入url到显示页面的步骤-以HTTP为例\"><a href=\"#从浏览器地址栏输入url到显示页面的步骤-以HTTP为例\" class=\"headerlink\" title=\"从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)\"></a>从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)</h3><ol>\n<li>在浏览器地址栏输入URL</li>\n<li>浏览器查看<strong>缓存</strong>，如果请求资源在缓存中并且新鲜，跳转到转码步骤<ol>\n<li>如果资源未缓存，发起新请求</li>\n<li>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</li>\n<li>检验新鲜通常有两个HTTP头进行控制<code>Expires</code>和<code>Cache-Control</code>：<ul>\n<li>HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期</li>\n<li>HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>浏览器<strong>解析URL</strong>获取协议，主机，端口，path</li>\n<li>浏览器<strong>组装一个HTTP（GET）请求报文</strong></li>\n<li>浏览器<strong>获取主机ip地址</strong>，过程如下：<ol>\n<li>浏览器缓存</li>\n<li>本机缓存</li>\n<li>hosts文件</li>\n<li>路由器缓存</li>\n<li>ISP DNS缓存</li>\n<li>DNS递归查询（可能存在负载均衡导致每次IP不一样）</li>\n</ol>\n</li>\n<li><strong>打开一个socket与目标IP地址，端口建立TCP链接</strong>，三次握手如下：<ol>\n<li>客户端发送一个TCP的<strong>SYN=1，Seq=X</strong>的包到服务器端口</li>\n<li>服务器发回<strong>SYN=1， ACK=X+1， Seq=Y</strong>的响应包</li>\n<li>客户端发送<strong>ACK=Y+1， Seq=Z</strong></li>\n</ol>\n</li>\n<li>TCP链接建立后<strong>发送HTTP请求</strong></li>\n<li>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序</li>\n<li>服务器检查<strong>HTTP请求头是否包含缓存验证信息</strong>如果验证缓存新鲜，返回<strong>304</strong>等对应状态码</li>\n<li>处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作</li>\n<li>服务器将<strong>响应报文通过TCP连接发送回浏览器</strong></li>\n<li>浏览器接收HTTP响应，然后根据情况选择<strong>关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下</strong>：<ol>\n<li>主动方发送<strong>Fin=1， Ack=Z， Seq= X</strong>报文</li>\n<li>被动方发送<strong>ACK=X+1， Seq=Z</strong>报文</li>\n<li>被动方发送<strong>Fin=1， ACK=X， Seq=Y</strong>报文</li>\n<li>主动方发送<strong>ACK=Y， Seq=X</strong>报文</li>\n</ol>\n</li>\n<li>浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同</li>\n<li>如果资源可缓存，<strong>进行缓存</strong></li>\n<li>对响应进行<strong>解码</strong>（例如gzip压缩）</li>\n<li>根据资源类型决定如何处理（假设资源为HTML文档）</li>\n<li><strong>解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本</strong>，这些操作没有严格的先后顺序，以下分别解释</li>\n<li><strong>构建DOM树</strong>：<ol>\n<li><strong>Tokenizing</strong>：根据HTML规范将字符流解析为标记</li>\n<li><strong>Lexing</strong>：词法分析将标记转换为对象并定义属性和规则</li>\n<li><strong>DOM construction</strong>：根据HTML标记关系将对象组成DOM树</li>\n</ol>\n</li>\n<li>解析过程中遇到图片、样式表、js文件，<strong>启动下载</strong></li>\n<li>构建<strong>CSSOM树</strong>：<ol>\n<li><strong>Tokenizing</strong>：字符流转换为标记流</li>\n<li><strong>Node</strong>：根据标记创建节点</li>\n<li><strong>CSSOM</strong>：节点创建CSSOM树</li>\n</ol>\n</li>\n<li><strong><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction\">根据DOM树和CSSOM树构建渲染树</a></strong>:<ol>\n<li>从DOM树的根节点遍历所有<strong>可见节点</strong>，不可见节点包括：1）<code>script</code>,<code>meta</code>这样本身不可见的标签。2)被css隐藏的节点，如<code>display: none</code></li>\n<li>对每一个可见节点，找到恰当的CSSOM规则并应用</li>\n<li>发布可视节点的内容和计算样式</li>\n</ol>\n</li>\n<li><strong>js解析如下</strong>：<ol>\n<li>浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时<strong>document.readystate为loading</strong></li>\n<li>HTML解析器遇到<strong>没有async和defer的script时</strong>，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。<strong>同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容</strong></li>\n<li>当解析器遇到设置了<strong>async</strong>属性的script时，开始下载脚本并继续解析文档。脚本会在它<strong>下载完成后尽快执行</strong>，但是<strong>解析器不会停下来等它下载</strong>。异步脚本<strong>禁止使用document.write()</strong>，它们可以访问自己script和之前的文档元素</li>\n<li>当文档完成解析，document.readState变成interactive</li>\n<li>所有<strong>defer</strong>脚本会<strong>按照在文档出现的顺序执行</strong>，延迟脚本<strong>能访问完整文档树</strong>，禁止使用document.write()</li>\n<li>浏览器<strong>在Document对象上触发DOMContentLoaded事件</strong></li>\n<li>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些<strong>内容完成载入并且所有异步脚本完成载入和执行</strong>，document.readState变为complete,window触发load事件</li>\n</ol>\n</li>\n<li><strong>显示页面</strong>（HTML解析过程中会逐步显示页面）</li>\n</ol>\n<h3 id=\"HTTP-request报文结构是怎样的\"><a href=\"#HTTP-request报文结构是怎样的\" class=\"headerlink\" title=\"HTTP request报文结构是怎样的\"></a>HTTP request报文结构是怎样的</h3><p><a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html\">rfc2616</a>中进行了定义：</p>\n<ol>\n<li>首行是<strong>Request-Line</strong>包括：<strong>请求方法</strong>，<strong>请求URI</strong>，<strong>协议版本</strong>，<strong>CRLF</strong></li>\n<li>首行之后是若干行<strong>请求头</strong>，包括<strong>general-header</strong>，<strong>request-header</strong>或者<strong>entity-header</strong>，每个一行以CRLF结束</li>\n<li>请求头和消息实体之间有一个<strong>CRLF分隔</strong></li>\n<li>根据实际请求需要可能包含一个<strong>消息实体</strong><br>一个请求报文例子如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1</div><div class=\"line\">Host: www.w3.org</div><div class=\"line\">Connection: keep-alive</div><div class=\"line\">Cache-Control: max-age=0</div><div class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36</div><div class=\"line\">Referer: https://www.google.com.hk/</div><div class=\"line\">Accept-Encoding: gzip,deflate,sdch</div><div class=\"line\">Accept-Language: zh-CN,zh;q=0.8,en;q=0.6</div><div class=\"line\">Cookie: authorstyle=yes</div><div class=\"line\">If-None-Match: &quot;2cc8-3e3073913b100&quot;</div><div class=\"line\">If-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT</div><div class=\"line\"></div><div class=\"line\">name=qiu&amp;age=25</div></pre></td></tr></table></figure>\n<h3 id=\"HTTP-response报文结构是怎样的\"><a href=\"#HTTP-response报文结构是怎样的\" class=\"headerlink\" title=\"HTTP response报文结构是怎样的\"></a>HTTP response报文结构是怎样的</h3><p><a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html\">rfc2616</a>中进行了定义：</p>\n<ol>\n<li>首行是状态行包括：<strong>HTTP版本，状态码，状态描述</strong>，后面跟一个CRLF</li>\n<li>首行之后是<strong>若干行响应头</strong>，包括：<strong>通用头部，响应头部，实体头部</strong></li>\n<li>响应头部和响应实体之间用<strong>一个CRLF空行</strong>分隔</li>\n<li>最后是一个可能的<strong>消息实体</strong><br>响应报文例子如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 200 OK</div><div class=\"line\">Date: Tue, 08 Jul 2014 05:28:43 GMT</div><div class=\"line\">Server: Apache/2</div><div class=\"line\">Last-Modified: Wed, 01 Sep 2004 13:24:52 GMT</div><div class=\"line\">ETag: &quot;40d7-3e3073913b100&quot;</div><div class=\"line\">Accept-Ranges: bytes</div><div class=\"line\">Content-Length: 16599</div><div class=\"line\">Cache-Control: max-age=21600</div><div class=\"line\">Expires: Tue, 08 Jul 2014 11:28:43 GMT</div><div class=\"line\">P3P: policyref=&quot;http://www.w3.org/2001/05/P3P/p3p.xml&quot;</div><div class=\"line\">Content-Type: text/html; charset=iso-8859-1</div><div class=\"line\"></div><div class=\"line\">&#123;&quot;name&quot;: &quot;qiu&quot;, &quot;age&quot;: 25&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"如何进行网站性能优化\"><a href=\"#如何进行网站性能优化\" class=\"headerlink\" title=\"如何进行网站性能优化\"></a>如何进行网站性能优化</h3><p><a href=\"https://developer.yahoo.com/performance/rules.html\">雅虎Best Practices for Speeding Up Your Web Site</a>：</p>\n<ul>\n<li><p>content方面</p>\n<ol>\n<li>减少HTTP请求：合并文件、CSS精灵、inline Image</li>\n<li>减少DNS查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询</li>\n<li>避免重定向：多余的中间访问</li>\n<li>使Ajax可缓存</li>\n<li>非必须组件延迟加载</li>\n<li>未来所需组件预加载</li>\n<li>减少DOM元素数量</li>\n<li>将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量</li>\n<li>减少iframe数量</li>\n<li>不要404</li>\n</ol>\n</li>\n<li><p>Server方面</p>\n<ol>\n<li>使用CDN</li>\n<li>添加Expires或者Cache-Control响应头</li>\n<li>对组件使用Gzip压缩</li>\n<li>配置ETag</li>\n<li>Flush Buffer Early</li>\n<li>Ajax使用GET进行请求</li>\n<li>避免空src的img标签</li>\n</ol>\n</li>\n<li>Cookie方面<ol>\n<li>减小cookie大小</li>\n<li>引入资源的域名不要包含cookie</li>\n</ol>\n</li>\n<li>css方面<ol>\n<li>将样式表放到页面顶部</li>\n<li>不使用CSS表达式</li>\n<li>使用<link>不使用@import</li>\n<li>不使用IE的Filter</li>\n</ol>\n</li>\n<li>Javascript方面<ol>\n<li>将脚本放到页面底部</li>\n<li>将javascript和css从外部引入</li>\n<li>压缩javascript和css</li>\n<li>删除不需要的脚本</li>\n<li>减少DOM访问</li>\n<li>合理设计事件监听器</li>\n</ol>\n</li>\n<li>图片方面<ol>\n<li>优化图片：根据实际颜色需要选择色深、压缩</li>\n<li>优化css精灵</li>\n<li>不要在HTML中拉伸图片</li>\n<li>保证favicon.ico小并且可缓存</li>\n</ol>\n</li>\n<li>移动方面<ol>\n<li>保证组件小于25k</li>\n<li>Pack Components into a Multipart Document</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"什么是渐进增强\"><a href=\"#什么是渐进增强\" class=\"headerlink\" title=\"什么是渐进增强\"></a>什么是渐进增强</h3><p>渐进增强是指在web设计时强调可访问性、语义化HTML标签、外部样式表和脚本。保证所有人都能访问页面的基本内容和功能同时为高级浏览器和高带宽用户提供更好的用户体验。核心原则如下:</p>\n<ul>\n<li>所有浏览器都必须能访问基本内容</li>\n<li>所有浏览器都必须能使用基本功能</li>\n<li>所有内容都包含在语义化标签中</li>\n<li>通过外部CSS提供增强的布局</li>\n<li>通过非侵入式、外部javascript提供增强功能</li>\n<li>end-user web browser preferences are respected</li>\n</ul>\n<h3 id=\"HTTP状态码及其含义\"><a href=\"#HTTP状态码及其含义\" class=\"headerlink\" title=\"HTTP状态码及其含义\"></a>HTTP状态码及其含义</h3><p>参考<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">RFC 2616</a></p>\n<ul>\n<li>1XX：信息状态码<ul>\n<li><strong>100 Continue</strong>：客户端应当继续发送请求。这个临时相应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求万仇向客户端发送一个最终响应</li>\n<li><strong>101 Switching Protocols</strong>：服务器已经理解力客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到Upgrade消息头中定义的那些协议。</li>\n</ul>\n</li>\n<li>2XX：成功状态码<ul>\n<li><strong>200 OK</strong>：请求成功，请求所希望的响应头或数据体将随此响应返回</li>\n<li><strong>201 Created</strong>：</li>\n<li><strong>202 Accepted</strong>：</li>\n<li><strong>203 Non-Authoritative Information</strong>：</li>\n<li><strong>204 No Content</strong>：</li>\n<li><strong>205 Reset Content</strong>：</li>\n<li><strong>206 Partial Content</strong>：</li>\n</ul>\n</li>\n<li>3XX：重定向<ul>\n<li><strong>300 Multiple Choices</strong>：</li>\n<li><strong>301 Moved Permanently</strong>：</li>\n<li><strong>302 Found</strong>：</li>\n<li><strong>303 See Other</strong>：</li>\n<li><strong>304 Not Modified</strong>：</li>\n<li><strong>305 Use Proxy</strong>：</li>\n<li><strong>306 （unused）</strong>：</li>\n<li><strong>307 Temporary Redirect</strong>：</li>\n</ul>\n</li>\n<li>4XX：客户端错误<ul>\n<li><strong>400 Bad Request</strong>:</li>\n<li><strong>401 Unauthorized</strong>:</li>\n<li><strong>402 Payment Required</strong>:</li>\n<li><strong>403 Forbidden</strong>:</li>\n<li><strong>404 Not Found</strong>:</li>\n<li><strong>405 Method Not Allowed</strong>:</li>\n<li><strong>406 Not Acceptable</strong>:</li>\n<li><strong>407 Proxy Authentication Required</strong>:</li>\n<li><strong>408 Request Timeout</strong>:</li>\n<li><strong>409 Conflict</strong>:</li>\n<li><strong>410 Gone</strong>:</li>\n<li><strong>411 Length Required</strong>:</li>\n<li><strong>412 Precondition Failed</strong>:</li>\n<li><strong>413 Request Entity Too Large</strong>:</li>\n<li><strong>414 Request-URI Too Long</strong>:</li>\n<li><strong>415 Unsupported Media Type</strong>:</li>\n<li><strong>416 Requested Range Not Satisfiable</strong>:</li>\n<li><strong>417 Expectation Failed</strong>:</li>\n</ul>\n</li>\n<li>5XX: 服务器错误<ul>\n<li><strong>500 Internal Server Error</strong>:</li>\n<li><strong>501 Not Implemented</strong>:</li>\n<li><strong>502 Bad Gateway</strong>:</li>\n<li><strong>503 Service Unavailable</strong>:</li>\n<li><strong>504 Gateway Timeout</strong>:</li>\n<li><strong>505 HTTP Version Not Supported</strong>:</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"CSS部分\"><a href=\"#CSS部分\" class=\"headerlink\" title=\"$CSS部分\"></a>$CSS部分</h2><h3 id=\"CSS选择器有哪些\"><a href=\"#CSS选择器有哪些\" class=\"headerlink\" title=\"CSS选择器有哪些\"></a>CSS选择器有哪些</h3><ol>\n<li><strong>*通用选择器</strong>：选择所有元素，<strong>不参与计算优先级</strong>，兼容性IE6+</li>\n<li><strong>#X id选择器</strong>：选择id值为X的元素，兼容性：IE6+</li>\n<li><strong>.X 类选择器</strong>： 选择class包含X的元素，兼容性：IE6+</li>\n<li><strong>X Y后代选择器</strong>： 选择满足X选择器的后代节点中满足Y选择器的元素，兼容性：IE6+</li>\n<li><strong>X 元素选择器</strong>： 选择标所有签为X的元素，兼容性：IE6+</li>\n<li><strong>:link，：visited，：focus，：hover，：active链接状态</strong>： 选择特定状态的链接元素，顺序LoVe HAte，兼容性: IE4+</li>\n<li><strong>X + Y直接兄弟选择器</strong>：在<strong>X之后第一个兄弟节点</strong>中选择满足Y选择器的元素，兼容性： IE7+</li>\n<li><strong>X &gt; Y子选择器</strong>： 选择X的子元素中满足Y选择器的元素，兼容性： IE7+</li>\n<li><strong>X ~ Y兄弟</strong>： 选择<strong>X之后所有兄弟节点</strong>中满足Y选择器的元素，兼容性： IE7+</li>\n<li><strong>[attr]</strong>：选择所有设置了attr属性的元素，兼容性IE7+</li>\n<li><strong>[attr=value]</strong>：选择属性值刚好为value的元素</li>\n<li><strong>[attr~=value]</strong>：选择属性值为空白符分隔，其中一个的值刚好是value的元素</li>\n<li><strong>[attr|=value]</strong>：选择属性值刚好为value或者value-开头的元素</li>\n<li><strong>[attr^=value]</strong>：选择属性值以value开头的元素</li>\n<li><strong>[attr$=value]</strong>：选择属性值以value结尾的元素</li>\n<li><strong>[attr*=value]</strong>：选择属性值中包含value的元素</li>\n<li><strong>[:checked]</strong>：选择单选框，复选框，下拉框中选中状态下的元素，兼容性：IE9+</li>\n<li><strong>X:after, X::after</strong>：after伪元素，选择元素虚拟子元素（元素的最后一个子元素），CSS3中::表示伪元素。兼容性:after为IE8+，::after为IE9+</li>\n<li><strong>:hover</strong>：鼠标移入状态的元素，兼容性a标签IE4+， 所有元素IE7+</li>\n<li><strong>:not(selector)</strong>：选择不符合selector的元素。<strong>不参与计算优先级</strong>，兼容性：IE9+</li>\n<li><strong>::first-letter</strong>：伪元素，选择块元素第一行的第一个字母，兼容性IE5.5+</li>\n<li><strong>::first-line</strong>：伪元素，选择块元素的第一行，兼容性IE5.5+</li>\n<li><strong>:nth-child(an + b)</strong>：伪类，选择前面有an + b - 1个兄弟节点的元素，其中n<br>&gt;= 0， 兼容性IE9+</li>\n<li><strong>:nth-last-child(an + b)</strong>：伪类，选择后面有an + b - 1个兄弟节点的元素<br>其中n &gt;= 0，兼容性IE9+</li>\n<li><strong>X:nth-of-type(an+b)</strong>：伪类，X为选择器，<strong>解析得到元素标签</strong>，选择<strong>前面</strong>有an + b - 1个<strong>相同标签</strong>兄弟节点的元素。兼容性IE9+</li>\n<li><strong>X:nth-last-of-type(an+b)</strong>：伪类，X为选择器，解析得到元素标签，选择<strong>后面</strong>有an+b-1个相同<strong>标签</strong>兄弟节点的元素。兼容性IE9+</li>\n<li><strong>X:first-child</strong>：伪类，选择满足X选择器的元素，且这个元素是其父节点的第一个子元素。兼容性IE7+</li>\n<li><strong>X:last-child</strong>：伪类，选择满足X选择器的元素，且这个元素是其父节点的最后一个子元素。兼容性IE9+</li>\n<li><strong>X:only-child</strong>：伪类，选择满足X选择器的元素，且这个元素是其父元素的唯一子元素。兼容性IE9+</li>\n<li><strong>X:only-of-type</strong>：伪类，选择X选择的元素，<strong>解析得到元素标签</strong>，如果该元素没有相同类型的兄弟节点时选中它。兼容性IE9+</li>\n<li><strong>X:first-of-type</strong>：伪类，选择X选择的元素，<strong>解析得到元素标签</strong>，如果该元素<br>是此此类型元素的第一个兄弟。选中它。兼容性IE9+</li>\n</ol>\n<h3 id=\"css-sprite是什么-有什么优缺点\"><a href=\"#css-sprite是什么-有什么优缺点\" class=\"headerlink\" title=\"css sprite是什么,有什么优缺点\"></a>css sprite是什么,有什么优缺点</h3><p>概念：将多个小图片拼接到一个图片中。通过background-position和元素尺寸调节需要显示的背景图案。</p>\n<p>优点：</p>\n<ol>\n<li>减少HTTP请求数，极大地提高页面加载速度</li>\n<li>增加图片信息重复度，提高压缩比，减少图片大小</li>\n<li>更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>图片合并麻烦</li>\n<li>维护麻烦，修改一个图片可能需要从新布局整个图片，样式</li>\n</ol>\n<h3 id=\"display-none-与visibility-hidden-的区别\"><a href=\"#display-none-与visibility-hidden-的区别\" class=\"headerlink\" title=\"display: none;与visibility: hidden;的区别\"></a><code>display: none;</code>与<code>visibility: hidden;</code>的区别</h3><p>联系：它们都能让元素不可见</p>\n<p>区别：</p>\n<ol>\n<li>display:none;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；visibility: hidden;不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见</li>\n<li>display: none;是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示；visibility: hidden;是继承属性，子孙节点消失由于继承了hidden，通过设置visibility: visible;可以让子孙节点显式</li>\n<li>修改常规流中元素的display通常会造成文档重排。修改visibility属性只会造成本元素的重绘。</li>\n<li>读屏器不会读取display: none;元素内容；会读取visibility: hidden;元素内容</li>\n</ol>\n<h3 id=\"css-hack原理及常用hack\"><a href=\"#css-hack原理及常用hack\" class=\"headerlink\" title=\"css hack原理及常用hack\"></a>css hack原理及常用hack</h3><p>原理：利用<strong>不同浏览器对CSS的支持和解析结果不一样</strong>编写针对特定浏览器样式。常见的hack有1）属性hack。2）选择器hack。3）IE条件注释</p>\n<ul>\n<li>IE条件注释：适用于[IE5, IE9]常见格式如下</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--[if IE 6]&gt;</div><div class=\"line\">Special instructions for IE 6 here</div><div class=\"line\">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>选择器hack：不同浏览器对选择器的支持不一样</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">/***** Selector Hacks ******/</div><div class=\"line\"></div><div class=\"line\">/* IE6 and below */</div><div class=\"line\">* html #uno  &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE7 */</div><div class=\"line\">*:first-child+html #dos &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE7, FF, Saf, Opera  */</div><div class=\"line\">html&gt;body #tres &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE8, FF, Saf, Opera (Everything but IE 6,7) */</div><div class=\"line\">html&gt;/**/body #cuatro &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* Opera 9.27 and below, safari 2 */</div><div class=\"line\">html:first-child #cinco &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* Safari 2-3 */</div><div class=\"line\">html[xmlns*=&quot;&quot;] body:last-child #seis &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* safari 3+, chrome 1+, opera9+, ff 3.5+ */</div><div class=\"line\">body:nth-of-type(1) #siete &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* safari 3+, chrome 1+, opera9+, ff 3.5+ */</div><div class=\"line\">body:first-of-type #ocho &#123;  color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* saf3+, chrome1+ */</div><div class=\"line\">@media screen and (-webkit-min-device-pixel-ratio:0) &#123;</div><div class=\"line\"> #diez  &#123; color: red  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/* iPhone / mobile webkit */</div><div class=\"line\">@media screen and (max-device-width: 480px) &#123;</div><div class=\"line\"> #veintiseis &#123; color: red  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/* Safari 2 - 3.1 */</div><div class=\"line\">html[xmlns*=&quot;&quot;]:root #trece  &#123; color: red  &#125;</div><div class=\"line\"></div><div class=\"line\">/* Safari 2 - 3.1, Opera 9.25 */</div><div class=\"line\">*|html[xmlns*=&quot;&quot;] #catorce &#123; color: red  &#125;</div><div class=\"line\"></div><div class=\"line\">/* Everything but IE6-8 */</div><div class=\"line\">:root *&gt; #quince &#123; color: red  &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE7 */</div><div class=\"line\">*+html #dieciocho &#123;  color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* Firefox only. 1+ */</div><div class=\"line\">#veinticuatro,  x:-moz-any-link  &#123; color: red &#125;</div><div class=\"line\"></div><div class=\"line\">/* Firefox 3.0+ */</div><div class=\"line\">#veinticinco,  x:-moz-any-link, x:default  &#123; color: red  &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>属性hack：不同浏览器解析bug或方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* IE6 */</div><div class=\"line\">#once &#123; _color: blue &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE6, IE7 */</div><div class=\"line\">#doce &#123; *color: blue; /* or #color: blue */ &#125;</div><div class=\"line\"></div><div class=\"line\">/* Everything but IE6 */</div><div class=\"line\">#diecisiete &#123; color/**/: blue &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE6, IE7, IE8 */</div><div class=\"line\">#diecinueve &#123; color: blue\\9; &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE7, IE8 */</div><div class=\"line\">#veinte &#123; color/*\\**/: blue\\9; &#125;</div><div class=\"line\"></div><div class=\"line\">/* IE6, IE7 -- acts as an !important */</div><div class=\"line\">#veintesiete &#123; color: blue !ie; &#125; /* string after ! can be anything */</div></pre></td></tr></table></figure>\n<h3 id=\"specified-value-computed-value-used-value计算方法\"><a href=\"#specified-value-computed-value-used-value计算方法\" class=\"headerlink\" title=\"specified value,computed value,used value计算方法\"></a>specified value,computed value,used value计算方法</h3><ul>\n<li><p>specified value: 计算方法如下：</p>\n<ol>\n<li>如果样式表设置了一个值，使用这个值</li>\n<li>如果没有设置值，这个属性是继承属性，从父元素继承</li>\n<li>如果没设置，并且不是继承属性，使用css规范指定的初始值</li>\n</ol>\n</li>\n<li><p>computed value: 以specified value根据规范定义的行为进行计算，通常将相对值计算为绝对值，例如em根据font-size进行计算。一些使用百分数并且需要布局来决定最终值的属性，如width，margin。百分数就直接作为computed value。line-height的无单位值也直接作为computed value。这些值将在计算used value时得到绝对值。<strong>computed value的主要作用是用于继承</strong></p>\n</li>\n<li><p>used value：属性计算后的最终值，对于大多数属性可以通过window.getComputedStyle获得，尺寸值单位为像素。以下属性依赖于布局，</p>\n<ul>\n<li>background-position</li>\n<li>bottom, left, right, top</li>\n<li>height, width</li>\n<li>margin-bottom, margin-left, margin-right, margin-top</li>\n<li>min-height, min-width</li>\n<li>padding-bottom, padding-left, padding-right, padding-top</li>\n<li>text-indent</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"link与-import的区别\"><a href=\"#link与-import的区别\" class=\"headerlink\" title=\"link与@import的区别\"></a><code>link</code>与<code>@import</code>的区别</h3><ol>\n<li><code>link</code>是HTML方式， <code>@import</code>是CSS方式</li>\n<li><code>link</code>最大限度支持并行下载，<code>@import</code>过多嵌套导致串行下载，出现<a href=\"http://www.bluerobot.com/web/css/fouc.asp/\">FOUC</a></li>\n<li><code>link</code>可以通过<code>rel=&quot;alternate stylesheet&quot;</code>指定候选样式</li>\n<li>浏览器对<code>link</code>支持早于<code>@import</code>，可以使用<code>@import</code>对老浏览器隐藏样式</li>\n<li><code>@import</code>必须在样式规则之前，可以在css文件中引用其他文件</li>\n<li>总体来说：<strong><a href=\"http://www.stevesouders.com/blog/2009/04/09/dont-use-import/\">link优于@import</a></strong></li>\n</ol>\n<h3 id=\"display-block-和display-inline-的区别\"><a href=\"#display-block-和display-inline-的区别\" class=\"headerlink\" title=\"display: block;和display: inline;的区别\"></a><code>display: block;</code>和<code>display: inline;</code>的区别</h3><p><code>block</code>元素特点：</p>\n<p>1.处于常规流中时，如果<code>width</code>没有设置，会自动填充满父容器<br>2.可以应用<code>margin/padding</code><br>3.在没有设置高度的情况下会扩展高度以包含常规流中的子元素<br>4.处于常规流中时布局时在前后元素位置之间（独占一个水平空间）<br>5.忽略<code>vertical-align</code></p>\n<p><code>inline</code>元素特点</p>\n<p>1.水平方向上根据<code>direction</code>依次布局<br>2.不会在元素前后进行换行<br>3.受<code>white-space</code>控制<br>4.<code>margin/padding</code>在竖直方向上无效，水平方向上有效<br>5.<code>width/height</code>属性对非替换行内元素无效，宽度由元素内容决定<br>6.非替换行内元素的行框高由<code>line-height</code>确定，替换行内元素的行框高由<code>height</code>,<code>margin</code>,<code>padding</code>,<code>border</code>决定<br>6.浮动或绝对定位时会转换为<code>block</code><br>7.<code>vertical-align</code>属性生效</p>\n<h3 id=\"PNG-GIF-JPG的区别及如何选\"><a href=\"#PNG-GIF-JPG的区别及如何选\" class=\"headerlink\" title=\"PNG,GIF,JPG的区别及如何选\"></a>PNG,GIF,JPG的区别及如何选</h3><p>参考资料： <a href=\"http://www.yuiblog.com/blog/2008/11/04/imageopt-2/\">选择正确的图片格式</a><br><strong>GIF</strong>:</p>\n<ol>\n<li>8位像素，256色</li>\n<li>无损压缩</li>\n<li>支持简单动画</li>\n<li>支持boolean透明</li>\n<li>适合简单动画</li>\n</ol>\n<p><strong>JPEG</strong>：</p>\n<ol>\n<li>颜色限于256</li>\n<li>有损压缩</li>\n<li>可控制压缩质量</li>\n<li>不支持透明</li>\n<li>适合照片</li>\n</ol>\n<p><strong>PNG</strong>：</p>\n<ol>\n<li>有PNG8和truecolor PNG</li>\n<li>PNG8类似GIF颜色上限为256，文件小，支持alpha透明度，无动画</li>\n<li>适合图标、背景、按钮</li>\n</ol>\n<h3 id=\"CSS有哪些继承属性\"><a href=\"#CSS有哪些继承属性\" class=\"headerlink\" title=\"CSS有哪些继承属性\"></a>CSS有哪些继承属性</h3><ul>\n<li>关于文字排版的属性如：<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font\">font</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/word-break\">word-break</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing\">letter-spacing</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-align\">text-align</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering\">text-rendering</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/word-spacing\">word-spacing</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/white-space\">white-space</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent\">text-indent</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform\">text-transform</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow\">text-shadow</a></li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\">line-height</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color\">color</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/visibility\">visibility</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\">cursor</a></li>\n</ul>\n<h3 id=\"IE6浏览器有哪些常见的bug-缺陷或者与标准不一致的地方-如何解决\"><a href=\"#IE6浏览器有哪些常见的bug-缺陷或者与标准不一致的地方-如何解决\" class=\"headerlink\" title=\"IE6浏览器有哪些常见的bug,缺陷或者与标准不一致的地方,如何解决\"></a>IE6浏览器有哪些常见的bug,缺陷或者与标准不一致的地方,如何解决</h3><ul>\n<li>IE6不支持min-height，解决办法使用css hack：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.target &#123;</div><div class=\"line\">    min-height: 100px;</div><div class=\"line\">    height: auto !important;</div><div class=\"line\">    height: 100px;   // IE6下内容高度超过会自动扩展高度</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>ol</code>内<code>li</code>的序号全为1，不递增。解决方法：为li设置样式<code>display: list-item;</code></p>\n</li>\n<li><p>未定位父元素<code>overflow: auto;</code>，包含<code>position: relative;</code>子元素，子元素高于父元素时会溢出。解决办法：1）子元素去掉<code>position: relative;</code>; 2）不能为子元素去掉定位时，父元素<code>position: relative;</code></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</div><div class=\"line\">.outer &#123;</div><div class=\"line\">    width: 215px;</div><div class=\"line\">    height: 100px;</div><div class=\"line\">    border: 1px solid red;</div><div class=\"line\">    overflow: auto;</div><div class=\"line\">    position: relative;  /* 修复bug */</div><div class=\"line\">&#125;</div><div class=\"line\">.inner &#123;</div><div class=\"line\">    width: 100px;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">    background-color: purple;</div><div class=\"line\">    position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;outer&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>IE6只支持<code>a</code>标签的<code>:hover</code>伪类，解决方法：使用js为元素监听mouseenter，mouseleave事件，添加类实现效果：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</div><div class=\"line\">.p:hover,</div><div class=\"line\">.hover &#123;</div><div class=\"line\">    background: purple;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;p class=&quot;p&quot; id=&quot;target&quot;&gt;aaaa bbbbb&lt;span&gt;DDDDDDDDDDDd&lt;/span&gt; aaaa lkjlkjdf j&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">function addClass(elem, cls) &#123;</div><div class=\"line\">    if (elem.className) &#123;</div><div class=\"line\">        elem.className += &apos; &apos; + cls;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        elem.className = cls;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">function removeClass(elem, cls) &#123;</div><div class=\"line\">    var className = &apos; &apos; + elem.className + &apos; &apos;;</div><div class=\"line\">    var reg = new RegExp(&apos; +&apos; + cls + &apos; +&apos;, &apos;g&apos;);</div><div class=\"line\">    elem.className = className.replace(reg, &apos; &apos;).replace(/^ +| +$/, &apos;&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var target = document.getElementById(&apos;target&apos;);</div><div class=\"line\">if (target.attachEvent) &#123;</div><div class=\"line\">    target.attachEvent(&apos;onmouseenter&apos;, function () &#123;</div><div class=\"line\">        addClass(target, &apos;hover&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    target.attachEvent(&apos;onmouseleave&apos;, function () &#123;</div><div class=\"line\">        removeClass(target, &apos;hover&apos;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>IE5-8不支持<code>opacity</code>，解决办法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.opacity &#123;</div><div class=\"line\">    opacity: 0.4</div><div class=\"line\">    filter: alpha(opacity=60); /* for IE5-7 */</div><div class=\"line\">    -ms-filter: &quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=60)&quot;; /* for IE 8*/</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>IE6在设置<code>height</code>小于<code>font-size</code>时高度值为<code>font-size</code>，解决办法：<code>font-size: 0;</code></li>\n<li>IE6不支持PNG透明背景，解决办法: <strong>IE6下使用gif图片</strong></li>\n<li>IE6-7不支持<code>display: inline-block</code>解决办法：设置inline并触发hasLayout</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">display: inline-block;</div><div class=\"line\">*display: inline;</div><div class=\"line\">*zoom: 1;</div></pre></td></tr></table></figure>\n<ul>\n<li>IE6下浮动元素在浮动方向上与父元素边界接触元素的外边距会加倍。解决办法：<br>1）使用padding控制间距。<br>2）浮动元素<code>display: inline;</code>这样解决问题且无任何副作用：css标准规定浮动元素display:inline会自动调整为block</li>\n<li>通过为块级元素设置宽度和左右margin为auto时，IE6不能实现水平居中，解决方法：为父元素设置<code>text-align: center;</code></li>\n</ul>\n<h3 id=\"容器包含若干浮动元素时如何清理-包含-浮动\"><a href=\"#容器包含若干浮动元素时如何清理-包含-浮动\" class=\"headerlink\" title=\"容器包含若干浮动元素时如何清理(包含)浮动\"></a>容器包含若干浮动元素时如何清理(包含)浮动</h3><ol>\n<li>容器元素闭合标签前添加额外元素并设置<code>clear: both</code></li>\n<li>父元素触发块级格式化上下文(见块级可视化上下文部分)</li>\n<li>设置容器元素伪元素进行清理<a href=\"http://nicolasgallagher.com/micro-clearfix-hack/\">推荐的清理浮动方法</a></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* 在标准浏览器下使用</div><div class=\"line\">* 1 content内容为空格用于修复opera下文档中出现</div><div class=\"line\">*   contenteditable属性时在清理浮动元素上下的空白</div><div class=\"line\">* 2 使用display使用table而不是block：可以防止容器和</div><div class=\"line\">*   子元素top-margin折叠,这样能使清理效果与BFC，IE6/7</div><div class=\"line\">*   zoom: 1;一致</div><div class=\"line\">**/</div><div class=\"line\"></div><div class=\"line\">.clearfix:before,</div><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">    content: &quot; &quot;; /* 1 */</div><div class=\"line\">    display: table; /* 2 */</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">    clear: both;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">* IE 6/7下使用</div><div class=\"line\">* 通过触发hasLayout实现包含浮动</div><div class=\"line\">**/</div><div class=\"line\">.clearfix &#123;</div><div class=\"line\">    *zoom: 1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"什么是FOUC-如何避免\"><a href=\"#什么是FOUC-如何避免\" class=\"headerlink\" title=\"什么是FOUC?如何避免\"></a>什么是FOUC?如何避免</h3><p>Flash Of Unstyled Content：用户定义样式表加载之前浏览器使用默认样式显示文档，用户样式加载渲染之后再从新显示文档，造成页面闪烁。<strong>解决方法</strong>：把样式表放到文档的<code>head</code></p>\n<h3 id=\"如何创建块级格式化上下文-block-formatting-context-BFC有什么用\"><a href=\"#如何创建块级格式化上下文-block-formatting-context-BFC有什么用\" class=\"headerlink\" title=\"如何创建块级格式化上下文(block formatting context),BFC有什么用\"></a>如何创建块级格式化上下文(block formatting context),BFC有什么用</h3><p>创建规则：</p>\n<ol>\n<li>根元素</li>\n<li>浮动元素（<code>float</code>不是<code>none</code>）</li>\n<li>绝对定位元素（<code>position</code>取值为<code>absolute</code>或<code>fixed</code>）</li>\n<li><code>display</code>取值为<code>inline-block</code>,<code>table-cell</code>, <code>table-caption</code>,<code>flex</code>, <code>inline-flex</code>之一的元素</li>\n<li><code>overflow</code>不是<code>visible</code>的元素</li>\n</ol>\n<p>作用：</p>\n<ol>\n<li>可以包含浮动元素</li>\n<li>不被浮动元素覆盖</li>\n<li>阻止父子元素的margin折叠</li>\n</ol>\n<h3 id=\"display-float-position的关系\"><a href=\"#display-float-position的关系\" class=\"headerlink\" title=\"display,float,position的关系\"></a>display,float,position的关系</h3><ol>\n<li>如果<code>display</code>为none，那么position和float都不起作用，这种情况下元素不产生框</li>\n<li>否则，如果position值为absolute或者fixed，框就是绝对定位的，float的计算值为none，display根据下面的表格进行调整。</li>\n<li>否则，如果float不是none，框是浮动的，display根据下表进行调整</li>\n<li>否则，如果元素是根元素，display根据下表进行调整</li>\n<li>其他情况下display的值为指定值<br>总结起来：<strong>绝对定位、浮动、根元素都需要调整<code>display</code></strong><br><img src=\"http://7xsspr.com2.z0.glb.clouddn.com/display-adjust.png\" alt=\"display转换规则\"></li>\n</ol>\n<h3 id=\"外边距折叠-collapsing-margins\"><a href=\"#外边距折叠-collapsing-margins\" class=\"headerlink\" title=\"外边距折叠(collapsing margins)\"></a>外边距折叠(collapsing margins)</h3><p>毗邻的两个或多个<code>margin</code>会合并成一个margin，叫做外边距折叠。规则如下：</p>\n<ol>\n<li>两个或多个毗邻的普通流中的块元素垂直方向上的margin会折叠</li>\n<li>浮动元素/inline-block元素/绝对定位元素的margin不会和垂直方向上的其他元素的margin折叠</li>\n<li>创建了块级格式化上下文的元素，不会和它的子元素发生margin折叠</li>\n<li>元素自身的margin-bottom和margin-top相邻时也会折叠</li>\n</ol>\n<h3 id=\"如何确定一个元素的包含块-containing-block\"><a href=\"#如何确定一个元素的包含块-containing-block\" class=\"headerlink\" title=\"如何确定一个元素的包含块(containing block)\"></a>如何确定一个元素的包含块(containing block)</h3><ol>\n<li>根元素的包含块叫做初始包含块，在连续媒体中他的尺寸与viewport相同并且anchored at the canvas origin；对于paged media，它的尺寸等于page area。初始包含块的direction属性与根元素相同。</li>\n<li><code>position</code>为<code>relative</code>或者<code>static</code>的元素，它的包含块由最近的块级（<code>display</code>为<code>block</code>,<code>list-item</code>, <code>table</code>）祖先元素的<strong>内容框</strong>组成</li>\n<li>如果元素<code>position</code>为<code>fixed</code>。对于连续媒体，它的包含块为viewport；对于paged media，包含块为page area</li>\n<li><p>如果元素<code>position</code>为<code>absolute</code>，它的包含块由祖先元素中最近一个<code>position</code>为<code>relative</code>,<code>absolute</code>或者<code>fixed</code>的元素产生，规则如下：</p>\n<ul>\n<li>如果祖先元素为行内元素，the containing block is the bounding box around the <strong>padding boxes</strong> of the first and the last inline boxes generated for that element.</li>\n<li><p>其他情况下包含块由祖先节点的<strong>padding edge</strong>组成</p>\n<p>如果找不到定位的祖先元素，包含块为<strong>初始包含块</strong></p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"stacking-context-布局规则\"><a href=\"#stacking-context-布局规则\" class=\"headerlink\" title=\"stacking context,布局规则\"></a>stacking context,布局规则</h3><p>z轴上的默认层叠顺序如下（从下到上）：</p>\n<ol>\n<li>根元素的边界和背景</li>\n<li>常规流中的元素按照html中顺序</li>\n<li>浮动块</li>\n<li>positioned元素按照html中出现顺序</li>\n</ol>\n<p>如何创建stacking context：</p>\n<ol>\n<li>根元素</li>\n<li>z-index不为auto的定位元素</li>\n<li>a flex item with a z-index value other than ‘auto’</li>\n<li>opacity小于1的元素</li>\n<li>在移动端webkit和chrome22+，z-index为auto，position: fixed也将创建新的stacking context</li>\n</ol>\n<h3 id=\"如何水平居中一个元素\"><a href=\"#如何水平居中一个元素\" class=\"headerlink\" title=\"如何水平居中一个元素\"></a>如何水平居中一个元素</h3><ul>\n<li>如果需要居中的元素为<strong>常规流中inline元素</strong>，为父元素设置<code>text-align: center;</code>即可实现</li>\n<li>如果需要居中的元素为<strong>常规流中block元素</strong>，1）为元素设置宽度，2）设置左右margin为auto。3）IE6下需在父元素上设置<code>text-align: center;</code>,再给子元素恢复需要的值</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div class=&quot;content&quot;&gt;</div><div class=\"line\">    aaaaaa aaaaaa a a a a a a a a</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body &#123;</div><div class=\"line\">        background: #DDD;</div><div class=\"line\">        text-align: center; /* 3 */</div><div class=\"line\">    &#125;</div><div class=\"line\">    .content &#123;</div><div class=\"line\">        width: 500px;      /* 1 */</div><div class=\"line\">        text-align: left;  /* 3 */</div><div class=\"line\">        margin: 0 auto;    /* 2 */</div><div class=\"line\"></div><div class=\"line\">        background: purple;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>如果需要居中的元素为<strong>浮动元素</strong>，1）为元素设置宽度，2）<code>position: relative;</code>，3）浮动方向偏移量（left或者right）设置为50%，4）浮动方向上的margin设置为元素宽度一半乘以-1</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div class=&quot;content&quot;&gt;</div><div class=\"line\">    aaaaaa aaaaaa a a a a a a a a</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body &#123;</div><div class=\"line\">        background: #DDD;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .content &#123;</div><div class=\"line\">        width: 500px;         /* 1 */</div><div class=\"line\">        float: left;</div><div class=\"line\"></div><div class=\"line\">        position: relative;   /* 2 */</div><div class=\"line\">        left: 50%;            /* 3 */</div><div class=\"line\">        margin-left: -250px;  /* 4 */</div><div class=\"line\"></div><div class=\"line\">        background-color: purple;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>如果需要居中的元素为<strong>绝对定位元素</strong>，1）为元素设置宽度，2）偏移量设置为50%，3）偏移方向外边距设置为元素宽度一半乘以-1</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div class=&quot;content&quot;&gt;</div><div class=\"line\">    aaaaaa aaaaaa a a a a a a a a</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body &#123;</div><div class=\"line\">        background: #DDD;</div><div class=\"line\">        position: relative;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .content &#123;</div><div class=\"line\">        width: 800px;</div><div class=\"line\"></div><div class=\"line\">        position: absolute;</div><div class=\"line\">        left: 50%;</div><div class=\"line\">        margin-left: -400px;</div><div class=\"line\"></div><div class=\"line\">        background-color: purple;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>如果需要居中的元素为<strong>绝对定位元素</strong>，1）为元素设置宽度，2）设置左右偏移量都为0,3）设置左右外边距都为auto</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div class=&quot;content&quot;&gt;</div><div class=\"line\">    aaaaaa aaaaaa a a a a a a a a</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    body &#123;</div><div class=\"line\">        background: #DDD;</div><div class=\"line\">        position: relative;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .content &#123;</div><div class=\"line\">        width: 800px;</div><div class=\"line\"></div><div class=\"line\">        position: absolute;</div><div class=\"line\">        margin: 0 auto;</div><div class=\"line\">        left: 0;</div><div class=\"line\">        right: 0;</div><div class=\"line\"></div><div class=\"line\">        background-color: purple;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"如何竖直居中一个元素\"><a href=\"#如何竖直居中一个元素\" class=\"headerlink\" title=\"如何竖直居中一个元素\"></a>如何竖直居中一个元素</h3><p>参考资料：<a href=\"http://www.vanseodesign.com/css/vertical-centering/\">6 Methods For Vertical Centering With CSS</a>。 <a href=\"http://blog.csdn.net/freshlover/article/details/11579669\">盘点8种CSS实现垂直居中</a></p>\n<ul>\n<li>需要居中元素为<strong>单行文本</strong>，为包含文本的元素设置大于<code>font-size</code>的<code>line-height</code>：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p class=&quot;text&quot;&gt;center text&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.text &#123;</div><div class=\"line\">    line-height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"javascript概念部分\"><a href=\"#javascript概念部分\" class=\"headerlink\" title=\"$javascript概念部分\"></a>$javascript概念部分</h2><h3 id=\"DOM元素e的e-getAttribute-propName-和e-propName有什么区别和联系\"><a href=\"#DOM元素e的e-getAttribute-propName-和e-propName有什么区别和联系\" class=\"headerlink\" title=\"DOM元素e的e.getAttribute(propName)和e.propName有什么区别和联系\"></a>DOM元素e的e.getAttribute(propName)和e.propName有什么区别和联系</h3><ul>\n<li>e.getAttribute()，是标准DOM操作文档元素属性的方法，具有通用性可在任意文档上使用，返回元素在源文件中<strong>设置的属性</strong></li>\n<li>e.propName通常是在HTML文档中访问特定元素的<strong>特性</strong>，浏览器解析元素后生成对应对象（如a标签生成HTMLAnchorElement），这些对象的特性会根据特定规则结合属性设置得到，对于没有对应特性的属性，只能使用getAttribute进行访问</li>\n<li>e.getAttribute()返回值是源文件中设置的值，类型是字符串或者null（有的实现返回””）</li>\n<li>e.propName返回值可能是字符串、布尔值、对象、undefined等</li>\n<li>大部分attribute与property是一一对应关系，修改其中一个会影响另一个，如id，title等属性</li>\n<li>一些布尔属性<code>&lt;input hidden/&gt;</code>的检测设置需要hasAttribute和removeAttribute来完成，或者设置对应property</li>\n<li>像<code>&lt;a href=&quot;../index.html&quot;&gt;link&lt;/a&gt;</code>中href属性，转换成property的时候需要通过转换得到完整URL</li>\n<li>一些attribute和property不是一一对应如：form控件中<code>&lt;input value=&quot;hello&quot;/&gt;</code>对应的是defaultValue，修改或设置value property修改的是控件当前值，setAttribute修改value属性不会改变value property</li>\n</ul>\n<h3 id=\"offsetWidth-offsetHeight-clientWidth-clientHeight与scrollWidth-scrollHeight的区别\"><a href=\"#offsetWidth-offsetHeight-clientWidth-clientHeight与scrollWidth-scrollHeight的区别\" class=\"headerlink\" title=\"offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别\"></a>offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别</h3><ul>\n<li>offsetWidth/offsetHeight返回值包含<strong>content + padding + border</strong>，效果与e.getBoundingClientRect()相同</li>\n<li>clientWidth/clientHeight返回值只包含<strong>content + padding</strong>，如果有滚动条，也<strong>不包含滚动条</strong></li>\n<li>scrollWidth/scrollHeight返回值包含<strong>content + padding + 溢出内容的尺寸</strong></li>\n</ul>\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ie/hh781509(v=vs.85\">Measuring Element Dimension and Location with CSSOM in Windows Internet Explorer 9</a>.aspx)</p>\n<p><img src=\"http://7xsspr.com2.z0.glb.clouddn.com/element-size.png\" alt=\"元素尺寸\"></p>\n<h3 id=\"XMLHttpRequest通用属性和方法\"><a href=\"#XMLHttpRequest通用属性和方法\" class=\"headerlink\" title=\"XMLHttpRequest通用属性和方法\"></a>XMLHttpRequest通用属性和方法</h3><ol>\n<li><code>readyState</code>:表示请求状态的整数，取值：<ul>\n<li>UNSENT（0）：对象已创建</li>\n<li>OPENED（1）：open()成功调用，在这个状态下，可以为xhr设置请求头，或者使用send()发送请求</li>\n<li>HEADERS_RECEIVED(2)：所有重定向已经自动完成访问，并且最终响应的HTTP头已经收到</li>\n<li>LOADING(3)：响应体正在接收</li>\n<li>DONE(4)：数据传输完成或者传输产生错误</li>\n</ul>\n</li>\n<li><code>onreadystatechange</code>：readyState改变时调用的函数</li>\n<li><code>status</code>：服务器返回的HTTP状态码（如，200， 404）</li>\n<li><code>statusText</code>:服务器返回的HTTP状态信息（如，OK，No Content）</li>\n<li><code>responseText</code>:作为字符串形式的来自服务器的完整响应</li>\n<li><code>responseXML</code>: Document对象，表示服务器的响应解析成的XML文档</li>\n<li><code>abort()</code>:取消异步HTTP请求</li>\n<li><code>getAllResponseHeaders()</code>: 返回一个字符串，包含响应中服务器发送的全部HTTP报头。每个报头都是一个用冒号分隔开的名/值对，并且使用一个回车/换行来分隔报头行</li>\n<li><code>getResponseHeader(headerName)</code>:返回headName对应的报头值</li>\n<li><code>open(method, url, asynchronous [, user, password])</code>:初始化准备发送到服务器上的请求。method是HTTP方法，不区分大小写；url是请求发送的相对或绝对URL；asynchronous表示请求是否异步；user和password提供身份验证</li>\n<li><code>setRequestHeader(name, value)</code>:设置HTTP报头</li>\n<li><code>send(body)</code>:对服务器请求进行初始化。参数body包含请求的主体部分，对于POST请求为键值对字符串；对于GET请求，为null</li>\n</ol>\n<h3 id=\"focus-blur与focusin-focusout的区别与联系\"><a href=\"#focus-blur与focusin-focusout的区别与联系\" class=\"headerlink\" title=\"focus/blur与focusin/focusout的区别与联系\"></a>focus/blur与focusin/focusout的区别与联系</h3><ol>\n<li>focus/blur不冒泡，focusin/focusout冒泡</li>\n<li>focus/blur兼容性好，focusin/focusout在除FireFox外的浏览器下都保持良好兼容性，如需使用事件托管，可考虑在FireFox下使用事件捕获elem.addEventListener(‘focus’, handler, true)</li>\n<li>可获得焦点的元素：<ol>\n<li>window</li>\n<li>链接被点击或键盘操作</li>\n<li>表单空间被点击或键盘操作</li>\n<li>设置<code>tabindex</code>属性的元素被点击或键盘操作</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"mouseover-mouseout与mouseenter-mouseleave的区别与联系\"><a href=\"#mouseover-mouseout与mouseenter-mouseleave的区别与联系\" class=\"headerlink\" title=\"mouseover/mouseout与mouseenter/mouseleave的区别与联系\"></a>mouseover/mouseout与mouseenter/mouseleave的区别与联系</h3><ol>\n<li>mouseover/mouseout是标准事件，<strong>所有浏览器都支持</strong>；mouseenter/mouseleave是IE5.5引入的特有事件后来被DOM3标准采纳，现代标准浏览器也支持</li>\n<li>mouseover/mouseout是<strong>冒泡</strong>事件；mouseenter/mouseleave<strong>不冒泡</strong>。需要为<strong>多个元素监听鼠标移入/出事件时，推荐mouseover/mouseout托管，提高性能</strong></li>\n<li>标准事件模型中event.target表示发生移入/出的元素,<strong>vent.relatedTarget</strong>对应移出/如元素；在老IE中event.srcElement表示发生移入/出的元素，<strong>event.toElement</strong>表示移出的目标元素，<strong>event.fromElement</strong>表示移入时的来源元素</li>\n</ol>\n<p>例子：鼠标从div#target元素移出时进行处理，判断逻辑如下：</p>\n<pre><code>&lt;div id=&quot;target&quot;&gt;&lt;span&gt;test&lt;/span&gt;&lt;/div&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar target = document.getElementById(&apos;target&apos;);\nif (target.addEventListener) {\n  target.addEventListener(&apos;mouseout&apos;, mouseoutHandler, false);\n} else if (target.attachEvent) {\n  target.attachEvent(&apos;onmouseout&apos;, mouseoutHandler);\n}\n\nfunction mouseoutHandler(e) {\n  e = e || window.event;\n  var target = e.target || e.srcElement;\n\n  // 判断移出鼠标的元素是否为目标元素\n  if (target.id !== &apos;target&apos;) {\n    return;\n  }\n\n  // 判断鼠标是移出元素还是移到子元素\n  var relatedTarget = event.relatedTarget || e.toElement;\n  while (relatedTarget !== target\n    &amp;&amp; relatedTarget.nodeName.toUpperCase() !== &apos;BODY&apos;) {\n    relatedTarget = relatedTarget.parentNode;\n  }\n\n  // 如果相等，说明鼠标在元素内部移动\n  if (relatedTarget === target) {\n    return;\n  }\n\n  // 执行需要操作\n  //alert(&apos;鼠标移出&apos;);\n\n}\n&lt;/script&gt;\n</code></pre><h3 id=\"sessionStorage-localStorage-cookie区别\"><a href=\"#sessionStorage-localStorage-cookie区别\" class=\"headerlink\" title=\"sessionStorage,localStorage,cookie区别\"></a>sessionStorage,localStorage,cookie区别</h3><ol>\n<li>都会在浏览器端保存，有大小限制，同源限制</li>\n<li>cookie会在请求时发送到服务器，作为会话标识，服务器可修改cookie；web storage不会发送到服务器</li>\n<li>cookie有path概念，子路径可以访问父路径cookie，父路径不能访问子路径cookie</li>\n<li>有效期：cookie在设置的有效期内有效，默认为浏览器关闭；sessionStorage在窗口关闭前有效，localStorage长期有效，直到用户删除</li>\n<li>共享：sessionStorage不能共享，localStorage在同源文档之间共享，cookie在同源且符合path规则的文档之间共享</li>\n<li>localStorage的修改会促发其他文档窗口的update事件</li>\n<li>cookie有secure属性要求HTTPS传输</li>\n<li>浏览器不能保存超过300个cookie，单个服务器不能超过20个，每个cookie不能超过4k。web storage大小支持能达到5M</li>\n</ol>\n<h3 id=\"javascript跨域通信\"><a href=\"#javascript跨域通信\" class=\"headerlink\" title=\"javascript跨域通信\"></a>javascript跨域通信</h3><p>同源：两个文档同源需满足</p>\n<ol>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口相同</li>\n</ol>\n<p>跨域通信：js进行DOM操作、通信时如果目标与当前窗口不满足同源条件，浏览器为了安全会阻止跨域操作。跨域通信通常有以下方法</p>\n<ul>\n<li>如果是log之类的简单<strong>单项通信</strong>，新建<code>&lt;img&gt;</code>,<code>&lt;script&gt;</code>,<code>&lt;link&gt;</code>,<code>&lt;iframe&gt;</code>元素，通过src，href属性设置为目标url。实现跨域请求</li>\n<li>如果请求<strong>json数据</strong>，使用<code>&lt;script&gt;</code>进行jsonp请求</li>\n<li>现代浏览器中<strong>多窗口通信</strong>使用HTML5规范的targetWindow.postMessage(data, origin);其中data是需要发送的对象，origin是目标窗口的origin。window.addEventListener(‘message’, handler, false);handler的event.data是postMessage发送来的数据，event.origin是发送窗口的origin，event.source是发送消息的窗口引用</li>\n<li>内部服务器代理请求跨域url，然后返回数据</li>\n<li>跨域请求数据，现代浏览器可使用HTML5规范的CORS功能，只要目标服务器返回HTTP头部<strong><code>Access-Control-Allow-Origin: *</code></strong>即可像普通ajax一样访问跨域资源</li>\n</ul>\n<h3 id=\"javascript有哪几种数据类型\"><a href=\"#javascript有哪几种数据类型\" class=\"headerlink\" title=\"javascript有哪几种数据类型\"></a>javascript有哪几种数据类型</h3><p>六种基本数据类型</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>string</li>\n<li>boolean</li>\n<li>number</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Symbol\">symbol</a>(ES6)</li>\n</ul>\n<p>一种引用类型</p>\n<ul>\n<li>Object</li>\n</ul>\n<h3 id=\"什么闭包-闭包有什么用\"><a href=\"#什么闭包-闭包有什么用\" class=\"headerlink\" title=\"什么闭包,闭包有什么用\"></a>什么闭包,闭包有什么用</h3><p><strong>闭包是在某个作用域内定义的函数，它可以访问这个作用域内的所有变量</strong>。闭包作用域链通常包括三个部分：</p>\n<ol>\n<li>函数本身作用域。</li>\n<li>闭包定义时的作用域。</li>\n<li>全局作用域。</li>\n</ol>\n<p>闭包常见用途：</p>\n<ol>\n<li>创建特权方法用于访问控制</li>\n<li>事件处理程序及回调</li>\n</ol>\n<h3 id=\"javascript有哪几种方法定义函数\"><a href=\"#javascript有哪几种方法定义函数\" class=\"headerlink\" title=\"javascript有哪几种方法定义函数\"></a>javascript有哪几种方法定义函数</h3><ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">函数声明表达式</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function操作符</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function 构造函数</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions\">ES6:arrow function</a></li>\n</ol>\n<p>重要参考资料：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\">MDN:Functions_and_function_scope</a></p>\n<h3 id=\"应用程序存储和离线web应用\"><a href=\"#应用程序存储和离线web应用\" class=\"headerlink\" title=\"应用程序存储和离线web应用\"></a>应用程序存储和离线web应用</h3><p>HTML5新增应用程序缓存，允许web应用将应用程序自身保存到用户浏览器中，用户离线状态也能访问。<br>1.为html元素设置manifest属性:<code>&lt;html manifest=&quot;myapp.appcache&quot;&gt;</code>，其中后缀名只是一个约定，真正识别方式是通过<code>text/cache-manifest</code>作为MIME类型。所以需要配置服务器保证设置正确<br>2.manifest文件首行为<code>CACHE MANIFEST</code>，其余就是要缓存的URL列表，每个一行，相对路径都相对于manifest文件的url。注释以#开头<br>3.url分为三种类型：<code>CACHE</code>:为默认类型。<code>NETWORK</code>：表示资源从不缓存。 <code>FALLBACK</code>:每行包含两个url，第二个URL是指需要加载和存储在缓存中的资源， 第一个URL是一个前缀。任何匹配该前缀的URL都不会缓存，如果从网络中载入这样的URL失败的话，就会用第二个URL指定的缓存资源来替代。以下是一个文件例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">CACHE MANIFEST</div><div class=\"line\"></div><div class=\"line\">CACHE:</div><div class=\"line\">myapp.html</div><div class=\"line\">myapp.css</div><div class=\"line\">myapp.js</div><div class=\"line\"></div><div class=\"line\">FALLBACK:</div><div class=\"line\">videos/ offline_help.html</div><div class=\"line\"></div><div class=\"line\">NETWORK:</div><div class=\"line\">cgi/</div></pre></td></tr></table></figure>\n<h3 id=\"客户端存储localStorage和sessionStorage\"><a href=\"#客户端存储localStorage和sessionStorage\" class=\"headerlink\" title=\"客户端存储localStorage和sessionStorage\"></a>客户端存储localStorage和sessionStorage</h3><ul>\n<li>localStorage有效期为永久，sessionStorage有效期为顶层窗口关闭前</li>\n<li>同源文档可以读取并修改localStorage数据，sessionStorage只允许同一个窗口下的文档访问，如通过iframe引入的同源文档。</li>\n<li>Storage对象通常被当做普通javascript对象使用：<strong>通过设置属性来存取字符串值</strong>，也可以通过<strong>setItem(key, value)设置</strong>，<strong>getItem(key)读取</strong>，<strong>removeItem(key)删除</strong>，<strong>clear()删除所有数据</strong>，<strong>length表示已存储的数据项数目</strong>，<strong>key(index)返回对应索引的key</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">localStorage.setItem(&apos;x&apos;, 1); // storge x-&gt;1</div><div class=\"line\">localStorage.getItem(&apos;x); // return value of x</div><div class=\"line\"></div><div class=\"line\">// 枚举所有存储的键值对</div><div class=\"line\">for (var i = 0, len = localStorage.length; i &lt; len; ++i ) &#123;</div><div class=\"line\">    var name = localStorage.key(i);</div><div class=\"line\">    var value = localStorage.getItem(name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">localStorage.removeItem(&apos;x&apos;); // remove x</div><div class=\"line\">localStorage.clear();  // remove all data</div></pre></td></tr></table></figure>\n<h3 id=\"cookie及其操作\"><a href=\"#cookie及其操作\" class=\"headerlink\" title=\"cookie及其操作\"></a>cookie及其操作</h3><ul>\n<li>cookie是web浏览器存储的少量数据，最早设计为服务器端使用，作为HTTP协议的扩展实现。cookie数据会自动在浏览器和服务器之间传输。</li>\n<li>通过读写cookie检测是否支持</li>\n<li>cookie属性有<strong>名</strong>，<strong>值</strong>，<strong>max-age</strong>，<strong>path</strong>, <strong>domain</strong>，<strong>secure</strong>；</li>\n<li>cookie默认有效期为浏览器会话，一旦用户关闭浏览器，数据就丢失，通过设置<strong>max-age=seconds</strong>属性告诉浏览器cookie有效期</li>\n<li>cookie作用域通过<strong>文档源</strong>和<strong>文档路径</strong>来确定，通过<strong>path</strong>和<strong>domain</strong>进行配置，web页面同目录或子目录文档都可访问</li>\n<li>通过cookie保存数据的方法为：为document.cookie设置一个符合目标的字符串如下</li>\n<li>读取document.cookie获得’; ‘分隔的字符串，key=value,解析得到结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.cookie = &apos;name=qiu; max-age=9999; path=/; domain=domain; secure&apos;;</div><div class=\"line\"></div><div class=\"line\">document.cookie = &apos;name=aaa; path=/; domain=domain; secure&apos;;</div><div class=\"line\">// 要改变cookie的值，需要使用相同的名字、路径和域，新的值</div><div class=\"line\">// 来设置cookie，同样的方法可以用来改变有效期</div><div class=\"line\"></div><div class=\"line\">// 设置max-age为0可以删除指定cookie</div><div class=\"line\"></div><div class=\"line\">//读取cookie，访问document.cookie返回键值对组成的字符串，</div><div class=\"line\">//不同键值对之间用&apos;; &apos;分隔。通过解析获得需要的值</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/qiu-deqing/google/blob/master/module/js/cookieUtil.js\">cookieUtil.js</a>：自己写的cookie操作工具</p>\n<h3 id=\"javascript有哪些方法定义对象\"><a href=\"#javascript有哪些方法定义对象\" class=\"headerlink\" title=\"javascript有哪些方法定义对象\"></a>javascript有哪些方法定义对象</h3><ol>\n<li>对象字面量： <code>var obj = {};</code></li>\n<li>构造函数： <code>var obj = new Object();</code></li>\n<li>Object.create(): <code>var obj = Object.create(Object.prototype);</code></li>\n</ol>\n<h3 id=\"运算符判断相等的流程是怎样的\"><a href=\"#运算符判断相等的流程是怎样的\" class=\"headerlink\" title=\"===运算符判断相等的流程是怎样的\"></a>===运算符判断相等的流程是怎样的</h3><ol>\n<li>如果两个值不是相同类型，它们不相等</li>\n<li>如果两个值都是null或者都是undefined，它们相等</li>\n<li>如果两个值都是布尔类型true或者都是false，它们相等</li>\n<li>如果其中有一个是<strong>NaN</strong>，它们不相等</li>\n<li>如果都是数值型并且数值相等，他们相等， -0等于0</li>\n<li>如果他们都是字符串并且在相同位置包含相同的16位值，他它们相等；如果在长度或者内容上不等，它们不相等；两个字符串显示结果相同但是编码不同==和===都认为他们不相等</li>\n<li>如果他们指向相同对象、数组、函数，它们相等；如果指向不同对象，他们不相等</li>\n</ol>\n<h3 id=\"运算符判断相等的流程是怎样的-1\"><a href=\"#运算符判断相等的流程是怎样的-1\" class=\"headerlink\" title=\"==运算符判断相等的流程是怎样的\"></a>==运算符判断相等的流程是怎样的</h3><ol>\n<li>如果两个值类型相同，按照===比较方法进行比较</li>\n<li>如果类型不同，使用如下规则进行比较<ol>\n<li>如果其中一个值是null，另一个是undefined，它们相等</li>\n<li>如果一个值是<strong>数字</strong>另一个是<strong>字符串</strong>，将<strong>字符串转换为数字</strong>进行比较</li>\n<li>如果有布尔类型，将<strong>true转换为1，false转换为0</strong>，然后用==规则继续比较</li>\n<li>如果一个值是对象，另一个是数字或字符串，将对象转换为原始值然后用==规则继续比较</li>\n<li><strong>其他所有情况都认为不相等</strong></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"对象到字符串的转换步骤\"><a href=\"#对象到字符串的转换步骤\" class=\"headerlink\" title=\"对象到字符串的转换步骤\"></a>对象到字符串的转换步骤</h3><ol>\n<li>如果对象有toString()方法，javascript调用它。如果返回一个原始值（primitive value如：string number boolean）,将这个值转换为字符串作为结果</li>\n<li>如果对象没有toString()方法或者返回值不是原始值，javascript寻找对象的valueOf()方法，如果存在就调用它，返回结果是原始值则转为字符串作为结果</li>\n<li>否则，javascript不能从toString()或者valueOf()获得一个原始值，此时throws a TypeError</li>\n</ol>\n<h3 id=\"对象到数字的转换步骤\"><a href=\"#对象到数字的转换步骤\" class=\"headerlink\" title=\"对象到数字的转换步骤\"></a>对象到数字的转换步骤</h3><pre><code>1. 如果对象有valueOf()方法并且返回元素值，javascript将返回值转换为数字作为结果\n2. 否则，如果对象有toString()并且返回原始值，javascript将返回结果转换为数字作为结果\n3. 否则，throws a TypeError\n</code></pre><h3 id=\"lt-gt-lt-gt-的比较规则\"><a href=\"#lt-gt-lt-gt-的比较规则\" class=\"headerlink\" title=\"&lt;,&gt;,&lt;=,&gt;=的比较规则\"></a>&lt;,&gt;,&lt;=,&gt;=的比较规则</h3><p>所有比较运算符都支持任意类型，但是<strong>比较只支持数字和字符串</strong>，所以需要执行必要的转换然后进行比较，转换规则如下:</p>\n<ol>\n<li>如果操作数是对象，转换为原始值：如果valueOf方法返回原始值，则使用这个值，否则使用toString方法的结果，如果转换失败则报错</li>\n<li>经过必要的对象到原始值的转换后，如果两个操作数都是字符串，按照字母顺序进行比较（他们的16位unicode值的大小）</li>\n<li>否则，如果有一个操作数不是字符串，<strong>将两个操作数转换为数字</strong>进行比较</li>\n</ol>\n<h3 id=\"运算符工作流程\"><a href=\"#运算符工作流程\" class=\"headerlink\" title=\"+运算符工作流程\"></a>+运算符工作流程</h3><ol>\n<li>如果有操作数是对象，转换为原始值</li>\n<li>此时如果有<strong>一个操作数是字符串</strong>，其他的操作数都转换为字符串并执行连接</li>\n<li>否则：<strong>所有操作数都转换为数字并执行加法</strong></li>\n</ol>\n<h3 id=\"函数内部arguments变量有哪些特性-有哪些属性-如何将它转换为数组\"><a href=\"#函数内部arguments变量有哪些特性-有哪些属性-如何将它转换为数组\" class=\"headerlink\" title=\"函数内部arguments变量有哪些特性,有哪些属性,如何将它转换为数组\"></a>函数内部arguments变量有哪些特性,有哪些属性,如何将它转换为数组</h3><ul>\n<li>arguments所有函数中都包含的一个局部变量，是一个类数组对象，对应函数调用时的实参。如果函数定义同名参数会在调用时覆盖默认对象</li>\n<li>arguments[index]分别对应函数调用时的实参，并且通过arguments修改实参时会同时修改实参</li>\n<li>arguments.length为实参的个数（Function.length表示形参长度）</li>\n<li>arguments.callee为当前正在执行的函数本身，使用这个属性进行递归调用时需注意this的变化</li>\n<li>arguments.caller为调用当前函数的函数（已被遗弃）</li>\n<li>转换为数组：<code>var args = Array.prototype.slice.call(arguments, 0);</code></li>\n</ul>\n<h3 id=\"DOM事件模型是如何的-编写一个EventUtil工具类实现事件管理兼容\"><a href=\"#DOM事件模型是如何的-编写一个EventUtil工具类实现事件管理兼容\" class=\"headerlink\" title=\"DOM事件模型是如何的,编写一个EventUtil工具类实现事件管理兼容\"></a>DOM事件模型是如何的,编写一个EventUtil工具类实现事件管理兼容</h3><ul>\n<li>DOM事件包含捕获（capture）和冒泡（bubble）两个阶段：捕获阶段事件从window开始触发事件然后通过祖先节点一次传递到触发事件的DOM元素上；冒泡阶段事件从初始元素依次向祖先节点传递直到window</li>\n<li>标准事件监听elem.addEventListener(type, handler, capture)/elem.removeEventListener(type, handler, capture)：handler接收保存事件信息的event对象作为参数，event.target为触发事件的对象，handler调用上下文this为绑定监听器的对象，event.preventDefault()取消事件默认行为，event.stopPropagation()/event.stopImmediatePropagation()取消事件传递</li>\n<li>老版本IE事件监听elem.attachEvent(‘on’+type, handler)/elem.detachEvent(‘on’+type, handler)：handler不接收event作为参数，事件信息保存在window.event中，触发事件的对象为event.srcElement，handler执行上下文this为window使用闭包中调用handler.call(elem, event)可模仿标准模型，然后返回闭包，保证了监听器的移除。event.returnValue为false时取消事件默认行为，event.cancleBubble为true时取消时间传播</li>\n<li>通常利用事件冒泡机制托管事件处理程序提高程序性能。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 跨浏览器事件处理工具。只支持冒泡。不支持捕获</div><div class=\"line\"> * @author  (qiu_deqing@126.com)</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">var EventUtil = &#123;</div><div class=\"line\">    getEvent: function (event) &#123;</div><div class=\"line\">        return event || window.event;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getTarget: function (event) &#123;</div><div class=\"line\">        return event.target || event.srcElement;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // 返回注册成功的监听器，IE中需要使用返回值来移除监听器</div><div class=\"line\">    on: function (elem, type, handler) &#123;</div><div class=\"line\">        if (elem.addEventListener) &#123;</div><div class=\"line\">            elem.addEventListener(type, handler, false);</div><div class=\"line\">            return handler;</div><div class=\"line\">        &#125; else if (elem.attachEvent) &#123;</div><div class=\"line\">            var wrapper = function () &#123;</div><div class=\"line\">              var event = window.event;</div><div class=\"line\">              event.target = event.srcElement;</div><div class=\"line\">              handler.call(elem, event);</div><div class=\"line\">            &#125;;</div><div class=\"line\">            elem.attachEvent(&apos;on&apos; + type, wrapper);</div><div class=\"line\">            return wrapper;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    off: function (elem, type, handler) &#123;</div><div class=\"line\">        if (elem.removeEventListener) &#123;</div><div class=\"line\">            elem.removeEventListener(type, handler, false);</div><div class=\"line\">        &#125; else if (elem.detachEvent) &#123;</div><div class=\"line\">            elem.detachEvent(&apos;on&apos; + type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    preventDefault: function (event) &#123;</div><div class=\"line\">        if (event.preventDefault) &#123;</div><div class=\"line\">            event.preventDefault();</div><div class=\"line\">        &#125; else if (&apos;returnValue&apos; in event) &#123;</div><div class=\"line\">            event.returnValue = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    stopPropagation: function (event) &#123;</div><div class=\"line\">        if (event.stopPropagation) &#123;</div><div class=\"line\">            event.stopPropagation();</div><div class=\"line\">        &#125; else if (&apos;cancelBubble&apos; in event) &#123;</div><div class=\"line\">            event.cancelBubble = true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    /**</div><div class=\"line\">     * keypress事件跨浏览器获取输入字符</div><div class=\"line\">     * 某些浏览器在一些特殊键上也触发keypress，此时返回null</div><div class=\"line\">     **/</div><div class=\"line\">     getChar: function (event) &#123;</div><div class=\"line\">        if (event.which == null) &#123;</div><div class=\"line\">            return String.fromCharCode(event.keyCode);  // IE</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if (event.which != 0 &amp;&amp; event.charCode != 0) &#123;</div><div class=\"line\">            return String.fromCharCode(event.which);    // the rest</div><div class=\"line\">        &#125;</div><div class=\"line\">        else &#123;</div><div class=\"line\">            return null;    // special key</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"评价一下三种方法实现继承的优缺点-并改进\"><a href=\"#评价一下三种方法实现继承的优缺点-并改进\" class=\"headerlink\" title=\"评价一下三种方法实现继承的优缺点,并改进\"></a>评价一下三种方法实现继承的优缺点,并改进</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Shape() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">function Rect() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">// 方法1</div><div class=\"line\">Rect.prototype = new Shape();</div><div class=\"line\"></div><div class=\"line\">// 方法2</div><div class=\"line\">Rect.prototype = Shape.prototype;</div><div class=\"line\"></div><div class=\"line\">// 方法3</div><div class=\"line\">Rect.prototype = Object.create(Shape.prototype);</div><div class=\"line\"></div><div class=\"line\">Rect.prototype.area = function () &#123;</div><div class=\"line\">  // do something</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>方法1：</p>\n<ol>\n<li>优点：正确设置原型链实现继承</li>\n<li>优点：父类实例属性得到继承，原型链查找效率提高，也能为一些属性提供合理的默认值</li>\n<li>缺点：父类实例属性为引用类型时，不恰当地修改会导致所有子类被修改</li>\n<li>缺点：创建父类实例作为子类原型时，可能无法确定构造函数需要的合理参数，这样提供的参数继承给子类没有实际意义，当子类需要这些参数时应该在构造函数中进行初始化和设置</li>\n<li>总结：继承应该是继承方法而不是属性，为子类设置父类实例属性应该是通过在子类构造函数中调用父类构造函数进行初始化</li>\n</ol>\n<p>方法2：</p>\n<ol>\n<li>优点：正确设置原型链实现继承</li>\n<li>缺点：父类构造函数原型与子类相同。修改子类原型添加方法会修改父类</li>\n</ol>\n<p>方法3：</p>\n<ol>\n<li>优点：正确设置原型链且避免方法1.2中的缺点</li>\n<li>缺点：ES5方法需要注意兼容性</li>\n</ol>\n<p>改进：</p>\n<ol>\n<li>所有三种方法应该在子类构造函数中调用父类构造函数实现实例属性初始化</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Rect() &#123;</div><div class=\"line\">    Shape.call(this);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>用新创建的对象替代子类默认原型，设置<code>Rect.prototype.constructor = Rect;</code>保证一致性</li>\n<li>第三种方法的polyfill：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function create(obj) &#123;</div><div class=\"line\">    if (Object.create) &#123;</div><div class=\"line\">        return Object.create(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function f() &#123;&#125;;</div><div class=\"line\">    f.prototype = obj;</div><div class=\"line\">    return new f();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"javascript编程部分\"><a href=\"#javascript编程部分\" class=\"headerlink\" title=\"$javascript编程部分\"></a>$javascript编程部分</h2><h3 id=\"请用原生js实现一个函数-给页面制定的任意一个元素添加一个透明遮罩-透明度可变-默认0-2-使这个区域点击无效-要求兼容IE8-及各主流浏览器-遮罩层效果如下图所示\"><a href=\"#请用原生js实现一个函数-给页面制定的任意一个元素添加一个透明遮罩-透明度可变-默认0-2-使这个区域点击无效-要求兼容IE8-及各主流浏览器-遮罩层效果如下图所示\" class=\"headerlink\" title=\"请用原生js实现一个函数,给页面制定的任意一个元素添加一个透明遮罩(透明度可变,默认0.2),使这个区域点击无效,要求兼容IE8+及各主流浏览器,遮罩层效果如下图所示:\"></a>请用原生js实现一个函数,给页面制定的任意一个元素添加一个透明遮罩(透明度可变,默认0.2),使这个区域点击无效,要求兼容IE8+及各主流浏览器,遮罩层效果如下图所示:</h3><p><img src=\"http://7xsspr.com2.z0.glb.clouddn.com/element-mask.jpg\" alt=\"遮罩效果\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style&gt;</div><div class=\"line\">#target &#123;</div><div class=\"line\">    width: 200px;</div><div class=\"line\">    height: 300px;</div><div class=\"line\">    margin: 40px;</div><div class=\"line\">    background-color: tomato;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&quot;target&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">function addMask(elem, opacity) &#123;</div><div class=\"line\">    opacity = opacity || 0.2;</div><div class=\"line\"></div><div class=\"line\">    var rect = elem.getBoundingClientRect();</div><div class=\"line\">    var style = getComputedStyle(elem, null);</div><div class=\"line\"></div><div class=\"line\">    var mask = document.createElement(&apos;div&apos;);</div><div class=\"line\">    mask.style.position = &apos;absolute&apos;;</div><div class=\"line\">    var marginLeft = parseFloat(style.marginLeft);</div><div class=\"line\">    mask.style.left = (elem.offsetLeft - marginLeft) + &apos;px&apos;;</div><div class=\"line\">    var marginTop = parseFloat(style.marginTop);</div><div class=\"line\">    mask.style.top = (elem.offsetTop - marginTop) + &apos;px&apos;;</div><div class=\"line\">    mask.style.zIndex = 9999;</div><div class=\"line\">    mask.style.opacity = &apos;&apos; + opacity;</div><div class=\"line\">    mask.style.backgroundColor = &apos;#000&apos;;</div><div class=\"line\"></div><div class=\"line\">    mask.style.width = (parseFloat(style.marginLeft) +</div><div class=\"line\">        parseFloat(style.marginRight) + rect.width) + &apos;px&apos;;</div><div class=\"line\">    mask.style.height = (parseFloat(style.marginTop) +</div><div class=\"line\">        parseFloat(style.marginBottom) + rect.height) + &apos;px&apos;;</div><div class=\"line\"></div><div class=\"line\">    elem.parentNode.appendChild(mask);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var target = document.getElementById(&apos;target&apos;);</div><div class=\"line\">addMask(target);</div><div class=\"line\"></div><div class=\"line\">target.addEventListener(&apos;click&apos;, function () &#123;</div><div class=\"line\">    console.log(&apos;click&apos;);</div><div class=\"line\">&#125;, false);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"请用代码写出-今天是星期x-其中x表示当天是星期几-如果当天是星期一-输出应该是”今天是星期一”\"><a href=\"#请用代码写出-今天是星期x-其中x表示当天是星期几-如果当天是星期一-输出应该是”今天是星期一”\" class=\"headerlink\" title=\"请用代码写出(今天是星期x)其中x表示当天是星期几,如果当天是星期一,输出应该是”今天是星期一”\"></a>请用代码写出(今天是星期x)其中x表示当天是星期几,如果当天是星期一,输出应该是”今天是星期一”</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var days = [&apos;日&apos;,&apos;一&apos;,&apos;二&apos;,&apos;三&apos;,&apos;四&apos;,&apos;五&apos;,&apos;六&apos;];</div><div class=\"line\">var date = new Date();</div><div class=\"line\"></div><div class=\"line\">console.log(&apos;今天是星期&apos; + days[date.getDay()]);</div></pre></td></tr></table></figure>\n<h3 id=\"下面这段代码想要循环延时输出结果0-1-2-3-4-请问输出结果是否正确-如果不正确-请说明为什么-并修改循环内的代码使其输出正确结果\"><a href=\"#下面这段代码想要循环延时输出结果0-1-2-3-4-请问输出结果是否正确-如果不正确-请说明为什么-并修改循环内的代码使其输出正确结果\" class=\"headerlink\" title=\"下面这段代码想要循环延时输出结果0 1 2 3 4,请问输出结果是否正确,如果不正确,请说明为什么,并修改循环内的代码使其输出正确结果\"></a>下面这段代码想要循环延时输出结果0 1 2 3 4,请问输出结果是否正确,如果不正确,请说明为什么,并修改循环内的代码使其输出正确结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var i = 0; i &lt; 5; ++i) &#123;</div><div class=\"line\">  setTimeout(function () &#123;</div><div class=\"line\">    console.log(i + &apos; &apos;);</div><div class=\"line\">  &#125;, 100);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不能输出正确结果，因为循环中setTimeout接受的参数函数通过闭包访问变量i。javascript运行环境为单线程，setTimeout注册的函数需要等待线程空闲才能执行，此时for循环已经结束，i值为5.五个定时输出都是5<br>修改方法：将setTimeout放在函数立即调用表达式中，将i值作为参数传递给包裹函数，创建新闭包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var i = 0; i &lt; 5; ++i) &#123;</div><div class=\"line\">  (function (i) &#123;</div><div class=\"line\">    setTimeout(function () &#123;</div><div class=\"line\">      console.log(i + &apos; &apos;);</div><div class=\"line\">    &#125;, 100);</div><div class=\"line\">  &#125;(i));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"现有一个Page类-其原型对象上有许多以post开头的方法-如postMsg-另有一拦截函数chekc-只返回ture或false-请设计一个函数-该函数应批量改造原Page的postXXX方法-在保留其原有功能的同时-为每个postXXX方法增加拦截验证功能-当chekc返回true时继续执行原postXXX方法-返回false时不再执行原postXXX方法\"><a href=\"#现有一个Page类-其原型对象上有许多以post开头的方法-如postMsg-另有一拦截函数chekc-只返回ture或false-请设计一个函数-该函数应批量改造原Page的postXXX方法-在保留其原有功能的同时-为每个postXXX方法增加拦截验证功能-当chekc返回true时继续执行原postXXX方法-返回false时不再执行原postXXX方法\" class=\"headerlink\" title=\"现有一个Page类,其原型对象上有许多以post开头的方法(如postMsg);另有一拦截函数chekc,只返回ture或false.请设计一个函数,该函数应批量改造原Page的postXXX方法,在保留其原有功能的同时,为每个postXXX方法增加拦截验证功能,当chekc返回true时继续执行原postXXX方法,返回false时不再执行原postXXX方法\"></a>现有一个Page类,其原型对象上有许多以post开头的方法(如postMsg);另有一拦截函数chekc,只返回ture或false.请设计一个函数,该函数应批量改造原Page的postXXX方法,在保留其原有功能的同时,为每个postXXX方法增加拦截验证功能,当chekc返回true时继续执行原postXXX方法,返回false时不再执行原postXXX方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Page() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">Page.prototype = &#123;</div><div class=\"line\">  constructor: Page,</div><div class=\"line\"></div><div class=\"line\">  postA: function (a) &#123;</div><div class=\"line\">    console.log(&apos;a:&apos; + a);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postB: function (b) &#123;</div><div class=\"line\">    console.log(&apos;b:&apos; + b);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postC: function (c) &#123;</div><div class=\"line\">    console.log(&apos;c:&apos; + c);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  check: function () &#123;</div><div class=\"line\">    return Math.random() &gt; 0.5;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function checkfy(obj) &#123;</div><div class=\"line\">  for (var key in obj) &#123;</div><div class=\"line\">    if (key.indexOf(&apos;post&apos;) === 0 &amp;&amp; typeof obj[key] === &apos;function&apos;) &#123;</div><div class=\"line\">      (function (key) &#123;</div><div class=\"line\">        var fn = obj[key];</div><div class=\"line\">        obj[key] = function () &#123;</div><div class=\"line\">          if (obj.check()) &#123;</div><div class=\"line\">            fn.apply(obj, arguments);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">      &#125;(key));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; // end checkfy()</div><div class=\"line\"></div><div class=\"line\">checkfy(Page.prototype);</div><div class=\"line\"></div><div class=\"line\">var obj = new Page();</div><div class=\"line\"></div><div class=\"line\">obj.postA(&apos;checkfy&apos;);</div><div class=\"line\">obj.postB(&apos;checkfy&apos;);</div><div class=\"line\">obj.postC(&apos;checkfy&apos;);</div></pre></td></tr></table></figure>\n<h3 id=\"完成下面的tool-tip\"><a href=\"#完成下面的tool-tip\" class=\"headerlink\" title=\"完成下面的tool-tip\"></a>完成下面的tool-tip</h3><p><img src=\"http://7xsspr.com2.z0.glb.clouddn.com/tip-box.jpg\" alt=\"xxx\"></p>\n<h3 id=\"编写javascript深度克隆函数deepClone\"><a href=\"#编写javascript深度克隆函数deepClone\" class=\"headerlink\" title=\"编写javascript深度克隆函数deepClone\"></a>编写javascript深度克隆函数deepClone</h3><pre><code>function deepClone(obj) {\n    var _toString = Object.prototype.toString;\n\n    // null, undefined, non-object, function\n    if (!obj || typeof obj !== &apos;object&apos;) {\n        return obj;\n    }\n\n    // DOM Node\n    if (obj.nodeType &amp;&amp; &apos;cloneNode&apos; in obj) {\n        return obj.cloneNode(true);\n    }\n\n    // Date\n    if (_toString.call(obj) === &apos;[object Date]&apos;) {\n        return new Date(obj.getTime());\n    }\n\n    // RegExp\n    if (_toString.call(obj) === &apos;[object RegExp]&apos;) {\n        var flags = [];\n        if (obj.global) { flags.push(&apos;g&apos;); }\n        if (obj.multiline) { flags.push(&apos;m&apos;); }\n        if (obj.ignoreCase) { flags.push(&apos;i&apos;); }\n\n        return new RegExp(obj.source, flags.join(&apos;&apos;));\n    }\n\n    var result = Array.isArray(obj) ? [] :\n        obj.constructor ? new obj.constructor() : {};\n\n    for (var key in obj ) {\n        result[key] = deepClone(obj[key]);\n    }\n\n    return result;\n}\n\nfunction A() {\n    this.a = a;\n}\n\nvar a = {\n    name: &apos;qiu&apos;,\n    birth: new Date(),\n    pattern: /qiu/gim,\n    container: document.body,\n    hobbys: [&apos;book&apos;, new Date(), /aaa/gim, 111]\n};\n\nvar c = new A();\nvar b = deepClone(c);\nconsole.log(c.a === b.a);\nconsole.log(c, b);\n</code></pre><h3 id=\"补充代码-鼠标单击Button1后将Button1移动到Button2的后面\"><a href=\"#补充代码-鼠标单击Button1后将Button1移动到Button2的后面\" class=\"headerlink\" title=\"补充代码,鼠标单击Button1后将Button1移动到Button2的后面\"></a>补充代码,鼠标单击Button1后将Button1移动到Button2的后面</h3><pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;TEst&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div&gt;\n   &lt;input type=&quot;button&quot; id =&quot;button1&quot; value=&quot;1&quot; /&gt;\n   &lt;input type=&quot;button&quot; id =&quot;button2&quot; value=&quot;2&quot; /&gt;\n&lt;/div&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n    var btn1 = document.getElementById(&apos;button1&apos;);\n    var btn2 = document.getElementById(&apos;button2&apos;);\n\n    addListener(btn1, &apos;click&apos;, function (event) {\n        btn1.parentNode.insertBefore(btn2, btn1);\n    });\n\n    function addListener(elem, type, handler) {\n        if (elem.addEventListener) {\n            elem.addEventListener(type, handler, false);\n            return handler;\n        } else if (elem.attachEvent) {\n            function wrapper() {\n                var event = window.event;\n                event.target = event.srcElement;\n                handler.call(elem, event);\n            }\n            elem.attachEvent(&apos;on&apos; + type, wrapper);\n            return wrapper;\n        }\n    }\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"网页中实现一个计算当年还剩多少时间的倒数计时程序-要求网页上实时动态显示”××年还剩××天××时××分××秒”\"><a href=\"#网页中实现一个计算当年还剩多少时间的倒数计时程序-要求网页上实时动态显示”××年还剩××天××时××分××秒”\" class=\"headerlink\" title=\"网页中实现一个计算当年还剩多少时间的倒数计时程序,要求网页上实时动态显示”××年还剩××天××时××分××秒”\"></a>网页中实现一个计算当年还剩多少时间的倒数计时程序,要求网页上实时动态显示”××年还剩××天××时××分××秒”</h3><pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;TEst&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;span id=&quot;target&quot;&gt;&lt;/span&gt;\n\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n    // 为了简化。每月默认30天\n    function getTimeString() {\n        var start = new Date();\n        var end = new Date(start.getFullYear() + 1, 0, 1);\n        var elapse = Math.floor((end - start) / 1000);\n\n        var seconds = elapse % 60 ;\n        var minutes = Math.floor(elapse / 60) % 60;\n        var hours = Math.floor(elapse / (60 * 60)) % 24;\n        var days = Math.floor(elapse / (60 * 60 * 24)) % 30;\n        var months = Math.floor(elapse / (60 * 60 * 24 * 30)) % 12;\n        var years = Math.floor(elapse / (60 * 60 * 24 * 30 * 12));\n\n        return start.getFullYear() + &apos;年还剩&apos; + years + &apos;年&apos; + months + &apos;月&apos; + days + &apos;日&apos;\n            + hours + &apos;小时&apos; + minutes + &apos;分&apos; + seconds + &apos;秒&apos;;\n    }\n\n    function domText(elem, text) {\n        if (text == undefined) {\n\n            if (elem.textContent) {\n                return elem.textContent;\n            } else if (elem.innerText) {\n                return elem.innerText;\n            }\n        } else {\n            if (elem.textContent) {\n                elem.textContent = text;\n            } else if (elem.innerText) {\n                elem.innerText = text;\n            } else {\n                elem.innerHTML = text;\n            }\n        }\n    }\n\n    var target = document.getElementById(&apos;target&apos;);\n\n    setInterval(function () {\n        domText(target, getTimeString());\n    }, 1000)\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"完成一个函数-接受数组作为参数-数组元素为整数或者数组-数组元素包含整数或数组-函数返回扁平化后的数组\"><a href=\"#完成一个函数-接受数组作为参数-数组元素为整数或者数组-数组元素包含整数或数组-函数返回扁平化后的数组\" class=\"headerlink\" title=\"完成一个函数,接受数组作为参数,数组元素为整数或者数组,数组元素包含整数或数组,函数返回扁平化后的数组\"></a>完成一个函数,接受数组作为参数,数组元素为整数或者数组,数组元素包含整数或数组,函数返回扁平化后的数组</h3><p>如：[1, [2, [ [3, 4], 5], 6]] =&gt; [1, 2, 3, 4, 5, 6]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var data =  [1, [2, [ [3, 4], 5], 6]];</div><div class=\"line\"></div><div class=\"line\">function flat(data, result) &#123;</div><div class=\"line\">    var i, d, len;</div><div class=\"line\">    for (i = 0, len = data.length; i &lt; len; ++i) &#123;</div><div class=\"line\">        d = data[i];</div><div class=\"line\">        if (typeof d === &apos;number&apos;) &#123;</div><div class=\"line\">            result.push(d);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            flat(d, result);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var result = [];</div><div class=\"line\">flat(data, result);</div><div class=\"line\"></div><div class=\"line\">console.log(result);</div></pre></td></tr></table></figure>\n<h3 id=\"如何判断一个对象是否为数组\"><a href=\"#如何判断一个对象是否为数组\" class=\"headerlink\" title=\"如何判断一个对象是否为数组\"></a>如何判断一个对象是否为数组</h3><p>如果浏览器支持Array.isArray()可以直接判断否则需进行必要判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 判断一个对象是否是数组，参数不是对象或者不是数组，返回false</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;Object&#125; arg 需要测试是否为数组的对象</div><div class=\"line\"> * @return &#123;Boolean&#125; 传入参数是数组返回true，否则返回false</div><div class=\"line\"> */</div><div class=\"line\">function isArray(arg) &#123;</div><div class=\"line\">    if (typeof arg === &apos;object&apos;) &#123;</div><div class=\"line\">        return Object.prototype.toString.call(arg) === &apos;[object Array]&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"请评价以下事件监听器代码并给出改进意见\"><a href=\"#请评价以下事件监听器代码并给出改进意见\" class=\"headerlink\" title=\"请评价以下事件监听器代码并给出改进意见\"></a>请评价以下事件监听器代码并给出改进意见</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (window.addEventListener) &#123;</div><div class=\"line\">  var addListener = function (el, type, listener, useCapture) &#123;</div><div class=\"line\">    el.addEventListener(type, listener, useCapture);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">else if (document.all) &#123;</div><div class=\"line\">  addListener = function (el, type, listener) &#123;</div><div class=\"line\">    el.attachEvent(&apos;on&apos; + type, function () &#123;</div><div class=\"line\">      listener.apply(el);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>作用：浏览器功能检测实现跨浏览器DOM事件绑定</p>\n<p>优点：</p>\n<ol>\n<li>测试代码只运行一次，根据浏览器确定绑定方法</li>\n<li>通过<code>listener.apply(el)</code>解决IE下监听器this与标准不一致的地方</li>\n<li>在浏览器不支持的情况下提供简单的功能，在标准浏览器中提供捕获功能</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>document.all作为IE检测不可靠，应该使用if(el.attachEvent)</li>\n<li>addListener在不同浏览器下API不一样</li>\n<li><code>listener.apply</code>使this与标准一致但监听器无法移除</li>\n<li>未解决IE下listener参数event。 target问题</li>\n</ol>\n<p>改进:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">var addListener;</div><div class=\"line\"></div><div class=\"line\">if (window.addEventListener) &#123;</div><div class=\"line\">  addListener = function (el, type, listener, useCapture) &#123;</div><div class=\"line\">    el.addEventListener(type, listener, useCapture);</div><div class=\"line\">    return listener;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">else if (window.attachEvent) &#123;</div><div class=\"line\">  addListener = function (el, type, listener) &#123;</div><div class=\"line\">    // 标准化this，event，target</div><div class=\"line\">    var wrapper = function () &#123;</div><div class=\"line\">      var event = window.event;</div><div class=\"line\">      event.target = event.srcElement;</div><div class=\"line\">      listener.call(el, event);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    el.attachEvent(&apos;on&apos; + type, wrapper);</div><div class=\"line\">    return wrapper;</div><div class=\"line\">    // 返回wrapper。调用者可以保存，以后remove</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"如何判断一个对象是否为函数\"><a href=\"#如何判断一个对象是否为函数\" class=\"headerlink\" title=\"如何判断一个对象是否为函数\"></a>如何判断一个对象是否为函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 判断对象是否为函数，如果当前运行环境对可调用对象（如正则表达式）</div><div class=\"line\"> * 的typeof返回&apos;function&apos;，采用通用方法，否则采用优化方法</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;Any&#125; arg 需要检测是否为函数的对象</div><div class=\"line\"> * @return &#123;boolean&#125; 如果参数是函数，返回true，否则false</div><div class=\"line\"> */</div><div class=\"line\">function isFunction(arg) &#123;</div><div class=\"line\">    if (arg) &#123;</div><div class=\"line\">        if (typeof (/./) !== &apos;function&apos;) &#123;</div><div class=\"line\">            return typeof arg === &apos;function&apos;;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return Object.prototype.toString.call(arg) === &apos;[object Function]&apos;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; // end if</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"编写一个函数接受url中query-string为参数-返回解析后的Object-query-string使用application-x-www-form-urlencoded编码\"><a href=\"#编写一个函数接受url中query-string为参数-返回解析后的Object-query-string使用application-x-www-form-urlencoded编码\" class=\"headerlink\" title=\"编写一个函数接受url中query string为参数,返回解析后的Object,query string使用application/x-www-form-urlencoded编码\"></a>编写一个函数接受url中query string为参数,返回解析后的Object,query string使用application/x-www-form-urlencoded编码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 解析query string转换为对象，一个key有多个值时生成数组</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;String&#125; query 需要解析的query字符串，开头可以是?，</div><div class=\"line\"> * 按照application/x-www-form-urlencoded编码</div><div class=\"line\"> * @return &#123;Object&#125; 参数解析后的对象</div><div class=\"line\"> */</div><div class=\"line\">function parseQuery(query) &#123;</div><div class=\"line\">    var result = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    // 如果不是字符串返回空对象</div><div class=\"line\">    if (typeof query !== &apos;string&apos;) &#123;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // 去掉字符串开头可能带的?</div><div class=\"line\">    if (query.charAt(0) === &apos;?&apos;) &#123;</div><div class=\"line\">        query = query.substring(1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var pairs = query.split(&apos;&amp;&apos;);</div><div class=\"line\">    var pair;</div><div class=\"line\">    var key, value;</div><div class=\"line\">    var i, len;</div><div class=\"line\"></div><div class=\"line\">    for (i = 0, len = pairs.length; i &lt; len; ++i) &#123;</div><div class=\"line\">        pair = pairs[i].split(&apos;=&apos;);</div><div class=\"line\">        // application/x-www-form-urlencoded编码会将&apos; &apos;转换为+</div><div class=\"line\">        key = decodeURIComponent(pair[0]).replace(/\\+/g, &apos; &apos;);</div><div class=\"line\">        value = decodeURIComponent(pair[1]).replace(/\\+/g, &apos; &apos;);</div><div class=\"line\"></div><div class=\"line\">        // 如果是新key，直接添加</div><div class=\"line\">        if (!(key in result)) &#123;</div><div class=\"line\">            result[key] = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">        // 如果key已经出现一次以上，直接向数组添加value</div><div class=\"line\">        else if (isArray(result[key])) &#123;</div><div class=\"line\">            result[key].push(value);</div><div class=\"line\">        &#125;</div><div class=\"line\">        // key第二次出现，将结果改为数组</div><div class=\"line\">        else &#123;</div><div class=\"line\">            var arr = [result[key]];</div><div class=\"line\">            arr.push(value);</div><div class=\"line\">            result[key] = arr;</div><div class=\"line\">        &#125; // end if-else</div><div class=\"line\">    &#125; // end for</div><div class=\"line\"></div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function isArray(arg) &#123;</div><div class=\"line\">    if (arg &amp;&amp; typeof arg === &apos;object&apos;) &#123;</div><div class=\"line\">        return Object.prototype.toString.call(arg) === &apos;[object Array]&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div><div class=\"line\">/**</div><div class=\"line\">console.log(parseQuery(&apos;sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8&apos;));</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<h3 id=\"解析一个完整的url-返回Object包含域与window-location相同\"><a href=\"#解析一个完整的url-返回Object包含域与window-location相同\" class=\"headerlink\" title=\"解析一个完整的url,返回Object包含域与window.location相同\"></a>解析一个完整的url,返回Object包含域与window.location相同</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 解析一个url并生成window.location对象中包含的域</div><div class=\"line\"> * location:</div><div class=\"line\"> * &#123;</div><div class=\"line\"> *      href: &apos;包含完整的url&apos;,</div><div class=\"line\"> *      origin: &apos;包含协议到pathname之前的内容&apos;,</div><div class=\"line\"> *      protocol: &apos;url使用的协议，包含末尾的:&apos;,</div><div class=\"line\"> *      username: &apos;用户名&apos;, // 暂时不支持</div><div class=\"line\"> *      password: &apos;密码&apos;,  // 暂时不支持</div><div class=\"line\"> *      host: &apos;完整主机名，包含:和端口&apos;,</div><div class=\"line\"> *      hostname: &apos;主机名，不包含端口&apos;</div><div class=\"line\"> *      port: &apos;端口号&apos;,</div><div class=\"line\"> *      pathname: &apos;服务器上访问资源的路径/开头&apos;,</div><div class=\"line\"> *      search: &apos;query string，?开头&apos;,</div><div class=\"line\"> *      hash: &apos;#开头的fragment identifier&apos;</div><div class=\"line\"> * &#125;</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;string&#125; url 需要解析的url</div><div class=\"line\"> * @return &#123;Object&#125; 包含url信息的对象</div><div class=\"line\"> */</div><div class=\"line\">function parseUrl(url) &#123;</div><div class=\"line\">    var result = &#123;&#125;;</div><div class=\"line\">    var keys = [&apos;href&apos;, &apos;origin&apos;, &apos;protocol&apos;, &apos;host&apos;,</div><div class=\"line\">                &apos;hostname&apos;, &apos;port&apos;, &apos;pathname&apos;, &apos;search&apos;, &apos;hash&apos;];</div><div class=\"line\">    var i, len;</div><div class=\"line\">    var regexp = /(([^:]+:)\\/\\/(([^:\\/\\?#]+)(:\\d+)?))(\\/[^?#]*)?(\\?[^#]*)?(#.*)?/;</div><div class=\"line\"></div><div class=\"line\">    var match = regexp.exec(url);</div><div class=\"line\"></div><div class=\"line\">    if (match) &#123;</div><div class=\"line\">        for (i = keys.length - 1; i &gt;= 0; --i) &#123;</div><div class=\"line\">            result[keys[i]] = match[i] ? match[i] : &apos;&apos;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"完成函数getViewportSize返回指定窗口的视口尺寸\"><a href=\"#完成函数getViewportSize返回指定窗口的视口尺寸\" class=\"headerlink\" title=\"完成函数getViewportSize返回指定窗口的视口尺寸\"></a>完成函数getViewportSize返回指定窗口的视口尺寸</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* 查询指定窗口的视口尺寸，如果不指定窗口，查询当前窗口尺寸</div><div class=\"line\">**/</div><div class=\"line\">function getViewportSize(w) &#123;</div><div class=\"line\">    w = w || window;</div><div class=\"line\"></div><div class=\"line\">    // IE9及标准浏览器中可使用此标准方法</div><div class=\"line\">    if (&apos;innerHeight&apos; in w) &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            width: w.innerWidth,</div><div class=\"line\">            height: w.innerHeight</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var d = w.document;</div><div class=\"line\">    // IE 8及以下浏览器在标准模式下</div><div class=\"line\">    if (document.compatMode === &apos;CSS1Compat&apos;) &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            width: d.documentElement.clientWidth,</div><div class=\"line\">            height: d.documentElement.clientHeight</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // IE8及以下浏览器在怪癖模式下</div><div class=\"line\">    return &#123;</div><div class=\"line\">        width: d.body.clientWidth,</div><div class=\"line\">        height: d.body.clientHeight</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"完成函数getScrollOffset返回窗口滚动条偏移量\"><a href=\"#完成函数getScrollOffset返回窗口滚动条偏移量\" class=\"headerlink\" title=\"完成函数getScrollOffset返回窗口滚动条偏移量\"></a>完成函数getScrollOffset返回窗口滚动条偏移量</h3><pre><code>/**\n * 获取指定window中滚动条的偏移量，如未指定则获取当前window\n * 滚动条偏移量\n *\n * @param {window} w 需要获取滚动条偏移量的窗口\n * @return {Object} obj.x为水平滚动条偏移量,obj.y为竖直滚动条偏移量\n */\nfunction getScrollOffset(w) {\n    w =  w || window;\n    // 如果是标准浏览器\n    if (w.pageXOffset != null) {\n        return {\n            x: w.pageXOffset,\n            y: w.pageYOffset\n        };\n    }\n\n    // 老版本IE，根据兼容性不同访问不同元素\n    var d = w.document;\n    if (d.compatMode === &apos;CSS1Compat&apos;) {\n        return {\n            x: d.documentElement.scrollLeft,\n            y: d.documentElement.scrollTop\n        }\n    }\n\n    return {\n        x: d.body.scrollLeft,\n        y: d.body.scrollTop\n    };\n}\n</code></pre><h3 id=\"现有一个字符串richText-是一段富文本-需要显示在页面上-有个要求-需要给其中只包含一个img元素的p标签增加一个叫pic的class-请编写代码实现-可以使用jQuery或KISSY\"><a href=\"#现有一个字符串richText-是一段富文本-需要显示在页面上-有个要求-需要给其中只包含一个img元素的p标签增加一个叫pic的class-请编写代码实现-可以使用jQuery或KISSY\" class=\"headerlink\" title=\"现有一个字符串richText,是一段富文本,需要显示在页面上.有个要求,需要给其中只包含一个img元素的p标签增加一个叫pic的class.请编写代码实现.可以使用jQuery或KISSY.\"></a>现有一个字符串richText,是一段富文本,需要显示在页面上.有个要求,需要给其中只包含一个img元素的p标签增加一个叫pic的class.请编写代码实现.可以使用jQuery或KISSY.</h3><pre><code>function richText(text) {\n    var div = document.createElement(&apos;div&apos;);\n    div.innerHTML = text;\n    var p = div.getElementsByTagName(&apos;p&apos;);\n    var i, len;\n\n    for (i = 0, len = p.length; i &lt; len; ++i) {\n        if (p[i].getElementsByTagName(&apos;img&apos;).length === 1) {\n            p[i].classList.add(&apos;pic&apos;);\n        }\n    }\n\n    return div.innerHTML;\n}\n</code></pre><h3 id=\"请实现一个Event类-继承自此类的对象都会拥有两个方法on-off-once和trigger\"><a href=\"#请实现一个Event类-继承自此类的对象都会拥有两个方法on-off-once和trigger\" class=\"headerlink\" title=\"请实现一个Event类,继承自此类的对象都会拥有两个方法on,off,once和trigger\"></a>请实现一个Event类,继承自此类的对象都会拥有两个方法on,off,once和trigger</h3><pre><code>function Event() {\n    if (!(this instanceof Event)) {\n        return new Event();\n    }\n    this._callbacks = {};\n}\nEvent.prototype.on = function (type, handler) {\n    this_callbacks = this._callbacks || {};\n    this._callbacks[type] = this.callbacks[type] || [];\n    this._callbacks[type].push(handler);\n\n    return this;\n};\n\nEvent.prototype.off = function (type, handler) {\n    var list = this._callbacks[type];\n\n    if (list) {\n        for (var i = list.length; i &gt;= 0; --i) {\n            if (list[i] === handler) {\n                list.splice(i, 1);\n            }\n        }\n    }\n\n    return this;\n};\n\nEvent.prototype.trigger = function (type, data) {\n    var list = this._callbacks[type];\n\n    if (list) {\n        for (var i = 0, len = list.length; i &lt; len; ++i) {\n            list[i].call(this, data);\n        }\n    }\n};\n\nEvent.prototype.once = function (type, handler) {\n    var self = this;\n\n    function wrapper() {\n        handler.apply(self, arguments);\n        self.off(type, wrapper);\n    }\n    this.on(type, wrapper);\n    return this;\n};\n</code></pre><h3 id=\"编写一个函数将列表子元素顺序反转\"><a href=\"#编写一个函数将列表子元素顺序反转\" class=\"headerlink\" title=\"编写一个函数将列表子元素顺序反转\"></a>编写一个函数将列表子元素顺序反转</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul id=&quot;target&quot;&gt;</div><div class=\"line\">    &lt;li&gt;1&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;2&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;3&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;4&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    var target = document.getElementById(&apos;target&apos;);</div><div class=\"line\">    var i;</div><div class=\"line\">    var frag = document.createDocumentFragment();</div><div class=\"line\"></div><div class=\"line\">    for (i = target.children.length - 1; i &amp;gt;= 0; --i) &#123;</div><div class=\"line\">        frag.appendChild(target.children[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    target.appendChild(frag);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"以下函数的作用是-空白区域应该填写什么\"><a href=\"#以下函数的作用是-空白区域应该填写什么\" class=\"headerlink\" title=\"以下函数的作用是?空白区域应该填写什么\"></a>以下函数的作用是?空白区域应该填写什么</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// define</div><div class=\"line\">(function (window) &#123;</div><div class=\"line\">    function fn(str) &#123;</div><div class=\"line\">        this.str = str;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    fn.prototype.format = function () &#123;</div><div class=\"line\">        var arg = __1__;</div><div class=\"line\">        return this.str.replace(__2__, function (a, b) &#123;</div><div class=\"line\">            return arg[b] || &apos;&apos;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    window.fn = fn;</div><div class=\"line\">&#125;)(window);</div><div class=\"line\"></div><div class=\"line\">// use</div><div class=\"line\">(function () &#123;</div><div class=\"line\">    var t = new fn(&apos;&lt;p&gt;&lt;a href=&quot;&#123;0&#125;&quot;&gt;&#123;1&#125;&lt;/a&gt;&lt;span&gt;&#123;2&#125;&lt;/span&gt;&lt;/p&gt;&apos;);</div><div class=\"line\">    console.log(t.format(&apos;http://www.alibaba.com&apos;, &apos;Alibaba&apos;, &apos;Welcome&apos;));</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>define部分定义一个简单的模板类，使用{}作为转义标记，中间的数字表示替换目标，format实参用来替换模板内标记<br>横线处填：</p>\n<ol>\n<li><code>Array.prototype.slice.call(arguments, 0)</code></li>\n<li><code>/\\{\\s*(\\d+)\\s*\\}/g</code></li>\n</ol>\n<h3 id=\"编写一个函数实现form的序列化-即将一个表单中的键值序列化为可提交的字符串\"><a href=\"#编写一个函数实现form的序列化-即将一个表单中的键值序列化为可提交的字符串\" class=\"headerlink\" title=\"编写一个函数实现form的序列化(即将一个表单中的键值序列化为可提交的字符串)\"></a>编写一个函数实现form的序列化(即将一个表单中的键值序列化为可提交的字符串)</h3><pre><code>&lt;form id=&quot;target&quot;&gt;\n    &lt;select name=&quot;age&quot;&gt;\n        &lt;option value=&quot;aaa&quot;&gt;aaa&lt;/option&gt;\n        &lt;option value=&quot;bbb&quot; selected&gt;bbb&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;select name=&quot;friends&quot; multiple&gt;\n        &lt;option value=&quot;qiu&quot; selected&gt;qiu&lt;/option&gt;\n        &lt;option value=&quot;de&quot;&gt;de&lt;/option&gt;\n        &lt;option value=&quot;qing&quot; selected&gt;qing&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;input name=&quot;name&quot; value=&quot;qiudeqing&quot;&gt;\n    &lt;input type=&quot;password&quot; name=&quot;password&quot; value=&quot;11111&quot;&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;salery&quot; value=&quot;3333&quot;&gt;\n    &lt;textarea name=&quot;description&quot;&gt;description&lt;/textarea&gt;\n    &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; checked value=&quot;football&quot;&gt;Football\n    &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;basketball&quot;&gt;Basketball\n    &lt;input type=&quot;radio&quot; name=&quot;sex&quot; checked value=&quot;Female&quot;&gt;Female\n    &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;Male&quot;&gt;Male\n&lt;/form&gt;\n\n\n&lt;script&gt;\n\n/**\n * 将一个表单元素序列化为可提交的字符串\n *\n * @param {FormElement} form 需要序列化的表单元素\n * @return {string} 表单序列化后的字符串\n */\nfunction serializeForm(form) {\n  if (!form || form.nodeName.toUpperCase() !== &apos;FORM&apos;) {\n    return;\n  }\n\n  var result = [];\n\n  var i, len;\n  var field, fieldName, fieldType;\n\n  for (i = 0, len = form.length; i &lt; len; ++i) {\n    field = form.elements[i];\n    fieldName = field.name;\n    fieldType = field.type;\n\n    if (field.disabled || !fieldName) {\n      continue;\n    } // enf if\n\n    switch (fieldType) {\n      case &apos;text&apos;:\n      case &apos;password&apos;:\n      case &apos;hidden&apos;:\n      case &apos;textarea&apos;:\n        result.push(encodeURIComponent(fieldName) + &apos;=&apos; +\n            encodeURIComponent(field.value));\n        break;\n\n      case &apos;radio&apos;:\n      case &apos;checkbox&apos;:\n        if (field.checked) {\n          result.push(encodeURIComponent(fieldName) + &apos;=&apos; +\n            encodeURIComponent(field.value));\n        }\n        break;\n\n      case &apos;select-one&apos;:\n      case &apos;select-multiple&apos;:\n        for (var j = 0, jLen = field.options.length; j &lt; jLen; ++j) {\n          if (field.options[j].selected) {\n            result.push(encodeURIComponent(fieldName) + &apos;=&apos; +\n              encodeURIComponent(field.options[j].value || field.options[j].text));\n          }\n        } // end for\n        break;\n\n      case &apos;file&apos;:\n      case &apos;submit&apos;:\n        break; // 是否处理？\n\n      default:\n        break;\n    } // end switch\n  } // end for\n\n    return result.join(&apos;&amp;&apos;);\n}\n\nvar form = document.getElementById(&apos;target&apos;);\nconsole.log(serializeForm(form));\n&lt;/script&gt;\n</code></pre><h3 id=\"使用原生javascript给下面列表中的li节点绑定点击事件-点击时创建一个Object对象-兼容IE和标准浏览器\"><a href=\"#使用原生javascript给下面列表中的li节点绑定点击事件-点击时创建一个Object对象-兼容IE和标准浏览器\" class=\"headerlink\" title=\"使用原生javascript给下面列表中的li节点绑定点击事件,点击时创建一个Object对象,兼容IE和标准浏览器\"></a>使用原生javascript给下面列表中的li节点绑定点击事件,点击时创建一个Object对象,兼容IE和标准浏览器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul id=&quot;nav&quot;&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=&quot;http://11111&quot;&gt;111&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=&quot;http://2222&quot;&gt;222&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=&quot;http://333&quot;&gt;333&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=&quot;http://444&quot;&gt;444&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">Object:</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;index&quot;: 1,</div><div class=\"line\">    &quot;name&quot;: &quot;111&quot;,</div><div class=\"line\">    &quot;link&quot;: &quot;http://1111&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>script:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\">var EventUtil = &#123;</div><div class=\"line\">    getEvent: function (event) &#123;</div><div class=\"line\">        return event || window.event;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    getTarget: function (event) &#123;</div><div class=\"line\">        return event.target || event.srcElement;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // 返回注册成功的监听器，IE中需要使用返回值来移除监听器</div><div class=\"line\">    on: function (elem, type, handler) &#123;</div><div class=\"line\">        if (elem.addEventListener) &#123;</div><div class=\"line\">            elem.addEventListener(type, handler, false);</div><div class=\"line\">            return handler;</div><div class=\"line\">        &#125; else if (elem.attachEvent) &#123;</div><div class=\"line\">            function wrapper(event) &#123;</div><div class=\"line\">                return handler.call(elem, event);</div><div class=\"line\">            &#125;;</div><div class=\"line\">            elem.attachEvent(&apos;on&apos; + type, wrapper);</div><div class=\"line\">            return wrapper;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    off: function (elem, type, handler) &#123;</div><div class=\"line\">        if (elem.removeEventListener) &#123;</div><div class=\"line\">            elem.removeEventListener(type, handler, false);</div><div class=\"line\">        &#125; else if (elem.detachEvent) &#123;</div><div class=\"line\">            elem.detachEvent(&apos;on&apos; + type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    preventDefault: function (event) &#123;</div><div class=\"line\">        if (event.preventDefault) &#123;</div><div class=\"line\">            event.preventDefault();</div><div class=\"line\">        &#125; else if (&apos;returnValue&apos; in event) &#123;</div><div class=\"line\">            event.returnValue = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    stopPropagation: function (event) &#123;</div><div class=\"line\">        if (event.stopPropagation) &#123;</div><div class=\"line\">            event.stopPropagation();</div><div class=\"line\">        &#125; else if (&apos;cancelBubble&apos; in event) &#123;</div><div class=\"line\">            event.cancelBubble = true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">var DOMUtil = &#123;</div><div class=\"line\">    text: function (elem) &#123;</div><div class=\"line\">        if (&apos;textContent&apos; in elem) &#123;</div><div class=\"line\">            return elem.textContent;</div><div class=\"line\">        &#125; else if (&apos;innerText&apos; in elem) &#123;</div><div class=\"line\">            return elem.innerText;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    prop: function (elem, propName) &#123;</div><div class=\"line\">        return elem.getAttribute(propName);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var nav = document.getElementById(&apos;nav&apos;);</div><div class=\"line\"></div><div class=\"line\">EventUtil.on(nav, &apos;click&apos;, function (event) &#123;</div><div class=\"line\">    var event = EventUtil.getEvent(event);</div><div class=\"line\">    var target = EventUtil.getTarget(event);</div><div class=\"line\"></div><div class=\"line\">    var children = this.children;</div><div class=\"line\">    var i, len;</div><div class=\"line\">    var anchor;</div><div class=\"line\">    var obj = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    for (i = 0, len = children.length; i &lt; len; ++i) &#123;</div><div class=\"line\">        if (children[i] === target) &#123;</div><div class=\"line\">            obj.index = i + 1;</div><div class=\"line\">            anchor = target.getElementsByTagName(&apos;a&apos;)[0];</div><div class=\"line\">            obj.name = DOMUtil.text(anchor);</div><div class=\"line\">            obj.link = DOMUtil.prop(anchor, &apos;href&apos;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    alert(&apos;index: &apos; + obj.index + &apos; name: &apos; + obj.name +</div><div class=\"line\">        &apos; link: &apos; + obj.link);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"有一个大数组-var-a-‘1’-‘2’-‘3’-…-a的长度是100-内容填充随机整数的字符串-请先构造此数组a-然后设计一个算法将其内容去重\"><a href=\"#有一个大数组-var-a-‘1’-‘2’-‘3’-…-a的长度是100-内容填充随机整数的字符串-请先构造此数组a-然后设计一个算法将其内容去重\" class=\"headerlink\" title=\"有一个大数组,var a = [‘1’, ‘2’, ‘3’, …];a的长度是100,内容填充随机整数的字符串.请先构造此数组a,然后设计一个算法将其内容去重\"></a>有一个大数组,var a = [‘1’, ‘2’, ‘3’, …];a的长度是100,内容填充随机整数的字符串.请先构造此数组a,然后设计一个算法将其内容去重</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* 数组去重</div><div class=\"line\">**/</div><div class=\"line\">function normalize(arr) &#123;</div><div class=\"line\">    if (arr &amp;&amp; Array.isArray(arr)) &#123;</div><div class=\"line\">        var i, len, map = &#123;&#125;;</div><div class=\"line\">        for (i = arr.length; i &gt;= 0; --i) &#123;</div><div class=\"line\">            if (arr[i] in map) &#123;</div><div class=\"line\">                arr.splice(i, 1);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                map[arr[i]] = true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return arr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">* 用100个随机整数对应的字符串填充数组。</div><div class=\"line\">**/</div><div class=\"line\">function fillArray(arr, start, end) &#123;</div><div class=\"line\">    start = start == undefined ? 1 : start;</div><div class=\"line\">    end = end == undefined ?  100 : end;</div><div class=\"line\"></div><div class=\"line\">    if (end &lt;= start) &#123;</div><div class=\"line\">        end = start + 100;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var width = end - start;</div><div class=\"line\">    var i;</div><div class=\"line\">    for (i = 100; i &gt;= 1; --i) &#123;</div><div class=\"line\">        arr.push(&apos;&apos; + (Math.floor(Math.random() * width) + start));</div><div class=\"line\">    &#125;</div><div class=\"line\">    return arr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var input = [];</div><div class=\"line\">fillArray(input, 1, 100);</div><div class=\"line\">input.sort(function (a, b) &#123;</div><div class=\"line\">    return a - b;</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(input);</div><div class=\"line\"></div><div class=\"line\">normalize(input);</div><div class=\"line\">console.log(input);</div></pre></td></tr></table></figure>\n<hr>\n<p>转载自: <a href=\"https://github.com/qiu-deqing/FE-interview\">https://github.com/qiu-deqing/FE-interview</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciwx5ihgv0001i7q3iszj3i4a","category_id":"ciwx5ihh30005i7q31hietkr5","_id":"ciwx5ihhc000di7q3vl88p6ym"},{"post_id":"ciwx5ihh00003i7q31xky9eum","category_id":"ciwx5ihhb000ai7q3ffy7r438","_id":"ciwx5ihhe000hi7q3bfrsqv1f"},{"post_id":"ciwx5ihh60007i7q3vykdbsh1","category_id":"ciwx5ihhb000ai7q3ffy7r438","_id":"ciwx5ihhg000li7q32ce19xrq"},{"post_id":"ciwx5ihh70008i7q3647fr1bw","category_id":"ciwx5ihhe000ii7q3i0h2q96n","_id":"ciwx5ihhj000oi7q3x01eqt4y"},{"post_id":"ciwx5ihha0009i7q3dxlni70i","category_id":"ciwx5ihhh000mi7q3n08pjwoh","_id":"ciwx5ihhk000pi7q3948770ky"}],"PostTag":[{"post_id":"ciwx5ihgv0001i7q3iszj3i4a","tag_id":"ciwx5ihh60006i7q31pue45ek","_id":"ciwx5ihhb000ci7q3onkgza2n"},{"post_id":"ciwx5ihh00003i7q31xky9eum","tag_id":"ciwx5ihhb000bi7q3j996k8ke","_id":"ciwx5ihhe000gi7q365khh1v0"},{"post_id":"ciwx5ihh60007i7q3vykdbsh1","tag_id":"ciwx5ihhb000bi7q3j996k8ke","_id":"ciwx5ihhf000ki7q369dy7emg"},{"post_id":"ciwx5ihha0009i7q3dxlni70i","tag_id":"ciwx5ihhe000ji7q33ozwlj9t","_id":"ciwx5ihhh000ni7q34tfam15e"}],"Tag":[{"name":"Job","_id":"ciwx5ihh60006i7q31pue45ek"},{"name":"Python","_id":"ciwx5ihhb000bi7q3j996k8ke"},{"name":"Python,Django","_id":"ciwx5ihhe000ji7q33ozwlj9t"}]}}